table "main"."invtakemain" {
  primaryKey = {
    columns = [
      "code"
    ]
    name = "invtakemain_pk"
    objectType = primaryKey
  }
  columns = (
    column "code" {
      type = bigint
      null = NOT NULL
    }
    column "scheme_docno" {
      type = character varying(25)
      null = NOT NULL
    }
    column "doccode" {
      type = bigint
      null = NOT NULL
    }
    column "docdate" {
      type = timestamp(0) without time zone
      null = NOT NULL
    }
    column "status" {
      type = character(1)
      null = NOT NULL
      default = 'O'::bpchar
    }
    column "outloccode" {
      type = bigint
      null = NOT NULL
    }
    column "inloccode" {
      type = bigint
      null = NOT NULL
    }
    column "dataversion" {
      type = bigint
    }
    column "remarks" {
      type = character varying(200)
    }
    column "admou_code" {
      type = bigint
      null = NOT NULL
    }
    column "admsite_code_owner" {
      type = bigint
      null = NOT NULL
    }
    column "ycode" {
      type = bigint
      null = NOT NULL
    }
    column "createdby" {
      type = bigint
      null = NOT NULL
    }
    column "createdon" {
      type = timestamp(0) without time zone
      null = NOT NULL
    }
    column "lastmodifiedby" {
      type = bigint
    }
    column "lastmodifiedon" {
      type = timestamp(0) without time zone
    }
    column "postedby" {
      type = bigint
    }
    column "postedon" {
      type = timestamp(0) without time zone
    }
    column "udfstring01" {
      type = character varying(500)
    }
    column "udfstring02" {
      type = character varying(500)
    }
    column "udfstring03" {
      type = character varying(500)
    }
    column "udfstring04" {
      type = character varying(500)
    }
    column "udfstring05" {
      type = character varying(500)
    }
    column "udfstring06" {
      type = character varying(500)
    }
    column "udfstring07" {
      type = character varying(500)
    }
    column "udfstring08" {
      type = character varying(500)
    }
    column "udfstring09" {
      type = character varying(500)
    }
    column "udfstring10" {
      type = character varying(500)
    }
    column "udfnum01" {
      type = numeric(20,3)
    }
    column "udfnum02" {
      type = numeric(20,3)
    }
    column "udfnum03" {
      type = numeric(20,3)
    }
    column "udfnum04" {
      type = numeric(20,3)
    }
    column "udfnum05" {
      type = numeric(20,3)
    }
    column "udfdate01" {
      type = timestamp(0) without time zone
    }
    column "udfdate02" {
      type = timestamp(0) without time zone
    }
    column "udfdate03" {
      type = timestamp(0) without time zone
    }
    column "udfdate04" {
      type = timestamp(0) without time zone
    }
    column "udfdate05" {
      type = timestamp(0) without time zone
    }
    column "guid" {
      type = character varying(50)
    }
  )
}

foreignKey "main"."invtakemain"."invtakemain_r01" {
  columns = [
    "doccode"
  ]
  referencedTable = "main"."admdocscheme"
  referencedColumns = [
    "doccode"
  ]
}

foreignKey "main"."invtakemain"."invtakemain_r02" {
  columns = [
    "outloccode"
  ]
  referencedTable = "main"."invloc"
  referencedColumns = [
    "loccode"
  ]
}

foreignKey "main"."invtakemain"."invtakemain_r03" {
  columns = [
    "inloccode"
  ]
  referencedTable = "main"."invloc"
  referencedColumns = [
    "loccode"
  ]
}

foreignKey "main"."invtakemain"."invtakemain_r04" {
  columns = [
    "admou_code"
  ]
  referencedTable = "main"."admou"
  referencedColumns = [
    "code"
  ]
}

foreignKey "main"."invtakemain"."invtakemain_r05" {
  columns = [
    "admsite_code_owner"
  ]
  referencedTable = "main"."admsite"
  referencedColumns = [
    "code"
  ]
}

foreignKey "main"."invtakemain"."invtakemain_r06" {
  columns = [
    "ycode"
  ]
  referencedTable = "main"."admyear"
  referencedColumns = [
    "ycode"
  ]
}

foreignKey "main"."invtakemain"."invtakemain_r07" {
  columns = [
    "createdby"
  ]
  referencedTable = "main"."hrdemp"
  referencedColumns = [
    "ecode"
  ]
}

foreignKey "main"."invtakemain"."invtakemain_r08" {
  columns = [
    "lastmodifiedby"
  ]
  referencedTable = "main"."hrdemp"
  referencedColumns = [
    "ecode"
  ]
}

foreignKey "main"."invtakemain"."invtakemain_r09" {
  columns = [
    "postedby"
  ]
  referencedTable = "main"."hrdemp"
  referencedColumns = [
    "ecode"
  ]
}

index "main"."invtakemain_lk01" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = admou_code
    }

  >
  isUnique = False
}

index "main"."invtakemain_lk02" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = admsite_code_owner
    }

  >
  isUnique = False
}

index "main"."invtakemain_lk03" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = createdby
    }

  >
  isUnique = False
}

index "main"."invtakemain_lk04" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = doccode
    }

  >
  isUnique = False
}

index "main"."invtakemain_lk05" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = inloccode
    }

  >
  isUnique = False
}

index "main"."invtakemain_lk06" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = lastmodifiedby
    }

  >
  isUnique = False
}

index "main"."invtakemain_lk07" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = outloccode
    }

  >
  isUnique = False
}

index "main"."invtakemain_lk08" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = postedby
    }

  >
  isUnique = False
}

index "main"."invtakemain_lk09" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = ycode
    }

  >
  isUnique = False
}

index "main"."invtakemain_u01" {
  table = "main"."invtakemain"
  type = btree
  columns = <
    {
      definition = guid
    }

  >
  isUnique = True
}

trigger "main"."invtakemain"."t_invtakemain" {
  timing = BEFORE
  events = [
    UPDATE
    INSERT
  ]
  level = ROW
  function = main.trigger_fct_t_invtakemain
  functionArguments = [
  ]
  constraint = False
}

