table "main"."prdlotmain" {
  primaryKey = {
    columns = [
      "code"
    ]
    name = "p_prdlotmain_code"
    objectType = primaryKey
  }
  columns = (
    column "code" {
      type = bigint
      null = NOT NULL
    }
    column "entno" {
      type = bigint
    }
    column "lotno" {
      type = character varying(25)
      null = NOT NULL
    }
    column "doccode" {
      type = bigint
    }
    column "ordcode" {
      type = bigint
    }
    column "schedule_date" {
      type = timestamp(0) without time zone
      null = NOT NULL
    }
    column "remarks" {
      type = character varying(500)
    }
    column "ycode" {
      type = bigint
    }
    column "admou_code" {
      type = bigint
      null = NOT NULL
    }
    column "time" {
      type = timestamp(0) without time zone
      null = NOT NULL
    }
    column "ecode" {
      type = bigint
      null = NOT NULL
    }
    column "last_access_time" {
      type = timestamp(0) without time zone
    }
    column "last_access_ecode" {
      type = bigint
    }
    column "is_closed" {
      type = character(1)
      null = NOT NULL
      default = 'N'::bpchar
    }
    column "close_date" {
      type = timestamp(0) without time zone
    }
    column "admsite_code" {
      type = bigint
      null = NOT NULL
    }
    column "plan_mode" {
      type = character(1)
      default = 'A'::bpchar
    }
    column "routegrp_code" {
      type = bigint
      null = NOT NULL
    }
    column "entry_source" {
      type = character varying(25)
      null = NOT NULL
    }
    column "udfstring01" {
      type = character varying(500)
    }
    column "udfstring02" {
      type = character varying(500)
    }
    column "udfstring03" {
      type = character varying(500)
    }
    column "udfstring04" {
      type = character varying(500)
    }
    column "udfstring05" {
      type = character varying(500)
    }
    column "udfstring06" {
      type = character varying(500)
    }
    column "udfstring07" {
      type = character varying(500)
    }
    column "udfstring08" {
      type = character varying(500)
    }
    column "udfstring09" {
      type = character varying(500)
    }
    column "udfstring10" {
      type = character varying(500)
    }
    column "udfnum01" {
      type = numeric(20,3)
    }
    column "udfnum02" {
      type = numeric(20,3)
    }
    column "udfnum03" {
      type = numeric(20,3)
    }
    column "udfnum04" {
      type = numeric(20,3)
    }
    column "udfnum05" {
      type = numeric(20,3)
    }
    column "udfdate01" {
      type = timestamp(0) without time zone
    }
    column "udfdate02" {
      type = timestamp(0) without time zone
    }
    column "udfdate03" {
      type = timestamp(0) without time zone
    }
    column "udfdate04" {
      type = timestamp(0) without time zone
    }
    column "udfdate05" {
      type = timestamp(0) without time zone
    }
    column "dataversion" {
      type = bigint
      null = NOT NULL
    }
    column "populate_master_bom_in_order" {
      type = character(1)
      default = 'N'::bpchar
    }
  )
}

foreignKey "main"."prdlotmain"."r_prdlotmain_admou_code" {
  columns = [
    "admou_code"
  ]
  referencedTable = "main"."admou"
  referencedColumns = [
    "code"
  ]
}

foreignKey "main"."prdlotmain"."r_prdlotmain_admsite_code" {
  columns = [
    "admsite_code"
  ]
  referencedTable = "main"."admsite"
  referencedColumns = [
    "code"
  ]
}

foreignKey "main"."prdlotmain"."r_prdlotmain_doccode" {
  columns = [
    "doccode"
  ]
  referencedTable = "main"."admdocscheme"
  referencedColumns = [
    "doccode"
  ]
}

foreignKey "main"."prdlotmain"."r_prdlotmain_ecode" {
  columns = [
    "ecode"
  ]
  referencedTable = "main"."hrdemp"
  referencedColumns = [
    "ecode"
  ]
}

foreignKey "main"."prdlotmain"."r_prdlotmain_lastaccessecode" {
  columns = [
    "last_access_ecode"
  ]
  referencedTable = "main"."hrdemp"
  referencedColumns = [
    "ecode"
  ]
}

foreignKey "main"."prdlotmain"."r_prdlotmain_ordcode" {
  columns = [
    "ordcode"
  ]
  referencedTable = "main"."salordmain"
  referencedColumns = [
    "ordcode"
  ]
}

foreignKey "main"."prdlotmain"."r_prdlotmain_routegrp_code" {
  columns = [
    "routegrp_code"
  ]
  referencedTable = "main"."prdroutegrp"
  referencedColumns = [
    "code"
  ]
}

foreignKey "main"."prdlotmain"."r_prdlotmain_ycode" {
  columns = [
    "ycode"
  ]
  referencedTable = "main"."admyear"
  referencedColumns = [
    "ycode"
  ]
}

index "main"."prdlotmain_lk01" {
  table = "main"."prdlotmain"
  type = btree
  columns = <
    {
      definition = admou_code
    }

  >
  isUnique = False
}

index "main"."prdlotmain_lk02" {
  table = "main"."prdlotmain"
  type = btree
  columns = <
    {
      definition = doccode
    }

  >
  isUnique = False
}

index "main"."prdlotmain_lk03" {
  table = "main"."prdlotmain"
  type = btree
  columns = <
    {
      definition = ecode
    }

  >
  isUnique = False
}

index "main"."prdlotmain_lk04" {
  table = "main"."prdlotmain"
  type = btree
  columns = <
    {
      definition = last_access_ecode
    }

  >
  isUnique = False
}

index "main"."prdlotmain_lk05" {
  table = "main"."prdlotmain"
  type = btree
  columns = <
    {
      definition = ordcode
    }

  >
  isUnique = False
}

index "main"."prdlotmain_lk06" {
  table = "main"."prdlotmain"
  type = btree
  columns = <
    {
      definition = ycode
    }

  >
  isUnique = False
}

index "main"."prdlotmain_lk07" {
  table = "main"."prdlotmain"
  type = btree
  columns = <
    {
      definition = admsite_code
    }

  >
  isUnique = False
}

index "main"."prdlotmain_lk08" {
  table = "main"."prdlotmain"
  type = btree
  columns = <
    {
      definition = routegrp_code
    }

  >
  isUnique = False
}

trigger "main"."prdlotmain"."t_prdlotmain_bd" {
  timing = BEFORE
  events = [
    DELETE
  ]
  level = ROW
  function = main.trigger_fct_t_prdlotmain_bd
  functionArguments = [
  ]
  constraint = False
}

trigger "main"."prdlotmain"."t_prdlotmain_dataversion" {
  timing = BEFORE
  events = [
    UPDATE
    INSERT
  ]
  level = ROW
  function = main.trigger_fct_t_prdlotmain_dataversion
  functionArguments = [
  ]
  constraint = False
}

