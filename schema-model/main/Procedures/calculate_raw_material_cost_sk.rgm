procedure "main"."calculate_raw_material_cost_sk()" {
  text = """

DECLARE
    v_table_rec type_rec_calculate_raw_material_cost_SK[];
    v_code bigint;
    v_rows_to_be_processed INT;
    V_DISP_FREQ BIGINT;
    V_ROWS_PROCESSED BIGINT;

BEGIN
    v_code := 0;
        v_table_rec := '{}';
        -- Assuming v_rows_to_be_processed, G_PROG_FLAG, V_DISP_FREQ, and V_ROWS_PROCESSED are declared variables

        -- Retrieve the count into v_rows_to_be_processed
--         SELECT COUNT(*) INTO STRICT v_rows_to_be_processed FROM sk_employee;

        -- Check G_PROG_FLAG and set V_DISP_FREQ and V_ROWS_PROCESSED accordingly
--         IF G_PROG_FLAG = 'Y' THEN
--             IF COALESCE(v_rows_to_be_processed, 0) > 10000 THEN
--                 V_DISP_FREQ := 10000;
--             ELSE
--                 V_DISP_FREQ := 1000;
--             END IF;
--             V_ROWS_PROCESSED := 0;
--         END IF;

        -- end rev : 004
		RAISE NOTICE 'EMP_ID-SALARY';
        LOOP
            v_table_rec := '{}';
            SELECT ARRAY_AGG(T)
            STRICT INTO v_table_rec
            FROM
--             (
--                 SELECT E.CTID,e.emp_id, d.salary
--                 FROM sk_employee e,dept_sk d
-- 				WHERE e.dept_id > v_code
--                 -- Add your WHERE conditions here
-- --                 ORDER BY e.job
--                 LIMIT 3
--             ) T;
			(SELECT CTID FROM
				(SELECT CTID,ROW_NUMBER() OVER () AS RN
                    FROM sk_employee   
                 )T1
				WHERE T1.RN	> v_code	  
			   LIMIT 3) T;
			 ----------------------

			IF ARRAY_LENGTH(v_table_rec,1) IS NULL THEN
				EXIT; 
			END IF;
            FOR i IN ARRAY_LOWER(v_table_rec, 1)..ARRAY_UPPER(v_table_rec, 1)
            LOOP
				RAISE NOTICE '%-', v_table_rec[I].CTID;
                -- Your logic here, for example, update or process the data
                -- EXECUTE 'UPDATE sk_employee SET ... WHERE emp_id = $1' USING v_table_rec[i].emp_id;
			v_code := v_code + 1;
			END LOOP;
			RAISE NOTICE 'EMP_ID-SALARY';
--             COMMIT;
        END LOOP;
       

END;
"""
  arguments = [
  ]
  language = plpgsql
}

