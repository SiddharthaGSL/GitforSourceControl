procedure "main"."db_pkg_promotion_upd_benefit(character, bigint)" {
  text = """

DECLARE

		V_TOT_GRSAMT double precision;
		V_TOT_PROMO_DISC double precision;
	
BEGIN
		PERFORM set_config('db_pkg_promotion.g_mark', 'Updating saleprice and promoprice.', false);
		UPDATE	GLOBAL_PROMO_RESOLVE
		SET	SALPROMO_SALEPRICE=
					CASE 	SALPROMO_GET_D_PRICE_BASIS
						WHEN 'M' THEN MRP
						WHEN 'L' THEN LISTED_MRP
						WHEN 'W' THEN WSP
						ELSE SALPROMO_SALEPRICE
					END,
			PROMO_DISCOUNT= DB_PKG_PROMOTION_GET_PROMO_DISCOUNT
					(
						CASE 	SALPROMO_GET_D_PRICE_BASIS
							WHEN 'M' THEN MRP
							WHEN 'L' THEN LISTED_MRP
							WHEN 'W' THEN WSP
							ELSE SALPROMO_SALEPRICE
						END,
						QTY,
						SALPROMO_GET_D_TYPE,
						CASE
							WHEN 	SALPROMO_GET_D_TYPE='F' AND ((SALPROMO_GET_D_PRICE_BASIS='E' AND SALPROMO_GET_POOL_TYPE='C') OR (SALPROMO_GET_D_PRICE_BASIS='E' AND SALPROMO_ISCOMBO='Y' AND SALPROMO_GET_BENEFIT_CODE=1)) THEN
								SALPROMO_GET_D_FACTOR*(CASE WHEN SALPROMO_GET_POOL_TYPE='C' THEN SALPROMO_GET_FACTOR ELSE (CASE WHEN SALPROMO_BASIS='QSLAB' THEN P_SLAB_SATISFY_QTY ELSE SALPROMO_SLAB_SIMPLE_FACTOR END) END)
							ELSE	SALPROMO_GET_D_FACTOR
						END,
						SALPROMO_GET_D_PRICE_BASIS,
						RATE,
						(SELECT SUM(coalesce(MRP,0)*coalesce(QTY,0)) FROM GLOBAL_PROMO_RESOLVE WHERE BUY_GET_STATUS='G' AND CURRENTLY_PROCESSING='Y'),
						CASE
							WHEN SALPROMO_BASIS='VSLAB' AND SALPROMO_GET_BENEFIT_CODE=1 AND SALPROMO_GET_D_TYPE='A' THEN 'Y' ELSE 'N'
						END,
						CASE WHEN SALPROMO_GET_POOL_TYPE='C' OR (SALPROMO_ISCOMBO='Y' AND SALPROMO_GET_BENEFIT_CODE=1) THEN 'Y' ELSE 'N' END
					)
		WHERE	STATUS='P'
		AND 	BUY_GET_STATUS='G'
		AND 	CURRENTLY_PROCESSING='Y';

		/* UPDATE ONLY FOR FIXED-PRICE */

		PERFORM set_config('db_pkg_promotion.g_mark', 'Updating saleprice and promoprice for fixed rate.', false);
		
		UPDATE	GLOBAL_PROMO_RESOLVE O
		SET	PROMO_DISCOUNT = coalesce(O.PROMO_DISCOUNT,0)-
						(
							(CASE
								WHEN O.SALPROMO_GET_D_PRICE_BASIS='E' THEN
								SALPROMO_GET_D_FACTOR*(CASE WHEN SALPROMO_GET_POOL_TYPE='C' THEN SALPROMO_GET_FACTOR ELSE (CASE WHEN SALPROMO_BASIS='QSLAB' THEN P_SLAB_SATISFY_QTY ELSE SALPROMO_SLAB_SIMPLE_FACTOR END) END)
								ELSE coalesce(O.SALPROMO_GET_D_FACTOR,0)
							END-
								(
									SELECT	SUM(coalesce(SALPROMO_SALEPRICE,0)*coalesce(QTY,0))-SUM(PROMO_DISCOUNT)
									FROM	GLOBAL_PROMO_RESOLVE I
									WHERE	I.BUY_GET_STATUS='G'
									AND	I.CURRENTLY_PROCESSING='Y'
								)
							)
						)
		WHERE	O.SALPROMO_GET_D_TYPE = 'F'
		AND (SALPROMO_GET_POOL_TYPE='C' OR (SALPROMO_ISCOMBO='Y' AND SALPROMO_GET_BENEFIT_CODE=1) OR SALPROMO_GET_D_PRICE_BASIS='A')
		AND	O.CURRENTLY_PROCESSING = 'Y'
		AND	O.BUY_GET_STATUS='G'
		AND	coalesce(O.PROMO_DISCOUNT,0)>0
		AND	O.SEQ=(SELECT MAX(SEQ) FROM GLOBAL_PROMO_RESOLVE WHERE BUY_GET_STATUS='G' AND CURRENTLY_PROCESSING='Y');

		/* Update only for VSLAB-FIXED DUSCOUNT-AMOUNT */

		UPDATE	GLOBAL_PROMO_RESOLVE O
		SET	PROMO_DISCOUNT=coalesce(O.PROMO_DISCOUNT,0)+
					(
						coalesce(O.SALPROMO_GET_D_FACTOR,0)-
							(
								SELECT 	SUM(PROMO_DISCOUNT)
								FROM	GLOBAL_PROMO_RESOLVE I
								WHERE	SALPROMO_BASIS='VSLAB'
								AND	SALPROMO_GET_BENEFIT_CODE=1
								AND	SALPROMO_GET_D_TYPE='A'
								AND	CURRENTLY_PROCESSING='Y'
							)
					)
		WHERE	O.SALPROMO_BASIS='VSLAB'
		AND	O.SALPROMO_GET_BENEFIT_CODE=1
		AND	O.SALPROMO_GET_D_TYPE='A'
		AND	O.CURRENTLY_PROCESSING='Y'
		AND	O.SEQ=(SELECT MAX(SEQ) FROM GLOBAL_PROMO_RESOLVE WHERE BUY_GET_STATUS='G' AND CURRENTLY_PROCESSING='Y');

		IF coalesce(P_IS_PROMO_DISTRIBUTE,'N') = 'N' THEN
			PERFORM set_config('db_pkg_promotion.g_mark', 'Updating promo_discout for flat discount.', false);
			UPDATE	GLOBAL_PROMO_RESOLVE
			SET	EFF_PROMO_DISCOUNT=PROMO_DISCOUNT
			WHERE	CURRENTLY_PROCESSING='Y';
		ELSE
			PERFORM set_config('db_pkg_promotion.g_mark', 'Updating promo_discout for buy pool or get pool.', false);
			SELECT
				SUM(PROMO_DISCOUNT),
				SUM(coalesce(SALPROMO_SALEPRICE,0)*coalesce(QTY,0))
			INTO STRICT	V_TOT_PROMO_DISC, V_TOT_GRSAMT
			FROM	GLOBAL_PROMO_RESOLVE I
			WHERE	I.CURRENTLY_PROCESSING='Y';

			IF coalesce(V_TOT_GRSAMT,0)>0 THEN
				UPDATE	GLOBAL_PROMO_RESOLVE
				SET	EFF_PROMO_DISCOUNT=((coalesce(SALPROMO_SALEPRICE,0)*coalesce(QTY,0))/coalesce(V_TOT_GRSAMT,0))*coalesce(V_TOT_PROMO_DISC,0)
				WHERE	CURRENTLY_PROCESSING='Y';

				UPDATE	GLOBAL_PROMO_RESOLVE O
				SET	O.EFF_PROMO_DISCOUNT=
					coalesce(O.EFF_PROMO_DISCOUNT,0)+(coalesce(V_TOT_PROMO_DISC,0)-
									(SELECT SUM(I.EFF_PROMO_DISCOUNT) FROM GLOBAL_PROMO_RESOLVE I WHERE I.CURRENTLY_PROCESSING='Y')
								)
				WHERE	O.CURRENTLY_PROCESSING='Y'
				AND	O.SEQ=(SELECT MAX(I1.SEQ) FROM GLOBAL_PROMO_RESOLVE I1 WHERE I1.CURRENTLY_PROCESSING='Y');
			END IF;
		END IF;

		UPDATE	GLOBAL_PROMO_RESOLVE
		SET	SALPROMO_PROMOPRICE=coalesce(SALPROMO_SALEPRICE,0)-(coalesce(PROMO_DISCOUNT,0)/QTY)
		WHERE	CURRENTLY_PROCESSING='Y';

		PERFORM set_config('db_pkg_promotion.g_mark', 'Finished updation of current benefit.', false);
		UPDATE	GLOBAL_PROMO_RESOLVE
		SET	CURRENTLY_PROCESSING='N'
		WHERE	CURRENTLY_PROCESSING='Y';
	END;

"""
  arguments = <
    {
      name = p_is_promo_distribute
      type = character
      mode = IN
    }

    {
      name = p_slab_satisfy_qty
      type = bigint
      mode = IN
      default = NULL::bigint
    }

  >
  language = plpgsql
}

