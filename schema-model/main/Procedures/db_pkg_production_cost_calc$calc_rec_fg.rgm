procedure "main"."db_pkg_production_cost_calc$calc_rec_fg(bigint, bigint, character varying, bigint, character)" {
  text = """

DECLARE

        c1 CURSOR FOR
        SELECT  code,txn_type,det_code,lotcode,jobcode,jrccode,
                assembly_icode,component_icode,item_type,
                assembly_wip,txn_qty,rate,amount,ass_saitem_code,
                com_saitem_code,operation_seq,prcode,job_assembly_icode
        from    prdwiptrans t
        where   jobcode         = p_jobcode
        and     assembly_icode  = p_assembly_icode
        and     txn_type        = 'REC'
        and     item_type       = 'FG'
        and     coalesce(lotcode,0)  =  coalesce(p_lotcode,coalesce(lotcode,0))
        and     jrccode         = p_tranmain_code
        order by
                code;

        v_rec_com_ass_amt   prdwiptrans.amount%type;
        v_rec_serv_amt      prdwiptrans.amount%type;
        v_rec_fg_amt        prdwiptrans.amount%type;
        v_rec_fg_rate       prdwiptrans.rate%type;
        -- start rev : 001
        v_old_rec_fg_rate   prdwiptrans.rate%type;
        v_calc_rec_fg_rate  prdwiptrans.rate%type;
        -- end rev : 001
        v_txn_qty           prdwiptrans.txn_qty%type;

BEGIN
        for c1_loop in c1
        loop
            -- =======================================================================================================================
            -- initialisation of local varriables
            -- =======================================================================================================================
            v_rec_com_ass_amt := 0;
            v_rec_serv_amt    := 0;
            v_rec_fg_amt      := 0;
            v_rec_fg_rate     := 0;
            -- start rev : 001
            v_calc_rec_fg_rate:= 0;
            v_old_rec_fg_rate := 0;
            -- end rev : 001
            v_txn_qty         := 0;
            v_txn_qty         := c1_loop.txn_qty;

            -- =======================================================================================================================
            -- get com and ass amount
            -- =======================================================================================================================
            select  coalesce(sum(abs(coalesce(amount,0))),0)
            into STRICT    v_rec_com_ass_amt
            from    prdwiptrans t1
            where   jobcode                 = c1_loop.jobcode
            and     assembly_icode          = c1_loop.assembly_icode
            and     job_assembly_icode      = c1_loop.job_assembly_icode
            and     coalesce(lotcode,0)          = coalesce(c1_loop.lotcode,coalesce(lotcode,0))
            and     coalesce(ass_saitem_code,0)  = coalesce(c1_loop.ass_saitem_code,coalesce(ass_saitem_code,0))
            and     jrccode                 = c1_loop.jrccode
            and     txn_type                = 'REC'
            and     item_type in ('COM','ASS');

            -- =======================================================================================================================
            -- get service amount
            -- =======================================================================================================================
            select  coalesce(sum(abs(coalesce(srv_amount,0))),0)
            into STRICT    v_rec_serv_amt
            from    prdwiptrans t1
            where   jobcode                 = c1_loop.jobcode
            and     det_code                = c1_loop.det_code
            and     jrccode                 = c1_loop.jrccode
            and     txn_type                = 'REC'
            and     item_type               = 'SER';

            v_rec_fg_amt := round((v_rec_com_ass_amt + v_rec_serv_amt)::numeric,2);

            -- start rev : 001
            begin
                select  case when coalesce(rate,0) <> coalesce(costrate,0) then
                                    coalesce(rate,0)
                             else
                                    0
                        end
                into STRICT    v_old_rec_fg_rate
                from    prdjrcdet rd
                where   code     = c1_loop.det_code
                and     jobcode  = c1_loop.jobcode
                and     jrccode  = c1_loop.jrccode;
            exception
                when no_data_found then
                v_old_rec_fg_rate := 0;
            end;
            -- end rev : 001
            -- =======================================================================================================================
            -- calculating rec-fg rate
            -- update rec-fg rate
            -- =======================================================================================================================
            if  coalesce(v_txn_qty,0) <> 0 then
                -- start rev : 001
                --v_rec_fg_rate := round(v_rec_fg_amt/v_txn_qty,3);
                v_calc_rec_fg_rate := round((v_rec_fg_amt/v_txn_qty)::numeric,3);

                if  coalesce(v_old_rec_fg_rate,0) <> 0 then
                    v_rec_fg_rate := v_old_rec_fg_rate;
                    v_rec_fg_amt  := round((v_old_rec_fg_rate * v_txn_qty)::numeric,2);
                else
                    v_rec_fg_rate := v_calc_rec_fg_rate;
                end if;
                -- end rev : 001
                update  prdwiptrans t1
                set     amount   = case when txn_type = 'FCL' then
                                            round((0-v_rec_fg_amt)::numeric,2)
                                        else
                                            round((0+v_rec_fg_amt)::numeric,2)
                                   end,
                        rate     = v_rec_fg_rate,
                        -- START REV : 004
                        cogs_code   = case when p_cogs_state = 'R' then
                                                0
                                            else
                                                null
                                      end
                        -- END REV : 004
                where   det_code = c1_loop.det_code
                and     jobcode  = c1_loop.jobcode
                and     jrccode  = c1_loop.jrccode
                and     txn_type in ('REC','FCL')
                and     item_type in ('FG');

                update  prdjrcdet rd
                set     costrate = v_calc_rec_fg_rate,
                        -- start rev : 001
                        /*rate     = case when nvl(costrate,0) = nvl(rate,0) then
                                             v_rec_fg_rate
                                        else
                                            rate
                                   end
                        */
                        rate    = v_rec_fg_rate
                        -- end rev : 001
                where   jrccode  = c1_loop.jrccode
                and     code     = c1_loop.det_code;

                update  invstock s
                set     rate        = v_rec_fg_rate,
                        amount      = round((v_rec_fg_amt)::numeric,2),
                        costrate    = v_rec_fg_rate,
                        costamount  = round((v_rec_fg_amt)::numeric,2),
                        -- START REV : 004
                        cogs_code   = case when p_cogs_state = 'R' then
                                                0
                                            else
                                                null
                                      end
                        -- END REV : 004
                where   entcode     = c1_loop.jrccode::varchar
                and     detail_code = c1_loop.det_code::varchar
                and     enttype     = 'PRR'
                and     icode       = c1_loop.assembly_icode;

                update  invitem i
                set     rate = v_rec_fg_rate,
                        -- START REV : 004
                        cogs_code   = case when p_cogs_state = 'R' then
                                                0
                                            else
                                                null
                                      end
                        -- END REV : 004
                where   icode= c1_loop.assembly_icode;

                -- START REV : 005
                CALL DB_PRO_UPD_LAST_IN_RATE(c1_loop.jrccode, 'PRR', c1_loop.det_code, c1_loop.assembly_icode);
                -- END REV : 005
            end if;
        end loop;
    exception
        when others then
        CALL erraudit(user, 'db_pkg_production_cal_rate$calc_rec_fg', SQLSTATE, sqlerrm);
    end;

"""
  arguments = <
    {
      name = p_jobcode
      type = bigint
      mode = IN
    }

    {
      name = p_lotcode
      type = bigint
      mode = IN
    }

    {
      name = p_assembly_icode
      type = character varying
      mode = IN
    }

    {
      name = p_tranmain_code
      type = bigint
      mode = IN
    }

    {
      name = p_cogs_state
      type = character
      mode = IN
      default = 'N'::bpchar
    }

  >
  language = plpgsql
}

