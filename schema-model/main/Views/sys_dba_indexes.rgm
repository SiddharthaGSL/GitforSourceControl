view "main"."sys_dba_indexes" {
  text = """-
SELECT (tnsp.nspname)::character varying(128) AS owner,
    (irel.relname)::character varying(128) AS index_name,
    (
        CASE
            WHEN (i.indexprs IS NULL) THEN 'NORMAL'::text
            ELSE 'FUNCTION-BASED NORMAL'::text
        END)::character varying(27) AS index_type,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    'TABLE'::character varying(11) AS table_type,
    (
        CASE
            WHEN i.indisunique THEN 'UNIQUE'::text
            ELSE 'NONUNIQUE'::text
        END)::character varying(9) AS uniqueness,
    'DISABLED'::character varying(13) AS compression,
    NULL::integer AS prefix_length,
    (ts.spcname)::character varying(30) AS tablespace_name,
    NULL::integer AS ini_trans,
    NULL::integer AS max_trans,
    NULL::integer AS initial_extent,
    NULL::integer AS next_extent,
    NULL::integer AS min_extents,
    NULL::integer AS max_extents,
    NULL::integer AS pct_increase,
    NULL::integer AS pct_threshold,
    NULL::integer AS include_column,
    NULL::integer AS freelists,
    NULL::integer AS freelist_groups,
    NULL::integer AS pct_free,
    (
        CASE trel.relpersistence
            WHEN 'p'::"char" THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS logging,
    NULL::integer AS blevel,
    NULL::integer AS leaf_blocks,
    (
        CASE
            WHEN i.indisprimary THEN st.n_live_tup
            ELSE NULL::bigint
        END)::integer AS distinct_keys,
    NULL::integer AS avg_leaf_blocks_per_key,
    NULL::integer AS avg_data_blocks_per_key,
    NULL::integer AS clustering_factor,
    (
        CASE
            WHEN i.indisready THEN 'ENABLED'::text
            ELSE 'DISABLED'::text
        END)::character varying(8) AS status,
    (st.n_live_tup)::integer AS num_rows,
    NULL::integer AS sample_size,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::character varying(40) AS degree,
    NULL::character varying(40) AS instances,
    (
        CASE
            WHEN trel.relispartition THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS partitioned,
    (
        CASE trel.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END)::character varying(1) AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'NO'::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    NULL::integer AS pct_direct_access,
    NULL::character varying(128) AS ityp_owner,
    NULL::character varying(128) AS ityp_name,
    NULL::character varying(1000) AS parameters,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(12) AS domidx_status,
    NULL::character varying(6) AS domidx_opstatus,
    NULL::character varying(8) AS funcidx_status,
    'NO'::character varying(3) AS join_index,
    'NO'::character varying(3) AS iot_redundant_pkey_elim,
    'NO'::character varying(3) AS dropped,
    (
        CASE
            WHEN i.indisvalid THEN 'VISIBLE'::text
            ELSE 'INVISIBLE'::text
        END)::character varying(9) AS visibility,
    NULL::character varying(14) AS domidx_management,
    (
        CASE irel.relpages
            WHEN 0 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS segment_created,
    'NO'::character varying(3) AS orphaned_entries,
    (
        CASE
            WHEN (i.indpred IS NULL) THEN 'FULL'::text
            ELSE 'PARTIAL'::text
        END)::character varying(7) AS indexing
   FROM ((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_am am ON (((am.oid = irel.relam) AND (am.amname = 'btree'::name))))
     LEFT JOIN pg_tablespace ts ON ((ts.oid = irel.reltablespace)))
     LEFT JOIN pg_stat_all_tables st ON (((st.schemaname = tnsp.nspname) AND (st.relname = trel.relname))))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));
"""
  columns = (
    column "owner" {
      type = "character varying(128)"
    }
    column "index_name" {
      type = "character varying(128)"
    }
    column "index_type" {
      type = "character varying(27)"
    }
    column "table_owner" {
      type = "character varying(128)"
    }
    column "table_name" {
      type = "character varying(128)"
    }
    column "table_type" {
      type = "character varying(11)"
    }
    column "uniqueness" {
      type = "character varying(9)"
    }
    column "compression" {
      type = "character varying(13)"
    }
    column "prefix_length" {
      type = "integer"
    }
    column "tablespace_name" {
      type = "character varying(30)"
    }
    column "ini_trans" {
      type = "integer"
    }
    column "max_trans" {
      type = "integer"
    }
    column "initial_extent" {
      type = "integer"
    }
    column "next_extent" {
      type = "integer"
    }
    column "min_extents" {
      type = "integer"
    }
    column "max_extents" {
      type = "integer"
    }
    column "pct_increase" {
      type = "integer"
    }
    column "pct_threshold" {
      type = "integer"
    }
    column "include_column" {
      type = "integer"
    }
    column "freelists" {
      type = "integer"
    }
    column "freelist_groups" {
      type = "integer"
    }
    column "pct_free" {
      type = "integer"
    }
    column "logging" {
      type = "character varying(3)"
    }
    column "blevel" {
      type = "integer"
    }
    column "leaf_blocks" {
      type = "integer"
    }
    column "distinct_keys" {
      type = "integer"
    }
    column "avg_leaf_blocks_per_key" {
      type = "integer"
    }
    column "avg_data_blocks_per_key" {
      type = "integer"
    }
    column "clustering_factor" {
      type = "integer"
    }
    column "status" {
      type = "character varying(8)"
    }
    column "num_rows" {
      type = "integer"
    }
    column "sample_size" {
      type = "integer"
    }
    column "last_analyzed" {
      type = date
    }
    column "degree" {
      type = "character varying(40)"
    }
    column "instances" {
      type = "character varying(40)"
    }
    column "partitioned" {
      type = "character varying(3)"
    }
    column "temporary" {
      type = "character varying(1)"
    }
    column "generated" {
      type = "character varying(1)"
    }
    column "secondary" {
      type = "character varying(1)"
    }
    column "buffer_pool" {
      type = "character varying(7)"
    }
    column "flash_cache" {
      type = "character varying(7)"
    }
    column "cell_flash_cache" {
      type = "character varying(7)"
    }
    column "user_stats" {
      type = "character varying(3)"
    }
    column "duration" {
      type = "character varying(15)"
    }
    column "pct_direct_access" {
      type = "integer"
    }
    column "ityp_owner" {
      type = "character varying(128)"
    }
    column "ityp_name" {
      type = "character varying(128)"
    }
    column "parameters" {
      type = "character varying(1000)"
    }
    column "global_stats" {
      type = "character varying(3)"
    }
    column "domidx_status" {
      type = "character varying(12)"
    }
    column "domidx_opstatus" {
      type = "character varying(6)"
    }
    column "funcidx_status" {
      type = "character varying(8)"
    }
    column "join_index" {
      type = "character varying(3)"
    }
    column "iot_redundant_pkey_elim" {
      type = "character varying(3)"
    }
    column "dropped" {
      type = "character varying(3)"
    }
    column "visibility" {
      type = "character varying(9)"
    }
    column "domidx_management" {
      type = "character varying(14)"
    }
    column "segment_created" {
      type = "character varying(3)"
    }
    column "orphaned_entries" {
      type = "character varying(3)"
    }
    column "indexing" {
      type = "character varying(7)"
    }
  )
}

