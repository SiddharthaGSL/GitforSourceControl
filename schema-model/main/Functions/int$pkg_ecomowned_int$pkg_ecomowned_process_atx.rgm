function "main"."int$pkg_ecomowned_int$pkg_ecomowned_process_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      ora2pg_rowcount int;
v_site_initial           varchar(15);
      errmsg                   varchar(500);
      v_slab_range_desc        varchar(100);
      vsession                 varchar(100);
      vdetailtbl               varchar(5000);
      vdetailrec               varchar(500);

      errcode                  text;
      vmaxno                   bigint;
      vcount                   bigint;
      v_slab_range_rate        double precision;

      -- start rev : 013
      v_row_processed          bigint;
      -- end rev : 013
-- START REV : 009
      V_MAIN_CSCODE            bigint := NULL;
      V_SCHEME_DOCNO           varchar(100) := NULL;
      -- END REV : 009
      -- To Update Existing Customers
      V_MAIN_GL_AMT            double precision := 0;

      -- START REV : 019
      v_taxregime              varchar(5);
      v_EXPORT_WITH_PAYMENT    varchar(5);
      v_gstappl                varchar(5);                            -- 011;
      v_postive_count          integer;
      v_negative_count         integer;
      v_qty_cnt                integer;
      v_doccode                bigint;
      V_SCHEME_DOC             varchar(50);
      v_appl_inv_num           varchar(5);
      -- END REV : 019
      V_TAXPERCENT             double precision;
      --V_IGSTRATE  NUMBER (20, 2);
      V_IGSTAMT                double precision;
      --V_CGSTRATE  NUMBER (20, 2);
      V_CGSTAMT                double precision;
      --V_SGSTRATE  NUMBER (20, 2);
      V_SGSTAMT                double precision;
      --V_CESSRATE NUMBER (20, 2);
      V_CESSAMT                double precision;
      V_CGSTRATE               INVGSTRATE.CGST_RATE%TYPE := 0;
      V_SGSTRATE               INVGSTRATE.SGST_RATE%TYPE := 0;
      V_IGSTRATE               INVGSTRATE.IGST_RATE%TYPE := 0;
      V_CESSRATE               INVGSTRATE.CESS_RATE%TYPE := 0;
      V_CODAMT                 double precision;
      V_NETAMT                 double precision;
      v_manual                 varchar(5);
      V_SALCSDETCODE           numeric(20);
      V_TAXDESCRIPTION         varchar(50);
      V_CNT_MAX                bigint;
      V_CNT_PRI                bigint;
      V_HSNSACCODE             INVHSNSACMAIN.CODE%TYPE;

      -- start rev : 035
      v_cur_fintradegrp_code   salcsmain.fintradegrp_code%TYPE;

      -- end rev : 035
      c CURSOR FOR
         SELECT a.B_CUSTOMER_FIRSTNAME,
                a.B_CUSTOMER_MIDDLENAME,
                a.B_CUSTOMER_LASTNAME,
                a.B_CUSTOMER_ADDRESSLINE1,
                a.B_CUSTOMER_ADDRESSLINE2,
                a.B_CUSTOMER_ADDRESSLINE3,
                a.B_CUSTOMER_PIN,
                a.B_CUSTOMER_EMAIL,
                CASE
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'FEMALE' THEN 'F'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'MALE' THEN 'M'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'TRANSGENDER' THEN 'T'
                   ELSE 'U'
                END
                   gender,
                e.fname,
                a.B_CUSTOMER_DISTRICT,
                a.B_CUSTOMER_CITY,
                a.B_customer_state,
                a.B_CUSTOMER_COUNTRY,
                a.B_CUSTOMER_MOBILENO                        -- start rev : 012
                                     ,
                B_CUST_GST_ID_NO    B_CUST_GST_ID_NO,
                B_CUST_GST_REG_DATE B_CUST_GST_REG_DATE,
                CASE
                   WHEN a.B_CUST_GST_ID_NO IS NOT NULL
                   THEN
                      SUBSTR(a.B_CUST_GST_ID_NO, 1, 2)
                   WHEN a.B_CUST_GST_STATE_NAME IS NOT NULL
                   THEN
                      gs.code
                   ELSE
                      NULL
                END
                   B_CUST_GST_STATE_NAME                       -- end rev : 012
                                        -- start rev : 014
                ,
                i.code                                         -- end rev : 014
                      -- start rev : 019
                ,
                city.code           cityid
           -- end rev : 019
           FROM hrdemp e, int$stg_ecomowned a
LEFT OUTER JOIN admisd i ON (a.B_ISDCODE::text = i.ISDCODE)
LEFT OUTER JOIN admgststate gs ON (UPPER(coalesce(a.B_CUST_GST_STATE_NAME, '@@')) = UPPER(gs.name))
LEFT OUTER JOIN admcity city ON (UPPER(a.B_CUSTOMER_CITY) = UPPER(city.CTNAME))
WHERE a.userid = e.ecode 
  AND EXISTS (SELECT 1
                   FROM psite_customer c
                   WHERE c.mobile = a.B_CUSTOMER_MOBILENO) 
  AND a.B_CUSTOMER_MOBILENO IS NOT NULL 
  AND a.B_CUSTOMER_FIRSTNAME IS NOT NULL 
  AND a.B_CUSTOMER_LASTNAME IS NOT NULL 
  AND a.B_ISDCODE IS NOT NULL
  AND userid = p_userid;

      -- start rev: 019
      c1 CURSOR FOR
         SELECT a.S_CUSTOMER_FIRSTNAME,
                a.S_CUSTOMER_MIDDLENAME,
                a.S_CUSTOMER_LASTNAME,
                a.S_CUSTOMER_ADDRESSLINE1,
                a.S_CUSTOMER_ADDRESSLINE2,
                a.S_CUSTOMER_ADDRESSLINE3,
                a.S_CUSTOMER_PIN,
                a.S_CUSTOMER_EMAIL,
                CASE
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'FEMALE' THEN 'F'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'MALE' THEN 'M'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'TRANSGENDER' THEN 'T'
                   ELSE 'U'
                END
                   gender,
                e.fname,
                a.S_CUSTOMER_DISTRICT,
                a.S_CUSTOMER_CITY,
                a.S_customer_state,
                a.S_CUSTOMER_COUNTRY,
                a.S_CUSTOMER_MOBILENO,
                S_CUST_GST_ID_NO    S_CUST_GST_ID_NO,
                S_CUST_GST_REG_DATE S_CUST_GST_REG_DATE,
                CASE
                   WHEN a.S_CUST_GST_ID_NO IS NOT NULL
                   THEN
                      SUBSTR(a.S_CUST_GST_ID_NO, 1, 2)
                   WHEN a.S_CUST_GST_STATE_NAME IS NOT NULL
                   THEN
                      gs.code
                   ELSE
                      NULL
                END
                   S_CUST_GST_STATE_NAME,
                i.code
           FROM hrdemp e, int$stg_ecomowned a
LEFT OUTER JOIN admisd i ON (a.S_ISDCODE::text = i.ISDCODE)
LEFT OUTER JOIN admgststate gs ON (UPPER(coalesce(a.S_CUST_GST_STATE_NAME, '@@')) = UPPER(gs.name))
WHERE a.userid = e.ecode  --START REV : 026
  AND a.S_CUSTOMER_MOBILENO IS NOT NULL AND a.S_CUSTOMER_FIRSTNAME IS NOT NULL AND a.S_CUSTOMER_LASTNAME IS NOT NULL AND a.S_ISDCODE IS NOT NULL --END REV : 026
  AND EXISTS (SELECT 1
                          FROM psite_customer c
                         WHERE c.mobile = a.S_CUSTOMER_MOBILENO)  AND userid = p_userid;

      c_email CURSOR FOR
         SELECT a.B_CUSTOMER_FIRSTNAME,
                a.B_CUSTOMER_MIDDLENAME,
                a.B_CUSTOMER_LASTNAME,
                a.B_CUSTOMER_ADDRESSLINE1,
                a.B_CUSTOMER_ADDRESSLINE2,
                a.B_CUSTOMER_ADDRESSLINE3,
                a.B_CUSTOMER_PIN,
                a.B_CUSTOMER_EMAIL,
                CASE
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'FEMALE' THEN 'F'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'MALE' THEN 'M'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'TRANSGENDER' THEN 'T'
                   ELSE 'U'
                END
                   gender,
                e.fname,
                a.B_CUSTOMER_DISTRICT,
                a.B_CUSTOMER_CITY,
                a.B_customer_state,
                a.B_CUSTOMER_COUNTRY,
                a.B_CUSTOMER_MOBILENO,
                B_CUST_GST_ID_NO    B_CUST_GST_ID_NO,
                B_CUST_GST_REG_DATE B_CUST_GST_REG_DATE,
                CASE
                   WHEN a.B_CUST_GST_ID_NO IS NOT NULL
                   THEN
                      SUBSTR(a.B_CUST_GST_ID_NO, 1, 2)
                   WHEN a.B_CUST_GST_STATE_NAME IS NOT NULL
                   THEN
                      gs.code
                   ELSE
                      NULL
                END
                   B_CUST_GST_STATE_NAME,
                i.code                                       -- start rev : 019
                      ,
                city.code           cityid
           -- end rev : 019
           FROM hrdemp e, int$stg_ecomowned a
LEFT OUTER JOIN admisd i ON (a.B_ISDCODE::text = i.ISDCODE)
LEFT OUTER JOIN admgststate gs ON (UPPER(coalesce(a.B_CUST_GST_STATE_NAME, '@@')) = UPPER(gs.name))
LEFT OUTER JOIN admcity city ON (UPPER(a.B_CUSTOMER_CITY) = UPPER(city.CTNAME))
WHERE a.userid = e.ecode  AND EXISTS (SELECT 1
                          FROM psite_customer c
                         WHERE c.EMAIL = a.B_CUSTOMER_EMAIL) AND a.B_CUSTOMER_MOBILENO IS NULL

  AND userid = p_userid;

      c1_email CURSOR FOR
         SELECT a.S_CUSTOMER_FIRSTNAME,
                a.S_CUSTOMER_MIDDLENAME,
                a.S_CUSTOMER_LASTNAME,
                a.S_CUSTOMER_ADDRESSLINE1,
                a.S_CUSTOMER_ADDRESSLINE2,
                a.S_CUSTOMER_ADDRESSLINE3,
                a.S_CUSTOMER_PIN,
                a.S_CUSTOMER_EMAIL,
                CASE
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'FEMALE' THEN 'F'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'MALE' THEN 'M'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'TRANSGENDER' THEN 'T'
                   ELSE 'U'
                END
                   gender,
                e.fname,
                a.S_CUSTOMER_DISTRICT,
                a.S_CUSTOMER_CITY,
                a.S_customer_state,
                a.S_CUSTOMER_COUNTRY,
                a.S_CUSTOMER_MOBILENO,
                S_CUST_GST_ID_NO    S_CUST_GST_ID_NO,
                S_CUST_GST_REG_DATE S_CUST_GST_REG_DATE,
                CASE
                   WHEN a.S_CUST_GST_ID_NO IS NOT NULL
                   THEN
                      SUBSTR(a.S_CUST_GST_ID_NO, 1, 2)
                   WHEN a.S_CUST_GST_STATE_NAME IS NOT NULL
                   THEN
                      gs.code
                   ELSE
                      NULL
                END
                   S_CUST_GST_STATE_NAME,
                i.code
           FROM hrdemp e, int$stg_ecomowned a
LEFT OUTER JOIN admisd i ON (a.S_ISDCODE::text = i.ISDCODE)
LEFT OUTER JOIN admgststate gs ON (UPPER(coalesce(a.S_CUST_GST_STATE_NAME, '@@')) = UPPER(gs.name))
WHERE a.userid = e.ecode  AND EXISTS (SELECT 1
                          FROM psite_customer c
                         WHERE c.EMAIL = a.S_CUSTOMER_EMAIL) AND a.S_CUSTOMER_MOBILENO IS NULL  AND userid = p_userid;

      c_icode CURSOR FOR
         SELECT ICODE, BARCODE
           FROM INVITEM B, int$STG_ECOMOWNED A
          WHERE (   UPPER(B.BARCODE) =
                           UPPER(A.SECONDARYSUPPLYPARENTICODE)
                     OR UPPER(B.BARCODE) =
                           UPPER(A.SECONDARYSUPPLYPARENTICODE))
                AND LTRIM(RTRIM(UPPER(ISSECONDARYSUPPLY))) = 'YES'
                AND UPPER(SECONDARYSUPPLYTAXPOLICY) = 'P'
                AND userid = p_userid;

      -- end rev : 019
      -- Populate Salcsmain Table
      c_main CURSOR FOR
            SELECT t1.seq              csno,
                  t1.saledt           csdate,
                  t2.doccode          doccode,
                  -- START REV : 009
                  -- db_fun_document_number_web(null, t2.doccode, t1.ycode, TO_CHAR(t1.saledt), null, p_connect_site, 1, 'MCSEComOrganization') scheme_docno,
                  -- END REV : 009
                  s.slcode            pcode,
                  s.glcode            debtors_glcode,
                  -- START REV : 014
                  -- CONSIGNMENTSALE_GLCODE, CONSIGNMENTSALE_SLCODE,
                  coalesce(coalesce(T1.CONS_GLCODE, CONSIGNMENT_SALES_GLCODE),
                       CONSIGNMENTSALE_GLCODE)
                     consignment_sales_glcode,
                  CASE WHEN T1.CONS_GLCODE IS NULL THEN  CONSIGNMENTSALE_SLCODE  ELSE T1.CONS_SLCODE END
                     consignment_sales_slcode,
                  -- END REV : 014
                  -- START REV : 002
                  -- 1 admou_code,
                  p_connect_ou       admou_code,
                  -- END REV : 002
                  p_connect_site      admsite_code,
                  l.loccode           outloccode,
                  t1.reference_no     refno,
                  t1.remarks          remarks,
                  t1.ycode,
                  clock_timestamp()             time,
                  p_userid            ecode,
                  clock_timestamp()             last_access_time,
                  p_userid            last_access_ecode,
                  0                   adjamt,
                  'C'                 status,
                  o.roundoff_glcode   roundoff_glcode,
                  p_connect_site      admsite_code_owner,
                  'ETL'               channeltype,
                  t1.tradegroup_code  fintradegrp_code,
                  0                   formcode,
                  -- START REV : 014
                  -- c.code                 psite_customer_codE,
                  -- START REV : 026
                  CASE
                     WHEN     t1.B_CUSTOMER_MOBILENO IS NOT NULL
                          AND t1.B_CUSTOMER_FIRSTNAME IS NOT NULL
                          AND t1.B_CUSTOMER_LASTNAME IS NOT NULL
                          AND t1.B_ISDCODE IS NOT NULL
                     THEN
                        (SELECT C.CODE
                           FROM PSITE_CUSTOMER C
                          WHERE C.CODE =
                                   (SELECT MAX(CODE)
                                      FROM PSITE_CUSTOMER C2
                                     WHERE t1.B_CUSTOMER_MOBILENO = c2.mobile))
                     ELSE
                        NULL
                  END
                     psite_customer_code,
                  -- END REV : 026
                  -- END REV : 014
                  t1.grsamt           grsamt,
                  t1.discount,
                  shipchg,
                  gwchg,
                  codchg,
                  t1.taxamt           extaxamt,
                  t1.qty,
                  (  t1.grsamt
                   + t1.taxamt
                   + t1.shipchg
                   + t1.codchg
                   + t1.gwchg
                   - t1.discount)
                     netamt,
                  t1.roundoff,
                  (  t1.grsamt
                   + t1.taxamt
                   - t1.discount
                   + t1.shipchg
                   + t1.codchg
                   + t1.gwchg
                   + t1.roundoff)
                     netpayable,
                  CASE WHEN PRF.SAL_AUTORELEASE = 'Y' THEN 'P' ELSE 'U' END
                     release_status,
                  0                   site_costamt,
                  t1.udfstring01,
                  t1.udfstring02,
                  t1.udfstring03,
                  t1.udfstring04,
                  t1.udfstring05,
                  t1.udfstring06,
                  t1.udfstring07,
                  t1.udfstring08,
                  t1.udfstring09,
                  t1.udfstring10,
                  -- start rev : 018
                  t1.udfnum01,
                  t1.udfnum02,
                  t1.udfnum03,
                  t1.udfnum04,
                  t1.udfnum05,
                  t1.udfdate01,
                  t1.udfdate02,
                  t1.udfdate03,
                  t1.udfdate04,
                  t1.udfdate05                              -- START REV : 005
                              ,
                  -- end rev : 018
                  ST.ADMGSTIN_CODE    ADMGSTIN_CODE,
                  G.GSTIN_NO          OWNER_GSTIN_NO,
                  G.ADMGSTSTATE_CODE  OWNER_GSTIN_STATE_CODE,
                  coalesce(G.ADMGSTSTATE_CODE, S.CP_GSTIN_STATE_CODE)
                     GST_ADD_CESS_RATE_STATE,                     -- REV : 017
                  -- START REV : 014
                  -- C.CP_GSTIN_NO          CP_GSTIN_NO,
                  -- C.CP_GSTIN_STATE_CODE  CP_GSTIN_STATE_CODE,
                  (SELECT C.CP_GSTIN_NO
                     FROM PSITE_CUSTOMER C
                    WHERE C.CODE = (SELECT MAX(CODE)
                                      FROM PSITE_CUSTOMER C2
                                     WHERE t1.B_CUSTOMER_MOBILENO = c2.mobile))
                     CP_GSTIN_NO,
                  (SELECT C.CP_GSTIN_STATE_CODE
                     FROM PSITE_CUSTOMER C
                    WHERE C.CODE = (SELECT MAX(CODE)
                                      FROM PSITE_CUSTOMER C2
                                     WHERE t1.B_CUSTOMER_MOBILENO = c2.mobile))
                     CP_GSTIN_STATE_CODE,
                  -- END REV : 014
                  S.CP_GSTIN_NO       ECOM_GSTIN_NO,
                  S.CP_GSTIN_STATE_CODE ECOM_GSTIN_STATE_CODE  -- END REV : 005
                                                             ,
                  gstappl,
                  T1.B_CUSTOMER_FIRSTNAME,
                  T1.B_CUSTOMER_MIDDLENAME,
                  T1.B_CUSTOMER_LASTNAME,
                  T1.B_CUSTOMER_GENDER,
                  T1.B_CUSTOMER_MOBILENO,
                  T1.B_CUSTOMER_EMAIL,
                  T1.B_CUSTOMER_ADDRESSLINE1,
                  T1.B_CUSTOMER_ADDRESSLINE2,
                  T1.B_CUSTOMER_ADDRESSLINE3,
                  T1.B_CUSTOMER_CITY,
                  T1.B_CUSTOMER_PIN,
                  T1.B_CUSTOMER_STATE,
                  T1.B_CUSTOMER_COUNTRY,
                  T1.B_CUST_GST_ID_NO,
                  T1.B_GST_STATE_CODE,
                  T1.S_CUSTOMER_FIRSTNAME,
                  T1.S_CUSTOMER_MIDDLENAME,
                  T1.S_CUSTOMER_LASTNAME,
                  T1.S_CUSTOMER_GENDER,
                  T1.S_CUSTOMER_MOBILENO,
                  T1.S_CUSTOMER_EMAIL,
                  T1.S_CUSTOMER_ADDRESSLINE1,
                  T1.S_CUSTOMER_ADDRESSLINE2,
                  T1.S_CUSTOMER_ADDRESSLINE3,
                  T1.S_CUSTOMER_CITY,
                  T1.S_CUSTOMER_PIN,
                  T1.S_CUSTOMER_STATE,
                  T1.S_CUSTOMER_COUNTRY,
                  T1.S_CUST_GST_ID_NO,
                  T1.S_GST_STATE_CODE,
                  T1.B_ISDCODE,
                  T1.S_ISDCODE,
                  T1.AWB_NUMBER,
                  T1.S_DATE,
                  T1.DELIVERY_DATE,
                  T1.TPCODE,
                  T1.CODAMT,
                  T1.SCHEME_DOC_FORMAT,
                  T1.SCHEME_DOCNO,
                  T1.B_CUST_GST_REG_DATE,
                  --START REV : 028
                  T1.ISBILLINGSHIPPINGSAME
             --END REV : 028
             FROM 		hrdemp usr, admdocscheme t2,admprof prf, admou o,invloc l,ADMSITE ST LEFT OUTER JOIN admgstin g ON ((st.ADMGSTIN_CODE = g.CODE)),
			 (SELECT saledt,
                          remarks,
                          reference_no,
                          coalesce(roundoff, 0) roundoff,
                          row_number() OVER () AS seq,
                          (SELECT ycode
                             FROM admyear
                            WHERE saledt BETWEEN dtfr AND dtto)
                             ycode,
                          slID,
                          locname,
                          grsamt,
                          discount,
                          taxamt,
                          qty,
                          tradegroup_code,
                          shipchg,
                          codchg,
                          gwchg,
                          udfstring01,
                          udfstring02,
                          udfstring03,
                          udfstring04,
                          udfstring05,
                          udfstring06,
                          udfstring07,
                          udfstring08,
                          udfstring09,
                          udfstring10,
                          udfnum01,
                          udfnum02,
                          udfnum03,
                          udfnum04,
                          udfnum05,
                          udfdate01,
                          udfdate02,
                          udfdate03,
                          udfdate04,
                          udfdate05,
                          -- START REV : 014
                          CONS_GLCODE,
                          CONS_SLCODE,
                          -- END REV : 014
                          -- start rev : 019
                          B_CUSTOMER_FIRSTNAME,
                          B_CUSTOMER_MIDDLENAME,
                          B_CUSTOMER_LASTNAME,
                          B_CUSTOMER_GENDER,
                          B_CUSTOMER_MOBILENO,
                          B_CUSTOMER_EMAIL,
                          B_CUSTOMER_ADDRESSLINE1,
                          B_CUSTOMER_ADDRESSLINE2,
                          B_CUSTOMER_ADDRESSLINE3,
                          B_CUSTOMER_CITY,
                          B_CUSTOMER_PIN,
                          B_CUSTOMER_STATE,
                          B_CUSTOMER_COUNTRY,
                          B_CUST_GST_ID_NO,
                          B_GST_STATE_CODE,
                          S_CUSTOMER_FIRSTNAME,
                          S_CUSTOMER_MIDDLENAME,
                          S_CUSTOMER_LASTNAME,
                          S_CUSTOMER_GENDER,
                          S_CUSTOMER_MOBILENO,
                          S_CUSTOMER_EMAIL,
                          S_CUSTOMER_ADDRESSLINE1,
                          S_CUSTOMER_ADDRESSLINE2,
                          S_CUSTOMER_ADDRESSLINE3,
                          S_CUSTOMER_CITY,
                          S_CUSTOMER_PIN,
                          S_CUSTOMER_STATE,
                          S_CUSTOMER_COUNTRY,
                          S_CUST_GST_ID_NO,
                          S_GST_STATE_CODE,
                          B_ISDCODE,
                          S_ISDCODE,
                          AWB_NUMBER,
                          S_DATE,
                          DELIVERY_DATE,
                          TPCODE,
                          CODAMT,
                          SCHEME_DOC_FORMAT,
                          SCHEME_DOCNO,
                          B_CUST_GST_REG_DATE,
                          --START REV : 028
                          ISBILLINGSHIPPINGSAME
                     --END REV : 028
                     FROM (  SELECT saledt,
                                    remarks,
                                    reference_no,
                                    a.roundoff,
                                    t.code                           tradegroup_code,
                                    CHANNEL_ID                       slID,
                                    stock_point_name                 locname,
                                    SUM(coalesce(item_qty, 0) * coalesce(item_rate, 0))
                                       grsamt,
                                    SUM(coalesce(item_discountamt, 0))  discount,
                                    SUM(coalesce(item_extra_taxamt, 0)) taxamt,
                                    SUM(coalesce(item_qty, 0))          qty,
                                    SUM(coalesce(item_shipment_charges, 0)) shipchg,
                                    SUM(coalesce(item_cod_charges, 0))  codchg,
                                    SUM(coalesce(item_gw_charges, 0))   gwchg,
                                    a.udfstring01,
                                    a.udfstring02,
                                    a.udfstring03,
                                    a.udfstring04,
                                    a.udfstring05,
                                    a.udfstring06,
                                    a.udfstring07,
                                    a.udfstring08,
                                    a.udfstring09,
                                    a.udfstring10,
                                    a.udfnum01,
                                    a.udfnum02,
                                    a.udfnum03,
                                    a.udfnum04,
                                    a.udfnum05,
                                    a.udfdate01,
                                    a.udfdate02,
                                    a.udfdate03,
                                    a.udfdate04,
                                    a.udfdate05,
                                    -- START REV : 014
                                    a.GLCODE
                                       CONS_GLCODE,
                                    a.SLCODE
                                       CONS_SLCODE,
                                    -- END REV : 014
                                    -- START REV : 019
                                    a.B_CUSTOMER_FIRSTNAME,
                                    a.B_CUSTOMER_MIDDLENAME,
                                    a.B_CUSTOMER_LASTNAME,
                                    CASE
                                       WHEN UPPER(a.B_CUSTOMER_GENDER) = 'MALE'
                                       THEN
                                          'M'
                                       WHEN UPPER(a.B_CUSTOMER_GENDER) =
                                               'FEMALE'
                                       THEN
                                          'F'
                                       WHEN UPPER(a.B_CUSTOMER_GENDER) =
                                               'TRANSGENDER'
                                       THEN
                                          'T'
                                       WHEN UPPER(a.B_CUSTOMER_GENDER) =
                                               'UNDISCLOSED'
                                       THEN
                                          'U'
                                    END
                                       B_CUSTOMER_GENDER,
                                    a.B_CUSTOMER_MOBILENO,
                                    a.B_CUSTOMER_EMAIL,
                                    a.B_CUSTOMER_ADDRESSLINE1,
                                    a.B_CUSTOMER_ADDRESSLINE2,
                                    a.B_CUSTOMER_ADDRESSLINE3,
                                    a.B_CUSTOMER_CITY,
                                    a.B_CUSTOMER_PIN,
                                    a.B_CUSTOMER_STATE,
                                    a.B_CUSTOMER_COUNTRY,
                                    a.B_CUST_GST_ID_NO,
                                    ST.CODE
                                       B_GST_STATE_CODE,
                                    a.S_CUSTOMER_FIRSTNAME,
                                    a.S_CUSTOMER_MIDDLENAME,
                                    a.S_CUSTOMER_LASTNAME,
                                    CASE
                                       WHEN UPPER(a.S_CUSTOMER_GENDER) = 'MALE'
                                       THEN
                                          'M'
                                       WHEN UPPER(a.S_CUSTOMER_GENDER) =
                                               'FEMALE'
                                       THEN
                                          'F'
                                       WHEN UPPER(a.S_CUSTOMER_GENDER) =
                                               'TRANSGENDER'
                                       THEN
                                          'T'
                                       WHEN UPPER(a.S_CUSTOMER_GENDER) =
                                               'UNDISCLOSED'
                                       THEN
                                          'U'
                                    END
                                       S_CUSTOMER_GENDER,
                                    a.S_CUSTOMER_MOBILENO,
                                    a.S_CUSTOMER_EMAIL,
                                    a.S_CUSTOMER_ADDRESSLINE1,
                                    a.S_CUSTOMER_ADDRESSLINE2,
                                    a.S_CUSTOMER_ADDRESSLINE3,
                                    a.S_CUSTOMER_CITY,
                                    a.S_CUSTOMER_PIN,
                                    a.S_CUSTOMER_STATE,
                                    a.S_CUSTOMER_COUNTRY,
                                    a.S_CUST_GST_ID_NO,
                                    ST1.CODE
                                       S_GST_STATE_CODE,
                                    BI.CODE
                                       B_ISDCODE,
                                    SI.CODE
                                       S_ISDCODE,
                                    a.AWB_NUMBER,
                                    a.S_DATE,
                                    a.DELIVERY_DATE,
                                    TRP.SLCODE                       TPCODE,
                                    a.POD_AMOUNT                     CODAMT,
                                    UPPER(a.SCHEME_DOC_FORMAT)
                                       SCHEME_DOC_FORMAT,
                                    a.SCHEME_DOCNO,
                                    a.B_CUST_GST_REG_DATE,
                                    -- END REV : 019
                                    -- START REV : 028
                                    CASE
                                       WHEN UPPER(a.ISBILLINGSHIPPINGSAME) =
                                               'YES'
                                       THEN
                                          1
                                       ELSE
                                          0
                                    END
                                       ISBILLINGSHIPPINGSAME
                               -- END REV : 028
                               FROM int$stg_ecomowned a
LEFT OUTER JOIN admisd bi ON (a.B_ISDCODE::text = bi.ISDCODE)
LEFT OUTER JOIN admisd si ON (a.S_ISDCODE::text = si.isdcode)
LEFT OUTER JOIN fintradegrp t ON (UPPER(a.tradegroup_name) = UPPER(t.name))
LEFT OUTER JOIN admgststate st ON (UPPER(a.B_CUST_GST_STATE_NAME) = UPPER(st.NAME))
LEFT OUTER JOIN admgststate st1 ON (UPPER(a.S_CUST_GST_STATE_NAME) = UPPER(st1.NAME))
LEFT OUTER JOIN finsl trp ON (UPPER(a.TRANSPORTER_ID) = UPPER(trp.SLID))						   
WHERE a.userid = p_userid    GROUP BY saledt,
                                    remarks,
                                    reference_no,
                                    a.roundoff,
                                    t.code,
                                    CHANNEL_ID,
                                    stock_point_name,
                                    a.udfstring01,
                                    a.udfstring02,
                                    a.udfstring03,
                                    a.udfstring04,
                                    a.udfstring05,
                                    a.udfstring06,
                                    a.udfstring07,
                                    a.udfstring08,
                                    a.udfstring09,
                                    a.udfstring10,
                                    a.udfnum01,
                                    a.udfnum02,
                                    a.udfnum03,
                                    a.udfnum04,
                                    a.udfnum05,
                                    a.udfdate01,
                                    a.udfdate02,
                                    a.udfdate03,
                                    a.udfdate04,
                                    a.udfdate05,
                                    A.GLCODE,
                                    A.SLCODE,
                                    a.B_CUSTOMER_FIRSTNAME,
                                    a.B_CUSTOMER_MIDDLENAME,
                                    a.B_CUSTOMER_LASTNAME,
                                    CASE
                                       WHEN UPPER(a.B_CUSTOMER_GENDER) =
                                               'MALE'
                                       THEN
                                          'M'
                                       WHEN UPPER(a.B_CUSTOMER_GENDER) =
                                               'FEMALE'
                                       THEN
                                          'F'
                                       WHEN UPPER(a.B_CUSTOMER_GENDER) =
                                               'TRANSGENDER'
                                       THEN
                                          'T'
                                       WHEN UPPER(a.B_CUSTOMER_GENDER) =
                                               'UNDISCLOSED'
                                       THEN
                                          'U'
                                    END,
                                    A.B_CUSTOMER_MOBILENO,
                                    A.B_CUSTOMER_EMAIL,
                                    A.B_CUSTOMER_ADDRESSLINE1,
                                    A.B_CUSTOMER_ADDRESSLINE2,
                                    A.B_CUSTOMER_ADDRESSLINE3,
                                    a.B_CUSTOMER_CITY,
                                    a.B_CUSTOMER_PIN,
                                    a.B_CUSTOMER_STATE,
                                    a.B_CUSTOMER_COUNTRY,
                                    a.B_CUST_GST_ID_NO,
                                    ST.CODE,
                                    a.S_CUSTOMER_FIRSTNAME,
                                    a.S_CUSTOMER_MIDDLENAME,
                                    a.S_CUSTOMER_LASTNAME,
                                    CASE
                                       WHEN UPPER(a.S_CUSTOMER_GENDER) =
                                               'MALE'
                                       THEN
                                          'M'
                                       WHEN UPPER(a.S_CUSTOMER_GENDER) =
                                               'FEMALE'
                                       THEN
                                          'F'
                                       WHEN UPPER(a.S_CUSTOMER_GENDER) =
                                               'TRANSGENDER'
                                       THEN
                                          'T'
                                       WHEN UPPER(a.S_CUSTOMER_GENDER) =
                                               'UNDISCLOSED'
                                       THEN
                                          'U'
                                    END,
                                    A.S_CUSTOMER_MOBILENO,
                                    A.S_CUSTOMER_EMAIL,
                                    A.S_CUSTOMER_ADDRESSLINE1,
                                    A.S_CUSTOMER_ADDRESSLINE2,
                                    A.S_CUSTOMER_ADDRESSLINE3,
                                    a.S_CUSTOMER_CITY,
                                    a.S_CUSTOMER_PIN,
                                    a.S_CUSTOMER_STATE,
                                    a.S_CUSTOMER_COUNTRY,
                                    a.S_CUST_GST_ID_NO,
                                    ST1.code,
                                    bi.code,
                                    si.code,
                                    A.S_ISDCODE,
                                    A.AWB_NUMBER,
                                    A.S_DATE,
                                    A.DELIVERY_DATE,
                                    TRP.SLCODE,
                                    a.POD_AMOUNT,
                                    a.SCHEME_DOC_FORMAT,
                                    a.SCHEME_DOCNO,
                                    a.B_CUST_GST_REG_DATE,
                                    --START REV : 028
                                    UPPER(a.ISBILLINGSHIPPINGSAME)
                           --END REV : 028
                           ORDER BY a.saledt) alias60) t1
			   LEFT OUTER JOIN finsl s ON (UPPER(t1.slID) = UPPER(s.slID))
			   
			   --LEFT OUTER JOIN admgstin g ON ((st.ADMGSTIN_CODE = g.CODE))
--LEFT OUTER JOIN finsl s ON (UPPER(t1.slID) = UPPER(s.slID))
                       WHERE UPPER(t1.SCHEME_DOC_FORMAT) = UPPER(t2.docname) 
					  AND O.CODE = p_connect_ou  
					  AND UPPER(t1.locname) = UPPER(l.locname) 
					  AND ST.CODE = p_connect_site  
					  AND USR.PROFCODE = PRF.PROFCODE 
					  AND USR.ECODE = p_userid 
ORDER BY t1.saledt;

      -- Calculate tax in Salcsdet table
      ctax CURSOR(
         p_cscode           bigint,
         p_date             timestamp,
         p_sitecode         bigint,
         p_tradegrp_code    bigint,
         P_ADMGSTIN_CODE    bigint)
      FOR
         SELECT t1.code,
                t1.netamt,
                t1.icode,
                CASE
                   WHEN t2.vatcode IS NULL THEN t3.vatcode
                   ELSE t2.vatcode
                END
                   vatcode,
                CASE
                   WHEN t2.vatcode IS NULL THEN t3.description
                   ELSE t2.description
                END
                   description,
                CASE WHEN t2.vatcode IS NULL THEN t3.rate ELSE t2.rate END
                   rate,
                CASE WHEN t2.vatcode IS NULL THEN t3.vatid ELSE t2.vatid END
                   vatid,
                CASE
                   WHEN t2.vatcode IS NULL THEN coalesce(t3.rangeappl, 0)
                   ELSE coalesce(t2.rangeappl, 0)
                END
                   rangeappl,
                CASE
                   WHEN t2.vatcode IS NULL THEN t3.rangebasis
                   ELSE t2.rangebasis
                END
                   rangebasis,
                t1.mrp                              rsp,
                round((ABS(t1.netamt / t1.qty))::numeric, 3) netprice
           FROM (SELECT m.admsite_code,
                        i.taxcode,
                        d.code,
                        d.netamt,
                        i.icode,
                        d.qty,
                        d.mrp,
                        INVHSNSACMAIN_CODE
                   FROM salcsmain m, salcsdet d, invitem i
                  WHERE     m.cscode = d.cscode
                        AND d.icode = i.icode
                        AND m.admsite_code = p_sitecode
                        AND date_trunc('day', csdate) = p_date
                        AND m.cscode = p_cscode) t1
LEFT OUTER JOIN (SELECT site_code,
                        vatcode,
                        description,
                        rate,
                        vatid,
                        rangeappl,
                        basis                 rangebasis,
                        date_trunc('day', effectivedate) effdt
                   FROM (SELECT s.code           site_code,
                                d.admcmptax_code admcmptax_code,
                                d.taxdetcode     vatid,
                                d.taxcode        vatcode,
                                m.taxname        NAME,
                                d.taxdesc        description,
                                d.dtfr           effectivedate,
                                d.rate           rate,
                                0                isextinct,
                                CASE
                                   WHEN coalesce(d.range_appl, 'N') = 'N' THEN 0
                                   WHEN coalesce(d.range_appl, 'N') = 'Y' THEN 1
                                END
                                   rangeappl,
                                CASE
                                   WHEN d.tax_basis = 'M' THEN 'R'
                                   ELSE 'N'
                                END
                                   basis
                           FROM fintaxmain m, fintaxdet d, admsite s
LEFT OUTER JOIN admgstin n ON (s.admgstin_code = n.code)
WHERE d.taxcode = m.taxcode AND d.admcmptax_code = s.psite_admcmptax_code and s.admou_code = p_connect_ou    -- REV : 002
  AND coalesce(d.formcode, 0) = 0 and d.fintradegrp_code = p_tradegrp_code -- start rev : 033
                                --and s.admgstin_code = n.code
                                --and nvl (n.export_with_payment_of_gst, 'y') = 'y'
  -- end rev : 033
 ) v1
                  WHERE (v1.vatcode, v1.effectivedate) IN (  SELECT v2.vatcode,
                                         MAX(v2.effectivedate) AS expr1
                                    FROM (SELECT s.code  site_code,
                                                 0       isextinct,
                                                 d.taxcode vatcode,
                                                 d.dtfr  effectivedate
                                            FROM fintaxdet d,
                                                 fintaxmain m,
                                                 admsite  s
                                           WHERE     d.taxcode = m.taxcode
                                                 AND d.admcmptax_code =
                                                        s.psite_admcmptax_code
                                                 and admou_code = p_connect_ou  -- REV : 002
                                                 AND coalesce(d.formcode, 0) = 0
                                                 AND d.fintradegrp_code =
                                                        p_tradegrp_code) v2
                                   WHERE     date_trunc('day', effectivedate) <= p_date
                                         AND v2.isextinct = 0
                                         AND v2.site_code = p_sitecode
                                GROUP BY v2.vatcode)
                        AND v1.isextinct = 0
                        AND v1.site_code = p_sitecode) t2 ON (t1.taxcode = t2.vatcode AND t1.admsite_code = t2.site_code)
LEFT OUTER JOIN (SELECT s.code           site_code,
                        d.admcmptax_code admcmptax_code,
                        d.taxdetcode     vatid,
                        d.taxcode        vatcode,
                        m.taxname        NAME,
                        d.taxdesc        description,
                        d.dtfr           effectivedate,
                        d.rate           rate,
                        0                isextinct,
                        CASE
                           WHEN coalesce(d.range_appl, 'N') = 'N' THEN 0
                           WHEN coalesce(d.range_appl, 'N') = 'Y' THEN 1
                        END
                           rangeappl,
                        CASE WHEN d.tax_basis = 'M' THEN 'R' ELSE 'N' END
                           rangebasis
                   FROM fintaxdet d, fintaxmain m, admsite s
                  WHERE     d.taxcode = m.taxcode
                        AND d.admcmptax_code = s.psite_admcmptax_code
                        and admou_code = p_connect_ou              -- REV : 002
                        AND coalesce(d.formcode, 0) = 0
                        AND d.fintradegrp_code =
                               (SELECT code
                                  FROM fintradegrp
                                 WHERE UPPER(NAME) = 'LOCAL')
                        AND d.taxcode = 0
                        AND s.code = p_sitecode) t3 ON (t1.admsite_code = t3.site_code)
WHERE    -- START REV : 004
   (   (T1.ICODE NOT IN
                            (SELECT ICODE
                               FROM INVHSNSACDET D, INVITEM IT
                              WHERE     D.INVHSNSACMAIN_CODE =
                                           IT.INVHSNSACMAIN_CODE
                                    AND D.INVHSNSACMAIN_CODE =
                                           T1.INVHSNSACMAIN_CODE
                                    AND D.CODE =
                                           (SELECT DISTINCT D1.CODE
                                              FROM INVHSNSACDET D1,
                                                   INVITEM      IT1
                                             WHERE     D1.INVHSNSACMAIN_CODE =
                                                          IT1.INVHSNSACMAIN_CODE
                                                   AND D1.INVHSNSACMAIN_CODE =
                                                          T1.INVHSNSACMAIN_CODE
                                                   AND EFFECTIVE_DATE =
                                                          (SELECT MAX(
                                                                     EFFECTIVE_DATE)
                                                             FROM INVHSNSACDET
                                                                  D3,
                                                                  INVITEM IT3
                                                            WHERE     D3.INVHSNSACMAIN_CODE =
                                                                         IT3.INVHSNSACMAIN_CODE
                                                                  AND D3.INVHSNSACMAIN_CODE =
                                                                         T1.INVHSNSACMAIN_CODE
                                                                  AND D3.EFFECTIVE_DATE <=
                                                                         p_date))))
                     OR P_ADMGSTIN_CODE IS NULL                    -- REV : 005
                                               );

  C_TAX_P RECORD;

BEGIN
      SELECT cmpinit INTO STRICT v_site_initial FROM admcmp;

      --  Populate New Customers
      INSERT INTO psite_customer(admsite_code,
                                  fname,
                                  mname,
                                  lname,
                                  address1,
                                  address2,
                                  address3,
                                  pin,
                                  mobile,
                                  email,
                                  gender,
                                  createdon,
                                  createdby,
                                  lastmodifiedon,
                                  lastmodifiedby,
                                  code,
                                  district,
                                  city,
                                  state,
                                  country,
                                  receivemessage,
                                  prefcommunicationmode,
                                  createdbyid,
                                  lastmodifiedbyid,
                                  lastmodify_admsite_code   -- START REV : 012
                                                         ,
                                  cp_gstin_no,
                                  cp_gstin_date,
                                  cp_gstin_state_code         -- END REV : 012
                                                     -- START REV : 015
                                  ,
                                  admisd_code                 -- End REV : 015
                                             -- start rev : 019
                                  ,
                                  cityid                      -- end rev : 019
                                        )
         SELECT p_connect_site,
                B_CUSTOMER_FIRSTNAME,
                B_CUSTOMER_MIDDLENAME,
                B_CUSTOMER_LASTNAME,
                B_CUSTOMER_ADDRESSLINE1,
                B_CUSTOMER_ADDRESSLINE2,
                B_CUSTOMER_ADDRESSLINE3,
                B_CUSTOMER_PIN,
                B_CUSTOMER_MOBILENO,
                B_CUSTOMER_EMAIL,
                CASE
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'FEMALE' THEN 'F'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'MALE' THEN 'M'
                   WHEN UPPER(a.B_CUSTOMER_GENDER) = 'TRANSGENDER' THEN 'T'
                   ELSE 'U'
                END,
                clock_timestamp(),
                e.fname,
                clock_timestamp(),
                e.fname,
                v_site_initial || '-' || nextval('psite_customer_seq')::text,
                B_CUSTOMER_DISTRICT,
                B_CUSTOMER_CITY,
                B_customer_state,
                B_CUSTOMER_COUNTRY,
                1,
                'S',
                p_userid,
                p_userid,
                p_connect_site --SIDD - CHANGES DONE AS SAME CUSTOMER WAS GETTING CREATED MULTIPLE TIMES
                                                            -- start rev : 012
                ,
                a.B_CUST_GST_ID_NO,
                a.B_CUST_GST_REG_DATE,
                CASE
                   WHEN a.B_CUST_GST_ID_NO IS NOT NULL
                   THEN
                      SUBSTR(a.B_CUST_GST_ID_NO, 1, 2)
                   WHEN a.B_CUST_GST_STATE_NAME IS NOT NULL
                   THEN
                      gs.code
                   ELSE
                      NULL
                END                                           -- end rev : 012
                   -- start rev : 015
                ,
                i.code                                        -- end rev : 015
                      -- start rev : 019
                ,
                city.code
           -- end rev : 019
           FROM hrdemp e, (SELECT DISTINCT userid,
                                 B_CUSTOMER_FIRSTNAME,
                                 B_CUSTOMER_MIDDLENAME,
                                 B_CUSTOMER_LASTNAME,
                                 B_CUSTOMER_ADDRESSLINE1,
                                 B_CUSTOMER_ADDRESSLINE2,
                                 B_CUSTOMER_ADDRESSLINE3,
                                 B_CUSTOMER_PIN,
                                 B_CUSTOMER_MOBILENO,
                                 B_CUSTOMER_EMAIL,
                                 B_CUSTOMER_GENDER,
                                 B_CUSTOMER_DISTRICT,
                                 B_CUSTOMER_CITY,
                                 B_customer_state,
                                 B_CUSTOMER_COUNTRY         -- START REV : 012
                                                   ,
                                 B_CUST_GST_ID_NO,
                                 B_CUST_GST_REG_DATE,
                                 B_CUST_GST_STATE_NAME        -- END REV : 012
                                                      -- START REV : 015
                                 ,
                                 B_ISDCODE
                   -- END REV : 015
                   FROM int$stg_ecomowned
                  WHERE USERID = p_userid) a
LEFT OUTER JOIN psite_customer b ON (a.B_CUSTOMER_MOBILENO = b.mobile)
LEFT OUTER JOIN admisd i ON (a.B_ISDCODE::text = i.ISDCODE)
LEFT OUTER JOIN admgststate gs ON (UPPER(coalesce(a.B_CUST_GST_STATE_NAME, '@@')) = UPPER(gs.name))
LEFT OUTER JOIN admcity city ON (UPPER(a.B_CUSTOMER_CITY) = UPPER(city.CTNAME))
WHERE b.mobile IS NULL --START REV : 026
  AND a.B_CUSTOMER_MOBILENO IS NOT NULL AND a.B_CUSTOMER_FIRSTNAME IS NOT NULL AND a.B_CUSTOMER_LASTNAME IS NOT NULL --START REV : 026
                -- start rev : 012
  -- end rev : 012
  AND a.userid = e.ecode -- start rev : 014
  -- end rev : 014
                -- start rev : 019
  -- end rev :  019
  AND userid = p_userid;

      -- START REV : 019
      -- END REV : 019
      -- Updating Existing Customers
      FOR r IN c
      LOOP
         UPDATE psite_customer
            SET fname = coalesce(r.B_CUSTOMER_FIRSTNAME, fname),
                mname = coalesce(r.B_CUSTOMER_MIDDLENAME, mname),
                lname = coalesce(r.B_CUSTOMER_LASTNAME, lname),
                address1 = coalesce(r.B_CUSTOMER_ADDRESSLINE1, address1),
                address2 = coalesce(r.B_CUSTOMER_ADDRESSLINE2, address2),
                address3 = coalesce(r.B_CUSTOMER_ADDRESSLINE3, address3),
                pin = coalesce(r.B_CUSTOMER_PIN, pin),
                email = coalesce(r.B_CUSTOMER_EMAIL, email),
                gender = coalesce(r.gender, gender),
                lastmodifiedon = coalesce(clock_timestamp(), lastmodifiedon),
                lastmodifiedby = coalesce(r.fname, lastmodifiedby),
                district = coalesce(r.B_CUSTOMER_DISTRICT, district),
                city = coalesce(r.B_CUSTOMER_CITY, city),
                cityid = coalesce(r.cityid, cityid),
                state = coalesce(r.B_customer_state, state),
                country = coalesce(r.B_CUSTOMER_COUNTRY, country),
                lastmodifiedbyid = p_userid,
                lastmodify_admsite_code = p_connect_site,
                cp_gstin_no =
                   coalesce(R.B_CUST_GST_ID_NO, cp_gstin_no),
                cp_gstin_date =
                   coalesce(R.B_CUST_GST_REG_DATE, cp_gstin_date),
                cp_gstin_state_code =
                   coalesce(R.B_CUST_GST_STATE_NAME, cp_gstin_state_code),
                admisd_code = coalesce(r.code, admisd_code)
          WHERE     mobile = r.B_CUSTOMER_MOBILENO
                AND r.B_CUSTOMER_MOBILENO IS NOT NULL;
      END LOOP;

      -- start rev: 019
      FOR r IN c_EMAIL
      LOOP
         UPDATE psite_customer
            SET fname = coalesce(r.B_CUSTOMER_FIRSTNAME, fname),
                mname = coalesce(r.B_CUSTOMER_MIDDLENAME, mname),
                lname = coalesce(r.B_CUSTOMER_LASTNAME, lname),
                address1 = coalesce(r.B_CUSTOMER_ADDRESSLINE1, address1),
                address2 = coalesce(r.B_CUSTOMER_ADDRESSLINE2, address2),
                address3 = coalesce(r.B_CUSTOMER_ADDRESSLINE3, address3),
                pin = coalesce(r.B_CUSTOMER_PIN, pin),
                email = coalesce(r.B_CUSTOMER_EMAIL, email),
                gender = coalesce(r.gender, gender),
                lastmodifiedon = coalesce(clock_timestamp(), lastmodifiedon),
                lastmodifiedby = coalesce(r.fname, lastmodifiedby),
                district = coalesce(r.B_CUSTOMER_DISTRICT, district),
                city = coalesce(r.B_CUSTOMER_CITY, city),
                cityid = coalesce(r.cityid, cityid),
                state = coalesce(r.B_customer_state, state),
                country = coalesce(r.B_CUSTOMER_COUNTRY, country),
                lastmodifiedbyid = p_userid,
                lastmodify_admsite_code = p_connect_site,
                cp_gstin_no =
                   coalesce(R.B_CUST_GST_ID_NO, cp_gstin_no),
                cp_gstin_date =
                   coalesce(R.B_CUST_GST_REG_DATE, cp_gstin_date),
                cp_gstin_state_code =
                   coalesce(R.B_CUST_GST_STATE_NAME, cp_gstin_state_code),
                admisd_code = coalesce(r.code, admisd_code)
          WHERE EMAIL = r.B_CUSTOMER_EMAIL;
      END LOOP;

      -- end rev: 019
      -- To insert data into SALCSMAIN table
      vmaxno := NULL;

      --SIDD - NVL ADDITION
      SELECT coalesce(MAX(csno), 0) INTO STRICT vmaxno FROM salcsmain;

      FOR j IN C_ICODE
      LOOP
         UPDATE int$stg_ecomowned
            SET SECONDARYSUPPLYPARENTICODE = j.icode
          WHERE SECONDARYSUPPLYPARENTICODE = j.barcode;
      END LOOP;

      FOR r IN c_main
      LOOP
         -- START REV : 009
         V_MAIN_CSCODE := NULL;

         SELECT nextval('erp01') INTO STRICT V_MAIN_CSCODE;

         V_SCHEME_DOCNO :=
            db_fun_document_number_web(NULL,
                                        R.doccode,
                                        R.ycode,
                                        TO_CHAR(R.csdate,'dd-mm-yyyy'),
                                        NULL,
                                        p_connect_site,
                                        -- START REV : 007
                                        -- 1,
                                        P_CONNECT_OU,
                                        -- END REV : 007
                                        -- START REV : 016
                                        --'MCSStoreOwned'
                                        'MCSEComOrganization' -- END REV : 016
                                                             );

         -- END REV : 009
         -- Populate Salcsmain Table
         -- start rev : 019
         IF V_SCHEME_DOCNO IS NULL
         THEN
            V_SCHEME_DOCNO := r.scheme_docno;
         END IF;

         INSERT INTO salcsmain(cscode,
                                csno,
                                csdate,
                                doccode,
                                scheme_docno,
                                pcode,
                                debtors_glcode,
                                consignment_sales_glcode,
                                consignment_sales_slcode,
                                admou_code,
                                admsite_code,
                                outloccode,
                                refno,
                                remarks,
                                ycode,
                                time,
                                ecode,
                                last_access_time,
                                last_access_ecode,
                                adjamt,
                                status,
                                roundoff_glcode,
                                admsite_code_owner,
                                channeltype,
                                fintradegrp_code,
                                formcode,
                                psite_customer_code,
                                grsamt,
                                discount,
                                shipchg,
                                gwchg,
                                codchg,
                                extaxamt,
                                qty,
                                netamt,
                                roundoff,
                                netpayable,
                                release_status,
                                site_costamt,
                                dataversion,
                                udfstring01,
                                udfstring02,
                                udfstring03,
                                udfstring04,
                                udfstring05,
                                udfstring06,
                                udfstring07,
                                udfstring08,
                                udfstring09,
                                udfstring10,
                                udfnum01,
                                udfnum02,
                                udfnum03,
                                udfnum04,
                                udfnum05,
                                udfdate01,
                                udfdate02,
                                udfdate03,
                                udfdate04,
                                udfdate05,
                                OWNER_GSTIN_NO,
                                OWNER_GSTIN_STATE_CODE,
                                CP_GSTIN_NO,
                                CP_GSTIN_STATE_CODE,
                                ECOM_GSTIN_NO,
                                ECOM_GSTIN_STATE_CODE,
                                gstappl,
                                -- start rev : 019
                                BILL_FNAME,
                                BILL_MNAME,
                                BILL_LNAME,
                                BILL_GENDER,
                                BILL_ADMISD_CODE,
                                BILL_MOBILE,
                                BILL_EMAIL,
                                BILL_ADDRESSLINE1,
                                BILL_ADDRESSLINE2,
                                BILL_ADDRESSLINE3,
                                BILL_CITY,
                                BILL_STATE,
                                BILL_COUNTRY,
                                BILL_PIN,
                                BILL_GSTIN_NO,
                                BILL_GST_STATE_CODE,
                                SHIP_FNAME,
                                SHIP_MNAME,
                                SHIP_LNAME,
                                SHIP_GENDER,
                                SHIP_ADMISD_CODE,
                                SHIP_MOBILE,
                                SHIP_EMAIL,
                                SHIP_ADDRESSLINE1,
                                SHIP_ADDRESSLINE2,
                                SHIP_ADDRESSLINE3,
                                SHIP_CITY,
                                SHIP_STATE,
                                SHIP_COUNTRY,
                                SHIP_PIN,
                                SHIP_GSTIN_NO,
                                SHIP_GST_STATE_CODE,
                                TPCODE,
                                CODAMT,
                                -- AWBNO,
                                DELIVERYDATE,
                                SHIPDATE,
                                BILL_GST_DATE,
                                AWBNO,
                                --START REV : 028
                                ISBILLINGSHIPPINGSAME,
                                -- END REV : 019
                                --END REV : 028
                                --START REV : 029
                                RETURN_LOCCODE,
                                DAMAGED_LOCCODE                --END REV : 029
                                               )
              VALUES (                                      -- START REV : 009
                                                                   --r.cscode,
                     V_MAIN_CSCODE,
                     -- END REV : 009
                     vmaxno + r.csno,
                     r.csdate,
                     r.doccode,
                     -- START REV : 009
                     --r.scheme_docno,
                     V_scheme_docno,
                     -- END REV : 009
                     r.pcode,
                     r.debtors_glcode,
                     r.consignment_sales_glcode,
                     r.consignment_sales_slcode,
                     r.admou_code,
                     r.admsite_code,
                     r.outloccode,
                     r.refno,
                     r.remarks,
                     r.ycode,
                     r.time,
                     r.ecode,
                     r.last_access_time,
                     r.last_access_ecode,
                     r.adjamt,
                     r.status,
                     r.roundoff_glcode,
                     r.admsite_code_owner,
                     r.channeltype,
                     r.fintradegrp_code,
                     r.formcode,
                     r.psite_customer_code,
                     r.grsamt,
                     r.discount,
                     r.shipchg,
                     r.gwchg,
                     r.codchg,
                     r.extaxamt,
                     r.qty,
                     r.netamt,
                     r.roundoff,
                     r.netpayable,
                     r.release_status,
                     r.site_costamt,
                     nextval('psite_dataversion'),
                     r.udfstring01,
                     r.udfstring02,
                     r.udfstring03,
                     r.udfstring04,
                     r.udfstring05,
                     r.udfstring06,
                     r.udfstring07,
                     r.udfstring08,
                     r.udfstring09,
                     r.udfstring10,
                     r.udfnum01,
                     r.udfnum02,
                     r.udfnum03,
                     r.udfnum04,
                     r.udfnum05,
                     r.udfdate01,
                     r.udfdate02,
                     r.udfdate03,
                     r.udfdate04,
                     r.udfdate05,
                     -- START REV : 005
                     R.OWNER_GSTIN_NO,
                     R.OWNER_GSTIN_STATE_CODE,
                     -- start rev : 034
                     --R.CP_GSTIN_NO,
                     --R.CP_GSTIN_STATE_CODE,
                     R.B_CUST_GST_ID_NO,
                     R.B_GST_STATE_CODE,
                     -- end rev : 034
                     R.ECOM_GSTIN_NO,
                     R.ECOM_GSTIN_STATE_CODE,
                     -- END REV : 005
                     R.gstappl,
                     -- START REV : 019
                     R.B_CUSTOMER_FIRSTNAME,
                     R.B_CUSTOMER_MIDDLENAME,
                     R.B_CUSTOMER_LASTNAME,
                     R.B_CUSTOMER_GENDER,
                     R.B_ISDCODE,
                     R.B_CUSTOMER_MOBILENO,
                     R.B_CUSTOMER_EMAIL,
                     R.B_CUSTOMER_ADDRESSLINE1,
                     R.B_CUSTOMER_ADDRESSLINE2,
                     R.B_CUSTOMER_ADDRESSLINE3,
                     R.B_CUSTOMER_CITY,
                     R.B_CUSTOMER_STATE,
                     R.B_CUSTOMER_COUNTRY,
                     R.B_CUSTOMER_PIN,
                     R.B_CUST_GST_ID_NO,
                     R.B_GST_STATE_CODE,
                     R.S_CUSTOMER_FIRSTNAME,
                     R.S_CUSTOMER_MIDDLENAME,
                     R.S_CUSTOMER_LASTNAME,
                     R.S_CUSTOMER_GENDER,
                     R.S_ISDCODE,
                     R.S_CUSTOMER_MOBILENO,
                     R.S_CUSTOMER_EMAIL,
                     R.S_CUSTOMER_ADDRESSLINE1,
                     R.S_CUSTOMER_ADDRESSLINE2,
                     R.S_CUSTOMER_ADDRESSLINE3,
                     R.S_CUSTOMER_CITY,
                     R.S_CUSTOMER_STATE,
                     R.S_CUSTOMER_COUNTRY,
                     R.S_CUSTOMER_PIN,
                     R.S_CUST_GST_ID_NO,
                     R.S_GST_STATE_CODE,
                     -- substr(to_char(R.AWB_NUMBER),1,45),
                     R.TPCODE,
                     R.CODAMT,
                     R.DELIVERY_DATE,
                     R.S_DATE,
                     R.B_CUST_GST_REG_DATE,
                     R.AWB_NUMBER,
                     --START REV : 028
                     R.ISBILLINGSHIPPINGSAME,
                     --END REV : 019
                     --END REV : 028
                     --START REV : 029
                     r.outloccode,
                     r.outloccode                              --END REV : 029
                                 );

         ----COMMIT;
         INSERT INTO salcsdet(code,
                               cscode,
                               icode,
                               qty,
                               mrp,
                               rate,
                               grsamt,
                               discount,
                               remarks,
                               extaxamt,
                               netamt,
                               shipchg,
                               gwchg,
                               codchg,
                               site_costrate,
                               costrate,
                               site_costamt,
                               GLCODE,
                               SLCODE,
                               GL_CC_APPL,
                               ISDYNAMICTAX,
                               --loccode,
                               taxregime,
                               isdamaged,
                               -- END REV : 007
                               --START REV : 030
                               issecondarysupply,
                               secondarysupplyparenticode,
                               secondarysupplytaxpolicy,
                               --END REV : 030
                               -- START REV : 036
                               invbatch_serial_code
                               -- END REV : 036
							   -- start rev : 038
                               ,hsn_sac_code
                               -- end rev : 038
                                                       )
            SELECT                                           --start rev : 008
                                                             /*+ INDEX (I I_INVITEM_UPPER_ICODE_BARCODE)
                                                                 INDEX (A I_INT$STG_ECOMOWNED_USERID)
                                                             */                                                              -- end rev : 008
                  nextval('salcsdet_code'),
                  -- START REV : 009
                  --r.cscode,
                  V_MAIN_CSCODE,
                  -- END REV : 009
                  i.icode,
                  coalesce(item_qty, 0),
                  coalesce(item_rsp, 0),
                  coalesce(item_rate, 0),
                  coalesce(item_qty, 0) * coalesce(item_rate, 0),
                  coalesce(item_discountamt, 0),
                  item_remarks,
                  coalesce(item_extra_taxamt, 0),
                    (coalesce(item_qty, 0) * coalesce(item_rate, 0))
                  + coalesce(item_extra_taxamt, 0)
                  - coalesce(item_discountamt, 0)
                  + coalesce(item_shipment_charges, 0)
                  + coalesce(item_cod_charges, 0)
                  + coalesce(item_gw_charges, 0),
                  coalesce(item_shipment_charges, 0),
                  coalesce(item_gw_charges, 0),
                  coalesce(item_cod_charges, 0),
                  0,
                  0,
                  0                                         -- START REV : 007
                   ,
                  I.GLCODE GLCODE,
                  I.SLCODE SLCODE,
                  GL.COSTAPP GL_CC_APPL,
                  -- END REV : 007
                  -- START REV : 019
                  --START REV : 030
                  /*
                CASE WHEN UPPER (a.IS_DYNAMIC_TAX) = 'YES' THEN 1 ELSE 0 END
                   IS_DYNAMIC_TAX,
                */
                  --END REV : 030
                  NULL,
                  CASE WHEN i.INVHSNSACMAIN_CODE IS NOT NULL THEN 'G' ELSE 'V' END
                     taxregime,
                  --START REV : 029
                  0,
                  --END REV : 029
                  -- END REV : 019
                  --START REV : 030
                  CASE
                     WHEN LTRIM(RTRIM(UPPER(a.issecondarysupply))) = 'YES'
                     THEN
                        1
                     ELSE
                        0
                  END
                     issecondarysupply,
                  secondarysupplyparenticode,
                  secondarysupplytaxpolicy,
                  --END REV : 030
                   --START REV : 036
                  case when i.item_management_mode in ('B','S') then  b.code
                  else null
                  end invbatch_serial_code,
                   --END REV : 036
             --END REV : 036
                -- start rev : 038
                (
                    select  coalesce(sac.govt_identifier, sac.hsn_sac_code) 
                    from    invhsnsacmain sac
                    where   sac.code = i.invhsnsacmain_code
                )   hsn_sac_code
                -- end rev : 038
             FROM int$stg_ecomowned  a
LEFT OUTER JOIN (SELECT m.csdate, 
				   		  s.slid,
                          coalesce(l.locname, '@@')      locname,
                          coalesce(m.refno, 'NA')        REFNO,
                          coalesce(m.BILL_mobile, '0')     mobile,
                          coalesce(m.BILL_EMAIL, 'NA')   email,
                          t.name                     tradegroup_name,
                          coalesce(m.remarks, '@@')      Remarks,
                          coalesce(m.roundoff, 0)        roundoff,
                          coalesce(m.udfstring01, '@@')  udfstring01,
                          coalesce(m.udfstring02, '@@')  udfstring02,
                          coalesce(m.udfstring03, '@@')  udfstring03,
                          coalesce(m.udfstring04, '@@')  udfstring04,
                          coalesce(m.udfstring05, '@@')  udfstring05,
                          coalesce(m.udfstring06, '@@')  udfstring06,
                          coalesce(m.udfstring07, '@@')  udfstring07,
                          coalesce(m.udfstring08, '@@')  udfstring08,
                          coalesce(m.udfstring09, '@@')  udfstring09,
                          coalesce(m.udfstring10, '@@')  udfstring10,
                          coalesce(m.udfnum01, 0)        udfnum01,
                          coalesce(m.udfnum02, 0)        udfnum02,
                          coalesce(m.udfnum03, 0)        udfnum03,
                          coalesce(m.udfnum04, 0)        udfnum04,
                          coalesce(m.udfnum05, 0)        udfnum05,
                          coalesce(m.udfdate01, m.csdate) udfdate01,
                          coalesce(m.udfdate02, m.csdate) udfdate02,
                          coalesce(m.udfdate03, m.csdate) udfdate03,
                          coalesce(m.udfdate04, m.csdate) udfdate04,
                          coalesce(m.udfdate05, m.csdate) udfdate05, -- START REV : 014
						  m.consignment_sales_glcode,
                          m.consignment_sales_Slcode,
                          m.SCHEME_DOCNO,
                          coalesce(tr.slid, '0')           transporter_id,
                          coalesce(m.codamt, '0')          pod_amount,
                          coalesce(m.BILL_ADMISD_CODE, 0) BILL_ADMISD_CODE,
                          coalesce(m.SHIP_MOBILE, '0')     ship_mobile,
                          coalesce(m.SHIP_email, 'NA')   SHIP_EMAIL,
                          coalesce(m.SHIP_ADMISD_CODE, 0) SHIP_ADMISD_CODE,
                          coalesce(m.AWBNO, '@@')        AWBNO,
                          coalesce(m.SHIPDATE, m.csdate) SHIPDATE,
                          CASE
                             WHEN m.isbillingshippingsame = 1 THEN 'YES'
                             ELSE 'NO'
                          END
                             ISBILLINGSHIPPINGSAME -- END REV : 014
							 FROM salcsmain m LEFT OUTER JOIN invloc l ON (m.outloccode = l.loccode)
							 LEFT OUTER JOIN finsl tr ON (m.tpcode = tr.slcode)			   
							 INNER JOIN finsl s ON m.pcode = s.slcode  
							 INNER JOIN fintradegrp t ON m.fintradegrp_code = t.code
							WHERE cscode = V_MAIN_CSCODE ) t1 ON a.saledt = t1.csdate
INNER JOIN invitem i ON ((UPPER(a.item_barcode) = UPPER(i.icode)) OR (UPPER(a.item_barcode) = UPPER(i.barcode)))
LEFT OUTER JOIN fingl gl ON (I.GLCODE = GL.GLCODE)
LEFT OUTER JOIN invbatch_serial b ON (a.batch_serial_no is null or UPPER(a.batch_serial_no) = UPPER(b.batch_serial_no))
WHERE (t1.refno = coalesce(a.reference_no, 'NA')) 
AND (T1.REMARKS = coalesce(a.REMARKS, '@@'))
AND a.userid = p_userid
AND UPPER(a.CHANNEL_ID) = UPPER(t1.slid) 
AND UPPER(coalesce(a.stock_point_name, '@@')) = UPPER(t1.locname)
AND coalesce(a.B_CUSTOMER_MOBILENO, t1.mobile) = t1.mobile 
AND UPPER(a.tradegroup_name) = UPPER(t1.tradegroup_name)
AND (( A.GLCODE IS NOT NULL AND ( coalesce(A.GLCODE, 0) = coalesce(T1.consignment_sales_glcode, 0)
                                	  AND coalesce(A.SLCODE, 0) =
                                      coalesce(T1.consignment_sales_Slcode, 0))) OR A.GLCODE IS NULL)
  AND coalesce(a.udfstring01, '@@') = T1.udfstring01 
  AND coalesce(a.udfstring02, '@@') = T1.udfstring02 
  AND coalesce(a.udfstring03, '@@') = T1.udfstring03 
  AND coalesce(a.udfstring04, '@@') = T1.udfstring04 
  AND coalesce(a.udfstring05, '@@') = T1.udfstring05 
  AND coalesce(a.udfstring06, '@@') = T1.udfstring06 
  AND coalesce(a.udfstring07, '@@') = T1.udfstring07 
  AND coalesce(a.udfstring08, '@@') = T1.udfstring08 
  AND coalesce(a.udfstring09, '@@') = T1.udfstring09 
  AND coalesce(a.udfstring10, '@@') = T1.udfstring10 
  AND coalesce(a.udfnum01, 0) = T1.udfnum01 
  AND coalesce(a.udfnum02, 0) = T1.udfnum02 
  AND coalesce(a.udfnum03, 0) = T1.udfnum03 
  AND coalesce(a.udfnum04, 0) = T1.udfnum04 
  AND coalesce(a.udfnum05, 0) = T1.udfnum05 
  AND coalesce(a.udfdate01, a.saledt) = T1.udfdate01 
  AND coalesce(a.udfdate02, a.saledt) = T1.udfdate02 
  AND coalesce(a.udfdate03, a.saledt) = T1.udfdate03 
  AND coalesce(a.udfdate04, a.saledt) = T1.udfdate04 
  AND coalesce(a.udfdate05, a.saledt) = T1.udfdate05   
  AND ( a.SCHEME_DOCNO IS NULL OR a.SCHEME_DOCNO = t1.SCHEME_DOCNO)
  AND coalesce(a.S_CUSTOMER_MOBILENO, t1.SHIP_MOBILE) = t1.SHIP_MOBILE  
  AND coalesce(a.AWB_NUMBER, '@@') = t1.AWBNO 
  AND coalesce(a.S_DATE, a.saledt) = t1.SHIPDATE 
  AND coalesce(LTRIM(RTRIM(UPPER(a.ISBILLINGSHIPPINGSAME))),'NO') = t1.isbillingshippingsame
  AND ((UPPER(a.item_barcode) = UPPER(i.icode)) OR (UPPER(a.item_barcode) = UPPER(i.barcode)))
  AND (i.icode = b.icode or b.icode is null);
  
  
  --AND (a.batch_serial_no is null or UPPER(a.batch_serial_no) = UPPER(b.batch_serial_no));
GET DIAGNOSTICS ora2pg_rowcount = ROW_COUNT;

         v_row_processed := coalesce(v_row_processed, 0) +  ora2pg_rowcount;

         SELECT SUM(coalesce(netamt, 0))
           INTO STRICT V_NETAMT
           FROM SALCSDET
          WHERE CSCODE = V_MAIN_CSCODE;

         SELECT coalesce(CODAMT, 0)
           INTO STRICT V_CODAMT
           FROM SALCSMAIN
          WHERE CSCODE = V_MAIN_CSCODE;

         IF V_CODAMT > ABS(V_NETAMT)
         THEN
            --ROLLBACK;
            RAISE EXCEPTION '%', 'POD_AMOUNT: POD Amount can not be more than the Invoice Amount.' USING ERRCODE = '45111';
         END IF;

         -- end rev : 019
         BEGIN
            SELECT SUM(coalesce(netamt, 0))
              INTO STRICT V_MAIN_GL_AMT
              FROM SALCSDET
             WHERE CSCODE = V_MAIN_CSCODE AND GLCODE IS NULL;

            UPDATE SALCSMAIN
               SET MAIN_GL_AMT = V_MAIN_GL_AMT
             WHERE CSCODE = V_MAIN_CSCODE;
         EXCEPTION
            WHEN no_data_found
            THEN
               V_MAIN_GL_AMT := NULL;
         END;

         -- end rev : 011
         -- Populate Tax Details in Salcsdet Table
         FOR d IN ctax(                                    -- START REV : 009
                                                                   --r.cscode,
                  V_MAIN_CSCODE,
                  -- END REV : 009
                  r.csdate,
                  r.admsite_code,
                  r.fintradegrp_code,
                  R.ADMGSTIN_CODE)
         LOOP
            IF d.rangeappl = 0
            THEN
               UPDATE salcsdet
                  SET taxdetcode = d.vatid,
                      taxdescription = d.description,
                      taxpercent = d.rate,
                      TAXREGIME = 'V',
                      taxamt =
                         ROUND ( (d.netamt / (100 + d.rate)) * d.rate, 2),
                      taxableamt =
                         ROUND ( (d.netamt / (100 + d.rate)) * 100, 2)
                WHERE code = d.code;
            ELSE
               BEGIN
                  SELECT range_desc, rate
                    INTO STRICT v_slab_range_desc, v_slab_range_rate
                    FROM fintax_range
                   WHERE     taxdetcode = d.vatid
                         AND (   (    d.rangebasis = 'N'
                                  AND d.netprice BETWEEN rangefrom
                                                     AND coalesce(rangeto,
                                                              99999999))
                              OR (    d.rangebasis = 'R'
                                  AND d.rsp BETWEEN rangefrom
                                                AND coalesce(rangeto, 99999999)));

                  UPDATE salcsdet
                     SET taxdetcode = d.vatid,
                         taxdescription = v_slab_range_desc,
                         TAXREGIME = 'V',
                         taxpercent = v_slab_range_rate,
                         taxamt =
                            ROUND (
                                 (d.netamt / (100 + v_slab_range_rate))
                               * v_slab_range_rate,
                               2),
                         taxableamt =
                            ROUND (
                               (d.netamt / (100 + v_slab_range_rate)) * 100,
                               2)
                   WHERE code = d.code;
               EXCEPTION
                  WHEN no_data_found
                  THEN
                     UPDATE salcsdet
                        SET taxdetcode = d.vatid,
                            taxdescription = 'Slab not defined',
                            taxpercent = 0,
                            taxamt = 0,
                            taxableamt = d.netamt
                      WHERE code = d.code;
               END;
            END IF;
         -- START REV : 0013
         -- END REV : 013
         END LOOP;

         -- FOR GST APPL ITEM
         -- start rev : 004
         DECLARE
            C_GST CURSOR(
               p_Cscode           bigint,
               p_date             timestamp,
               p_sitecode         bigint,
               P_ADMGSTIN_CODE    bigint)
            FOR
               SELECT t1.code,
                      t1.netamt,
                      t1.icode,
                      t1.qty,
                      t1.mrp                              rsp,
                      round((ABS(t1.netamt / t1.qty))::numeric, 3) netprice,
                      t1.INVHSNSACMAIN_CODE,
                      T1.HSN_SAC_CODE
                 -- ,DECODE(
                 FROM (SELECT m.admsite_code,
                              i.INVHSNSACMAIN_CODE,
                              d.code,
                              d.netamt,
                              i.icode,
                              d.qty,
                              d.mrp,
                              coalesce(sac.GOVT_IDENTIFIER, sac.HSN_SAC_CODE)
                                 HSN_SAC_CODE
                         --,(SELECT code FROM fintradegrp WHERE UPPER (NAME) = 'LOCAL') LOCAL_TRADE
                         FROM salcsmain     m,
                              salcsdet      d,
                              invitem       i,

                              invhsnsacmain sac,
                              admsite       a,
                              admgstin      n
                        
                        WHERE     m.Cscode = d.Cscode
                              AND d.icode = i.icode
                              AND I.INVHSNSACMAIN_CODE = sac.CODE
                              AND m.admsite_code = p_sitecode
                              AND date_trunc('day', Csdate) = p_date
                              AND m.Cscode = p_Cscode
                              -- start rev : 019
                              AND d.TAXREGIME = 'G'
                              AND m.ADMSITE_CODE_OWNER = a.CODE
                              AND a.ADMGSTIN_CODE = n.CODE
                              AND (   coalesce(i.NONINVENTORY, 'N') = 'N'
                                   OR (    d.ISSECONDARYSUPPLY = 1
                                       AND d.SECONDARYSUPPLYTAXPOLICY = 'I'))
                              AND (   (    m.FINTRADEGRP_CODE = 3
                                       AND coalesce(n.EXPORT_WITH_PAYMENT_OF_GST,
                                                'Y') = 'Y')
                                   OR (m.FINTRADEGRP_CODE <> 3)) -- end rev : 019
                                                                ) t1
                WHERE (    (T1.ICODE IN
                               (SELECT ICODE
                                  FROM INVHSNSACDET D, INVITEM IT
                                 WHERE     D.INVHSNSACMAIN_CODE =
                                              IT.INVHSNSACMAIN_CODE
                                       AND D.INVHSNSACMAIN_CODE =
                                              T1.INVHSNSACMAIN_CODE
                                       AND D.CODE =
                                              (SELECT DISTINCT D1.CODE
                                                 FROM INVHSNSACDET D1,
                                                      INVITEM      IT1
                                                WHERE     D1.INVHSNSACMAIN_CODE =
                                                             IT1.INVHSNSACMAIN_CODE
                                                      AND D1.INVHSNSACMAIN_CODE =
                                                             T1.INVHSNSACMAIN_CODE
                                                      AND EFFECTIVE_DATE =
                                                             (SELECT MAX(
                                                                        EFFECTIVE_DATE)
                                                                FROM INVHSNSACDET
                                                                     D3,
                                                                     INVITEM
                                                                     IT3
                                                               WHERE     D3.INVHSNSACMAIN_CODE =
                                                                            IT3.INVHSNSACMAIN_CODE
                                                                     AND D3.INVHSNSACMAIN_CODE =
                                                                            T1.INVHSNSACMAIN_CODE
                                                                     AND D3.EFFECTIVE_DATE <=
                                                                            p_date))))
                       AND P_ADMGSTIN_CODE IS NOT NULL             -- REV : 005
                                                      );

            -- Populate GST Details in Salssdet Table
            V_RATE              double precision := 0;
            /*V_SGST_RATE          NUMBER(20,2) := 0;
            V_CGST_RATE          NUMBER(20,2) := 0;
            V_IGST_RATE          NUMBER(20,2) := 0;
            V_CESS_RATE          NUMBER(20,2) := 0;*/
            V_CGST_RATE         INVGSTRATE.CGST_RATE%TYPE := 0;
            V_SGST_RATE         INVGSTRATE.SGST_RATE%TYPE := 0;
            V_IGST_RATE         INVGSTRATE.IGST_RATE%TYPE := 0;
            V_CESS_RATE         INVGSTRATE.CESS_RATE%TYPE := 0;
            V_HSNSACCODE        INVHSNSACMAIN.CODE%TYPE;
            V_SLAB_APPL         INVHSNSACDET.SLAB_APPL%TYPE;
            V_SLAB_BASIS        INVHSNSACDET.SLAB_BASIS%TYPE;
            V_DETCODE           INVHSNSACDET.CODE%TYPE;
            V_RANGEFROM         bigint;
            V_FLAG              char(1);
            DUP_RATE            double precision := 0;
            V_APPAMT            double precision := 0;
            V_INVGSTRATE_CODE   INVGSTRATE.CODE%TYPE;
            V_TAX_NAME          varchar(100) := NULL;
            V_ADDCESS_RATE      INVGSTADDCESSRATE.AddCessRate%TYPE;
         BEGIN
            FOR dG IN C_GST(                               -- START REV : 009
                                                                   --r.cscode,
                      V_MAIN_CSCODE,
                      -- END REV : 009
                      r.csdate,
                      r.admsite_code,
                      R.ADMGSTIN_CODE)
            LOOP
               IF DG.INVHSNSACMAIN_CODE IS NOT NULL
               THEN
                  BEGIN
                     SELECT SLAB_APPL,
                            SLAB_BASIS,
                            CODE,
                            INVGSTRATE_CODE
                       INTO STRICT V_SLAB_APPL,
                            V_SLAB_BASIS,
                            V_DETCODE,
                            V_INVGSTRATE_CODE
                       FROM INVHSNSACDET D
                      WHERE     D.INVHSNSACMAIN_CODE = DG.INVHSNSACMAIN_CODE
                            AND D.CODE =
                                   (SELECT D1.CODE
                                      FROM INVHSNSACDET D1
                                     WHERE     D1.INVHSNSACMAIN_CODE =
                                                  DG.INVHSNSACMAIN_CODE
                                           AND EFFECTIVE_DATE =
                                                  (SELECT MAX(
                                                             EFFECTIVE_DATE)
                                                     FROM INVHSNSACDET D3
                                                    WHERE     D3.INVHSNSACMAIN_CODE =
                                                                 DG.INVHSNSACMAIN_CODE
                                                          AND D3.EFFECTIVE_DATE <=
                                                                 R.CSDATE));
                  EXCEPTION
                     WHEN no_data_found
                     THEN
                        NULL;
                     WHEN OTHERS
                     THEN
                        V_RATE := 0;
                  END;

                  IF coalesce(V_SLAB_APPL, 'N') = 'Y'
                  THEN
                     IF V_SLAB_BASIS = 'R'
                     THEN
                        V_APPAMT := round((DG.RSP)::numeric, 2);
                     ELSE
                        V_APPAMT := round((DG.NETPRICE)::numeric, 2);
                     END IF;

                     BEGIN

                        SELECT INVGSTRATE_CODE
                          INTO STRICT V_INVGSTRATE_CODE
                          FROM V_GSTSLAB_CALC D
                         WHERE     D.INVHSNSACDET_CODE = V_DETCODE
                               AND D.INVHSNSACSLAB_CODE =
                                      (SELECT D1.INVHSNSACSLAB_CODE
                                         FROM V_GSTSLAB_CALC D1
                                        WHERE     D1.INVHSNSACDET_CODE =
                                                     V_DETCODE
                                              AND EFF_AMOUNT_FROM =
                                                     (SELECT MAX(
                                                                EFF_AMOUNT_FROM)
                                                        FROM V_GSTSLAB_CALC
                                                             D3
                                                       WHERE     D3.INVHSNSACDET_CODE =
                                                                    V_DETCODE
                                                             AND D3.EFF_AMOUNT_FROM <=
                                                                    coalesce(
                                                                       V_APPAMT,
                                                                       0)));
                     -- END REV : 007
                     EXCEPTION
                        WHEN no_data_found
                        THEN
                           V_INVGSTRATE_CODE := NULL;
                        WHEN OTHERS
                        THEN
                           V_INVGSTRATE_CODE := 0;
                     END;
                  END IF;

                  BEGIN
                     SELECT CGST_RATE,
                            IGST_RATE,
                            SGST_RATE,
                              -- SART REV : 017
                              --CESS_RATE,
                              coalesce(CESS_RATE, 0)
                            + coalesce(
                                 GET_GSTADD_CESSRATE(
                                    V_INVGSTRATE_CODE,
                                    R.CSDATE,
                                    R.GST_ADD_CESS_RATE_STATE,
                                    R.fintradegrp_code,
                                    R.CP_GSTIN_NO),
                                 0),
                            -- END REV : 017
                            TAX_NAME
                       INTO STRICT V_CGST_RATE,
                            V_IGST_RATE,
                            V_SGST_RATE,
                            V_CESS_RATE,
                            V_TAX_NAME
                       FROM INVGSTRATE R
                      WHERE CODE = V_INVGSTRATE_CODE;
                  EXCEPTION
                     WHEN no_data_found
                     THEN
                        V_RATE := 0;
                  END;

                  UPDATE salcsdet
                     SET HSN_SAC_CODE = DG.HSN_SAC_CODE,
                         taxdescription = V_TAX_NAME,
                         CGSTRATE =
                            CASE WHEN r.fintradegrp_code=1 THEN  V_CGST_RATE  ELSE 0 END ,
                         SGSTRATE =
                            CASE WHEN r.fintradegrp_code=1 THEN  V_SGST_RATE  ELSE 0 END ,
                         IGSTRATE =
                            CASE WHEN r.fintradegrp_code=1 THEN  0  ELSE V_IGST_RATE END ,
                         CESSRATE = V_CESS_RATE,
                         taxpercent =
                            round((
                                 CASE WHEN r.fintradegrp_code=1 THEN  V_CGST_RATE  ELSE 0 END
                               + CASE WHEN r.fintradegrp_code=1 THEN  V_SGST_RATE  ELSE 0 END 
                               + CASE WHEN r.fintradegrp_code=1 THEN  0  ELSE V_IGST_RATE END 
                               + coalesce(V_CESS_RATE, 0))::numeric,
                               2)
                   WHERE code = dG.code;

                  UPDATE salcsdet
                     SET CGSTAMT =
                            CASE WHEN                                r.fintradegrp_code=1 THEN  ROUND (                                     (netamt / (100 + taxpercent)) * CGSTRATE,                                     2)  ELSE 0 END ,
                         SGSTAMT =
                            CASE WHEN                                r.fintradegrp_code=1 THEN  ROUND (                                     (netamt / (100 + taxpercent)) * SGSTRATE,                                     2)  ELSE 0 END ,
                         IGSTAMT =
                            CASE WHEN                                r.fintradegrp_code=1 THEN  0  ELSE ROUND (                                  (netamt / (100 + taxpercent)) * IGSTRATE,                                  2) END ,
                         CESSAMT =
                            ROUND (
                               (dG.netamt / (100 + taxpercent)) * CESSRATE,
                               2)
                   WHERE code = dG.code;

                  UPDATE salCsdet
                     SET taxamt =
                            round((
                                 coalesce(CGSTAMT, 0)
                               + coalesce(SGSTAMT, 0)
                               + coalesce(IGSTAMT, 0)
                               + coalesce(CESSAMT, 0))::numeric,
                               2),
                         TAXREGIME = 'G',
                         taxableamt =
                            round((
                                 coalesce(NETAMT, 0)
                               - round((
                                      coalesce(CGSTAMT, 0)
                                    + coalesce(SGSTAMT, 0)
                                    + coalesce(IGSTAMT, 0)
                                    + coalesce(CESSAMT, 0))::numeric,
                                    2))::numeric,
                               2)
                   WHERE code = dG.code;
               END IF;
            END LOOP;
         END;

         -- start rev : 019
         BEGIN
            SELECT DISTINCT coalesce(TAXREGIME, 'V')
              INTO STRICT v_taxregime
              FROM salcsdet
             WHERE cscode = V_MAIN_CSCODE;
         EXCEPTION
            WHEN too_many_rows
            THEN
               --ROLLBACK;
               RAISE EXCEPTION '%', 'Multi tax regime is not allowed in a single document. Kindly create two separate documents.' USING ERRCODE = '45111';
         END;

         -- start rev : 031
         /*
         select  export_with_payment_of_gst
         into    v_export_with_payment
         from    admgstin
         where   code in
                 (
                     select  admgstin_code
                     from    admsite
                     where   code = p_connect_site
                 );
         */
         BEGIN
            SELECT export_with_payment_of_gst
              INTO STRICT v_export_with_payment
              FROM admgstin
             WHERE code IN (SELECT admgstin_code
                              FROM admsite
                             WHERE code = p_connect_site);
         EXCEPTION
            WHEN no_data_found
            THEN
               NULL;
         END;

         -- end rev : 031
         -- start rev : 035
         BEGIN
            SELECT t1.fintradegrp_code
              INTO STRICT v_cur_fintradegrp_code
              FROM salcsmain t1
             WHERE t1.cscode = v_main_cscode;
         EXCEPTION
            WHEN no_data_found
            THEN
               v_cur_fintradegrp_code := NULL;
         END;

         IF     coalesce(v_export_with_payment, 'N') = 'N'
            AND v_cur_fintradegrp_code = 3
         THEN
            UPDATE salcsdet t2
               SET taxableamt = netamt, taxamt = 0
             WHERE t2.cscode = v_main_cscode;
         END IF;

         -- end rev : 035
         SELECT gstappl
           INTO STRICT v_gstappl
           FROM admdocscheme
          WHERE doccode = r.doccode;

         SELECT coalesce(manual, 'N')
           INTO STRICT v_manual
           FROM admdocscheme
          WHERE doccode = r.doccode;

         SELECT COUNT(1)
           INTO STRICT v_postive_count
           FROM salcsdet
          WHERE cscode = V_MAIN_CSCODE AND coalesce(qty, 0) > 0;

         SELECT COUNT(1)
           INTO STRICT v_negative_count
           FROM salcsdet
          WHERE cscode = V_MAIN_CSCODE AND coalesce(qty, 0) < 0;

         IF     v_gstappl = 'N'
            AND r.scheme_docno IS NOT NULL
            AND v_taxregime = 'G'
         THEN
            IF coalesce(v_negative_count, 0) > 0 AND coalesce(v_postive_count, 0) = 0
            THEN
               UPDATE SALCSMAIN
                  SET GSTAPPL = 'C'
                WHERE CSCODE = V_MAIN_CSCODE;
            ELSE
               UPDATE SALCSMAIN
                  SET GSTAPPL = 'Y'
                WHERE CSCODE = V_MAIN_CSCODE;
            END IF;
         END IF;

         IF v_taxregime = 'G' AND r.fintradegrp_code IN (1, 2)
         THEN
            IF v_manual <> 'Y' AND v_gstappl <> 'Y'
            THEN
               IF coalesce(v_postive_count, 0) > 0
               THEN
                  --ROLLBACK;
                  RAISE EXCEPTION '%', 'Only ''GST Invoice'' and Manual type document schemes are allowed when there are only sales or mix items.' USING ERRCODE = '45111';
               END IF;
            END IF;
         END IF;

         IF v_taxregime = 'V' AND v_gstappl IN ('Y', 'C')
         THEN
            --ROLLBACK;
            RAISE EXCEPTION '%', 'Only Other Documents and Manual type document schemes are allowed when Tax Regime is VAT' USING ERRCODE = '45111';
         END IF;

         IF     v_taxregime = 'G'
            AND v_manual <> 'Y'
            AND (   (coalesce(v_postive_count, 0) = 0 AND v_gstappl <> 'C')
                 OR (coalesce(v_postive_count, 0) > 0 AND v_gstappl = 'C'))
         THEN
            --ROLLBACK;
            RAISE EXCEPTION '%', 'GST Credit Note can only be used in Sales return cases.' USING ERRCODE = '45111';
         END IF;

         IF v_taxregime = 'V' AND v_gstappl <> 'N'
         THEN
            --ROLLBACK;
            RAISE EXCEPTION '%', 'GST Credit Note Scheme can only be used when GST is applicable.' USING ERRCODE = '45111';
         END IF;

         /*  if v_taxregime = 'G' and v_gstappl ='N' and r.scheme_docno is null  then
          rollback;
            raise_application_error(-20111,'GST Scheme is mandatory when item is GST applicable.');
          end if;*/
         IF r.OWNER_GSTIN_NO IS NOT NULL AND                   --r.cp_GSTIN_NO
                                            r.B_CUST_GST_ID_NO IS NOT NULL
         THEN
            IF coalesce(v_postive_count, 0) > 0 AND coalesce(v_negative_count, 0) > 0
            THEN
               --ROLLBACK;
               RAISE EXCEPTION '%', 'For B2B both Sale and return transaction is not allowed in a single document under GST.' USING ERRCODE = '45111';
            END IF;
         END IF;

         SELECT COUNT(1)
           INTO STRICT v_postive_count
           FROM salcsdet
          WHERE cscode = V_MAIN_CSCODE AND coalesce(qty, 0) > 0;

         SELECT COUNT(1)
           INTO STRICT v_negative_count
           FROM salcsdet
          WHERE cscode = V_MAIN_CSCODE AND coalesce(qty, 0) < 0;

         IF v_taxregime = 'G' AND r.fintradegrp_code = 3
         THEN
            IF coalesce(v_postive_count, 0) > 0 AND coalesce(v_negative_count, 0) > 0
            THEN
              -- ROLLBACK;
               RAISE EXCEPTION '%', 'Both Sale and Return transaction is not allowed in Export under GST.' USING ERRCODE = '45111';
            END IF;
         END IF;

         IF     v_taxregime = 'G'
            AND r.fintradegrp_code = 3
            AND coalesce(v_negative_count, 0) = 0
            AND v_EXPORT_WITH_PAYMENT = 'Y'
         THEN
            IF v_manual <> 'Y' AND v_gstappl <> 'Y'
            THEN
               --ROLLBACK;
               RAISE EXCEPTION '%', 'In Only ''GST Invoice'' and  Manual type document schemes are allowed when there are only sales items for Export under GST.' USING ERRCODE = '45111';
            END IF;
         END IF;

         IF     v_taxregime = 'G'
            AND v_EXPORT_WITH_PAYMENT <> 'N'
            AND v_gstappl = 'N'
            AND r.scheme_docno IS NULL
         THEN
            --ROLLBACK;
            RAISE EXCEPTION '%', 'Other Doc scheme is not allowed for GST transaction except when Export is made without payment of GST.' USING ERRCODE = '45111';
         END IF;

         v_postive_count := NULL;
         v_negative_count := NULL;

         SELECT COUNT(1)
           INTO STRICT v_postive_count
           FROM salcsdet
          WHERE cscode = V_MAIN_CSCODE;

         SELECT COUNT(issecondarysupply)
           INTO STRICT v_negative_count
           FROM salcsdet
          WHERE cscode = V_MAIN_CSCODE AND issecondarysupply = 1;

         IF coalesce(v_postive_count, 0) = coalesce(v_negative_count, 0)
         THEN
            --ROLLBACK;
            RAISE EXCEPTION '%', 'Invoice with only Secondary Supply Item is not allowed.' USING ERRCODE = '45111';
         END IF;

         -- end rev : 019
         -- END REV : 004
         -- END OF GST APPL ITEM
         -- START REV : 019
         SELECT COUNT(1)
           INTO STRICT V_CNT_MAX
           FROM SALCSDET
          WHERE                                    --NVL (ISDYNAMICTAX, 0) = 1
                                                             --START REV : 030
                    coalesce(ISSECONDARYSUPPLY, 0) = 1
                AND coalesce(SECONDARYSUPPLYTAXPOLICY, 'I') = 'M'
                --END REV : 030
                AND CSCODE = V_MAIN_CSCODE;

         IF coalesce(V_CNT_MAX, 0) > 0
         THEN
            SELECT CODE
              INTO STRICT V_SALCSDETCODE
              FROM SALCSDET
             WHERE     TAXPERCENT =
                          (SELECT MAX(TAXPERCENT)
                             FROM SALCSDET
                            WHERE CSCODE = V_MAIN_CSCODE     --START REV : 030
                                                        --AND ISDYNAMICTAX = 0
                                   AND coalesce(ISSECONDARYSUPPLY, 0) = 0)
                   --END REV : 030
                   AND CSCODE = V_MAIN_CSCODE
                   --START REV : 030
                   --AND ISDYNAMICTAX = 0
                   AND coalesce(ISSECONDARYSUPPLY, 0) = 0
                   --END REV : 030
  LIMIT 1;

            SELECT TAXPERCENT,
                   IGSTRATE,
                   CGSTRATE,
                   SGSTRATE,
                   CESSRATE,
                   TAXDESCRIPTION,
                   HSN_SAC_CODE
              INTO STRICT V_TAXPERCENT,
                   V_IGSTRATE,
                   V_CGSTRATE,
                   V_SGSTRATE,
                   V_CESSRATE,
                   V_TAXDESCRIPTION,
                   V_HSNSACCODE
              FROM SALCSDET
             WHERE CODE = V_SALCSDETCODE;

            UPDATE SALCSDET
               SET TAXPERCENT = V_TAXPERCENT,
                   IGSTRATE = V_IGSTRATE,
                   CGSTRATE = V_CGSTRATE,
                   SGSTRATE = V_SGSTRATE,
                   CESSRATE = V_CESSRATE,
                   TAXDESCRIPTION = V_TAXDESCRIPTION,
                   HSN_SAC_CODE = V_HSNSACCODE
             WHERE     CSCODE = V_MAIN_CSCODE
                   --START REV : 030
                   --AND ISDYNAMICTAX = 0
                   AND coalesce(ISSECONDARYSUPPLY, 0) = 1
                   AND coalesce(SECONDARYSUPPLYTAXPOLICY, 'I') = 'M';

            --END REV : 030
            UPDATE salcsdet
               SET CGSTAMT =
                      ROUND ( (netamt / (100 + taxpercent)) * CGSTRATE, 2),
                   SGSTAMT =
                      ROUND ( (netamt / (100 + taxpercent)) * SGSTRATE, 2),
                   IGSTAMT =
                      ROUND ( (netamt / (100 + taxpercent)) * IGSTRATE, 2),
                   CESSAMT =
                      ROUND ( (netamt / (100 + taxpercent)) * CESSRATE, 2)
             WHERE     CSCODE = V_MAIN_CSCODE
                   --START REV : 030
                   --AND ISDYNAMICTAX = 0
                   AND coalesce(ISSECONDARYSUPPLY, 0) = 1
                   AND coalesce(SECONDARYSUPPLYTAXPOLICY, 'I') = 'M';

            --END REV : 030
            UPDATE salcsdet
               SET taxamt =
                      round((
                           coalesce(CGSTAMT, 0)
                         + coalesce(SGSTAMT, 0)
                         + coalesce(IGSTAMT, 0)
                         + coalesce(CESSAMT, 0))::numeric,
                         2),
                   TAXREGIME = 'G',
                   taxableamt =
                      round((
                           coalesce(NETAMT, 0)
                         - round((
                                coalesce(CGSTAMT, 0)
                              + coalesce(SGSTAMT, 0)
                              + coalesce(IGSTAMT, 0)
                              + coalesce(CESSAMT, 0))::numeric,
                              2))::numeric,
                         2)
             WHERE     CSCODE = V_MAIN_CSCODE
                   --START REV : 030
                   --AND ISDYNAMICTAX = 0
                   AND coalesce(ISSECONDARYSUPPLY, 0) = 1
                   AND coalesce(SECONDARYSUPPLYTAXPOLICY, 'I') = 'M';
         --END REV : 030
         END IF;

         V_SALCSDETCODE := NULL;

         --START REV : 030
         SELECT COUNT(1)
           INTO STRICT V_CNT_PRI
           FROM SALCSDET
          WHERE     coalesce(ISSECONDARYSUPPLY, 0) = 1
                AND coalesce(SECONDARYSUPPLYTAXPOLICY, 'I') = 'P'
                AND CSCODE = V_MAIN_CSCODE;

         IF coalesce(V_CNT_PRI, 0) > 0
         THEN
            FOR C_TAX_P
               IN (SELECT CODE, SECONDARYSUPPLYPARENTICODE
                     FROM SALCSDET
                    WHERE     CSCODE = V_MAIN_CSCODE
                          AND coalesce(ISSECONDARYSUPPLY, 0) = 1
                          AND coalesce(SECONDARYSUPPLYTAXPOLICY, 'I') = 'P')
            LOOP
               SELECT CODE
                 INTO STRICT V_SALCSDETCODE
                 FROM SALCSDET
                WHERE     TAXPERCENT =
                             (SELECT MAX(TAXPERCENT)
                                FROM SALCSDET
                               WHERE     ICODE =
                                            C_TAX_P.SECONDARYSUPPLYPARENTICODE
                                     AND CSCODE = V_MAIN_CSCODE)
                      AND CSCODE = V_MAIN_CSCODE
                      AND coalesce(ISSECONDARYSUPPLY, 0) = 0  LIMIT 1;

               SELECT TAXPERCENT,
                      IGSTRATE,
                      CGSTRATE,
                      SGSTRATE,
                      CESSRATE,
                      TAXDESCRIPTION,
                      HSN_SAC_CODE
                 INTO STRICT V_TAXPERCENT,
                      V_IGSTRATE,
                      V_CGSTRATE,
                      V_SGSTRATE,
                      V_CESSRATE,
                      V_TAXDESCRIPTION,
                      V_HSNSACCODE
                 FROM SALCSDET
                WHERE CODE = V_SALCSDETCODE;

               UPDATE SALCSDET
                  SET TAXPERCENT = V_TAXPERCENT,
                      IGSTRATE = V_IGSTRATE,
                      CGSTRATE = V_CGSTRATE,
                      SGSTRATE = V_SGSTRATE,
                      CESSRATE = V_CESSRATE,
                      TAXDESCRIPTION = V_TAXDESCRIPTION,
                      HSN_SAC_CODE = V_HSNSACCODE
                WHERE CSCODE = V_MAIN_CSCODE AND CODE = C_TAX_P.CODE;

               UPDATE salcsdet
                  SET CGSTAMT =
                         ROUND ( (netamt / (100 + taxpercent)) * CGSTRATE, 2),
                      SGSTAMT =
                         ROUND ( (netamt / (100 + taxpercent)) * SGSTRATE, 2),
                      IGSTAMT =
                         ROUND ( (netamt / (100 + taxpercent)) * IGSTRATE, 2),
                      CESSAMT =
                         ROUND ( (netamt / (100 + taxpercent)) * CESSRATE, 2)
                WHERE CSCODE = V_MAIN_CSCODE AND CODE = C_TAX_P.CODE;

               UPDATE salcsdet
                  SET taxamt =
                         round((
                              coalesce(CGSTAMT, 0)
                            + coalesce(SGSTAMT, 0)
                            + coalesce(IGSTAMT, 0)
                            + coalesce(CESSAMT, 0))::numeric,
                            2),
                      TAXREGIME = 'G',
                      taxableamt =
                         round((
                              coalesce(NETAMT, 0)
                            - round((
                                   coalesce(CGSTAMT, 0)
                                 + coalesce(SGSTAMT, 0)
                                 + coalesce(IGSTAMT, 0)
                                 + coalesce(CESSAMT, 0))::numeric,
                                 2))::numeric,
                            2)
                WHERE CSCODE = V_MAIN_CSCODE AND CODE = C_TAX_P.CODE;
            END LOOP;
         END IF;

         --END REV : 030
         -- END REV : 019
         UPDATE SALCSMAIN
            SET STATUS = 'C'
          -- START REV : 009
          --WHERE   cscode = r.cscode;
          WHERE CSCODE = V_MAIN_CSCODE;

         -- END REV : 009
         -- START REV : 019
         IF v_manual = 'Y'
         THEN
            SELECT APPL_INV_NUM_FOR_GST
              INTO STRICT v_appl_inv_num
              FROM finsl
             WHERE slcode = r.pcode;

            IF v_appl_inv_num = 'Y'
            THEN
               IF     coalesce(v_negative_count, 0) > 0
                  AND coalesce(v_postive_count, 0) = 0
               THEN
                  SELECT doccode
                    INTO STRICT v_doccode
                    FROM ADMDOCSCHEME
                   WHERE docname = 'GST Credit Note (Retail Sale)';

                  v_scheme_doc :=
                     db_fun_document_number_web(NULL,
                                                 v_doccode,
                                                 R.ycode,
                                                 TO_CHAR(R.csdate,'DD-MM-YYYY'),
                                                 NULL,
                                                 p_connect_site,
                                                 -- START REV : 007
                                                 -- 1,
                                                 P_CONNECT_OU,
                                                 -- END REV : 007
                                                 -- START REV : 016
                                                 --'MCSStoreOwned'
                                                 'MCSEComOrganization' -- END REV : 016
                                                                      );

                  UPDATE SALCSMAIN
                     SET GST_DOC_NO = v_scheme_doc
                   WHERE CSCODE = V_MAIN_CSCODE;
               ELSE
                  SELECT doccode
                    INTO STRICT v_doccode
                    FROM ADMDOCSCHEME
                   WHERE docname = 'GST Tax Invoice (Retail Sale)';

                  v_scheme_doc :=
                     db_fun_document_number_web(NULL,
                                                 v_doccode,
                                                 R.ycode,
                                                 TO_CHAR(R.csdate,'DD-MM-YYYY'),
                                                 NULL,
                                                 p_connect_site,
                                                 -- START REV : 007
                                                 -- 1,
                                                 P_CONNECT_OU,
                                                 -- END REV : 007
                                                 -- START REV : 016
                                                 --'MCSStoreOwned'
                                                 'MCSEComOrganization' -- END REV : 016
                                                                      );

                  UPDATE SALCSMAIN
                     SET GST_DOC_NO = v_scheme_doc
                   WHERE CSCODE = V_MAIN_CSCODE;
               END IF;
            ELSE
               UPDATE SALCSMAIN
                  SET GST_DOC_NO = SCHEME_DOCNO
                WHERE CSCODE = V_MAIN_CSCODE;
            END IF;
         ELSE
            UPDATE SALCSMAIN
               SET GST_DOC_NO = SCHEME_DOCNO
             WHERE CSCODE = V_MAIN_CSCODE;
         END IF;
      -- END REV : 019
      END LOOP;

      -- log to be added in History table
      SELECT nextval('int$error_log_code') INTO STRICT vsession;

      vdetailtbl :=
            -- start rev : 001
            --'CREATE TABLE ecomowned_'
            'CREATE TABLE ginarchive.ecomowned_'
         -- end rev : 001
         || vsession
         || ' AS
                            SELECT Party_Name, SALE_DATE, REFERENCE_NO
                            FROM
                            (
                            SELECT  b.slname Party_Name, DATE_TRUNC(''day'',a.saledt) SALE_DATE, a.reference_no REFERENCE_NO, COUNT(1)
                                    ,a.tradegroup_name
                                    ,a.b_customer_mobileno
                                    ,a.remarks
                                    ,a.roundoff
                                    ,a.SCHEME_DOC_FORMAT
                                    ,a.SCHEME_DOCNO
                                    ,a.STOCK_POINT_NAME
                                    ,a.TRANSPORTER_ID
                                    ,a.POD_AMOUNT
                                    ,a.B_CUSTOMER_EMAIL
                                    ,a.B_ISDCODE
                                    ,a.S_CUSTOMER_MOBILENO
                                    ,a.S_CUSTOMER_EMAIL
                                    ,a.S_ISDCODE
                                    ,a.udfstring01
                                    ,a.udfstring02
                                    ,a.udfstring03
                                    ,a.udfstring04
                                    ,a.udfstring05
                                    ,a.udfstring06
                                    ,a.udfstring07
                                    ,a.udfstring08
                                    ,a.udfstring09
                                    ,a.udfstring10
                                    ,a.udfnum01
                                    ,a.udfnum02
                                    ,a.udfnum03
                                    ,a.udfnum04
                                    ,a.udfnum05
                                    ,a.udfdate01
                                    ,a.udfdate02
                                    ,a.udfdate03
                                    ,a.udfdate04
                                    ,a.udfdate05
                            FROM int$stg_ecomowned a, finsl b WHERE upper(a.CHANNEL_ID) = upper(b.slID)
                            AND userid ='
         || p_userid::text
         || ' GROUP BY b.slname, DATE_TRUNC(''day'',a.saledt), a.reference_no
                                    ,a.tradegroup_name
                                    ,a.B_CUSTOMER_MOBILENO
                                    ,a.remarks
                                    ,a.roundoff
                                    ,a.SCHEME_DOC_FORMAT
                                    ,a.SCHEME_DOCNO
                                    ,a.STOCK_POINT_NAME
                                    ,a.TRANSPORTER_ID
                                    ,a.POD_AMOUNT
                                    ,a.B_CUSTOMER_EMAIL
                                    ,a.B_ISDCODE
                                    ,a.S_CUSTOMER_MOBILENO
                                    ,a.S_CUSTOMER_EMAIL
                                    ,a.S_ISDCODE
                                    ,a.udfstring01
                                    ,a.udfstring02
                                    ,a.udfstring03
                                    ,a.udfstring04
                                    ,a.udfstring05
                                    ,a.udfstring06
                                    ,a.udfstring07
                                    ,a.udfstring08
                                    ,a.udfstring09
                                    ,a.udfstring10
                                    ,a.udfnum01
                                    ,a.udfnum02
                                    ,a.udfnum03
                                    ,a.udfnum04
                                    ,a.udfnum05
                                    ,a.udfdate01
                                    ,a.udfdate02
                                    ,a.udfdate03
                                    ,a.udfdate04
                                    ,a.udfdate05
                                    ,a.awb_number
                                    ,a.s_date
                                    ,upper(a.isbillingshippingsame)
                                    ,issecondarysupply
                                    ,secondarysupplyparenticode
                                    ,secondarysupplytaxpolicy
                            )A';

      EXECUTE vdetailtbl;

      -- start rev : 001
      --vdetailrec := 'SELECT count(1) FROM ecomowned_'||vsession;
      vdetailrec := 'SELECT count(1) FROM ginarchive.ecomowned_' || vsession::text;

      -- end rev : 001
      EXECUTE vdetailrec INTO STRICT vcount;

      IF coalesce(vcount, 0) = 0
      THEN
         RAISE EXCEPTION 'insert_violation' USING ERRCODE = '50001';
      END IF;

      INSERT INTO int$history(code,
                               importedby,
                               importedon,
                               classname,
                               summary,
                               history_detail_tablename,
                               history_detail_row_count)
           -- strat rev : 001
           --VALUES (int$history_code.NEXTVAL, p_userid, SYSDATE, 'ECOMOWNED', vcount::TEXT||' Transaction has been created', 'ecomowned_'||vsession, vcount);
           VALUES (nextval('int$history_code'),
                   p_userid,
                   clock_timestamp(),
                   'ECOMOWNED',
                   vcount::TEXT || ' Transaction has been created',
                   'ginarchive.ecomowned_' || vsession,
                   vcount);

      -- end rev : 001
      RETURN('1');
   EXCEPTION
      WHEN SQLSTATE '50001' THEN
        --ROLLBACK;
         errcode := -02222;
         errmsg := 'Data inconsistency';

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
              VALUES (nextval('int$error_log_code'),
                      0,
                      'ecomowned',
                      p_userid,
                      errcode,
                      errmsg,
                      clock_timestamp());

         --COMMIT;

         RETURN('0');
      WHEN OTHERS
      THEN
         --ROLLBACK;
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
              VALUES (nextval('int$error_log_code'),
                      0,
                      'ecomowned',
                      p_userid,
                      'Validation',
                      SUBSTR(errmsg, position(':' in errmsg) + 1),
                      clock_timestamp());

         --COMMIT;

         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

