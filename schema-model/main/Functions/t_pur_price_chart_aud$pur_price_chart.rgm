function "main"."t_pur_price_chart_aud$pur_price_chart()" {
  text = """

DECLARE
    V_RECORD_OLD AUD_PUR_PRICE_CHART%ROWTYPE;
	V_RECORD_NEW AUD_PUR_PRICE_CHART%ROWTYPE;
    V_SID DOUBLE PRECISION;
    V_TRNID CHARACTER VARYING(50);
    V_ACTION CHARACTER VARYING(10);
    I RECORD;    
	V_AUDIT_USER CHARACTER VARYING (100);
	V_LOGINUSER  CHARACTER VARYING (100);
	V_PROGRAM    CHARACTER VARYING (100);
	V_REC_COUNT  BIGINT; 
   
BEGIN
       SELECT current_setting('audit.AUDIT_USER', true) INTO V_AUDIT_USER;
	   IF NULLIF(V_AUDIT_USER,'') IS NOT NULL THEN  
		   BEGIN
				SELECT FULLNAME
				INTO   STRICT V_LOGINUSER
				FROM   APPUSER
				WHERE  ID =  substring (V_AUDIT_USER,8,position(';' in V_AUDIT_USER)-8)::NUMERIC; 
		   EXCEPTION
				WHEN no_data_found
				THEN
					V_LOGINUSER := 'System';
			END;			
		ELSE
			V_LOGINUSER := 'SYSTEM';
		END IF;
	   
	   select application_name
	   INTO   V_PROGRAM
	   from pg_stat_activity where pid = pg_backend_pid();

       V_ACTION:=TG_OP;
	   
       SELECT TXID_CURRENT() INTO V_TRNID;
       
        IF TG_OP = 'INSERT' OR  TG_OP = 'UPDATE' THEN 
	   
           V_RECORD_NEW.ACTION := V_ACTION;
           V_RECORD_NEW.ACTION_SUBTYPE := 'NEW';
           V_RECORD_NEW.TRANSACTION_ID := V_TRNID::TEXT;		   
		   V_RECORD_NEW.code := NEW.code;
            V_RECORD_NEW.pcode := NEW.pcode;
            V_RECORD_NEW.icode := NEW.icode;
            V_RECORD_NEW.effective_date := NEW.effective_date;
            V_RECORD_NEW.rate := NEW.rate;
            V_RECORD_NEW.delivery_days := NEW.delivery_days;
            V_RECORD_NEW.extinct := NEW.extinct;
            V_RECORD_NEW.ecode := NEW.ecode;
            V_RECORD_NEW.time := NEW.time;
            V_RECORD_NEW.last_access_ecode := NEW.last_access_ecode;
            V_RECORD_NEW.last_access_time := NEW.last_access_time;
          END IF;  
            
         IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN 
	   
            V_RECORD_OLD.ACTION := V_ACTION;
            V_RECORD_OLD.ACTION_SUBTYPE := 'OLD';
            V_RECORD_OLD.TRANSACTION_ID := V_TRNID::TEXT;			
			V_RECORD_OLD.code := OLD.code;
            V_RECORD_OLD.pcode := OLD.pcode;
            V_RECORD_OLD.icode := OLD.icode;
            V_RECORD_OLD.effective_date := OLD.effective_date;
            V_RECORD_OLD.rate := OLD.rate;
            V_RECORD_OLD.delivery_days := OLD.delivery_days;
            V_RECORD_OLD.extinct := OLD.extinct;
            V_RECORD_OLD.ecode := OLD.ecode;
            V_RECORD_OLD.time := OLD.time;
            V_RECORD_OLD.last_access_ecode := OLD.last_access_ecode;
            V_RECORD_OLD.last_access_time := OLD.last_access_time;
          END IF;  

    IF TG_OP = 'INSERT' THEN
	    V_REC_COUNT := 1;
        INSERT INTO AUD_PUR_PRICE_CHART SELECT V_RECORD_NEW.*;
    END IF;

    IF TG_OP = 'UPDATE' THEN
	FOR I IN (
		SELECT 
		V_RECORD_OLD.extinct,
                  V_RECORD_OLD.delivery_days,
                  V_RECORD_OLD.rate,
                  V_RECORD_OLD.effective_date,
                  V_RECORD_OLD.icode
		EXCEPT
		SELECT 
		V_RECORD_NEW.extinct,
                  V_RECORD_NEW.delivery_days,
                  V_RECORD_NEW.rate,
                  V_RECORD_NEW.effective_date,
                  V_RECORD_NEW.icode
			 )
	LOOP
	  V_REC_COUNT := 1; 
		INSERT INTO AUD_PUR_PRICE_CHART SELECT V_RECORD_OLD.*;
       INSERT INTO AUD_PUR_PRICE_CHART SELECT V_RECORD_NEW.*;    
	END LOOP;   
    END IF;

    IF TG_OP = 'DELETE' THEN
		V_REC_COUNT := 1;
		INSERT INTO AUD_PUR_PRICE_CHART SELECT V_RECORD_OLD.*;
    END IF;
	
	IF V_REC_COUNT >  0
	THEN
	   BEGIN
            INSERT INTO AUD_TRANSACTION (TRANSACTION_ID, TRANSACTION_DATE, LOGIN_USER, PROGRAM, MODULE_SHORTCODE, MODULE_TYPE)
            VALUES (V_TRNID,   current_date,V_LOGINUSER, V_PROGRAM, 'PurchasePriceChart', 'Price Chart');
       EXCEPTION WHEN unique_violation THEN
            NULL;
       END;  

       BEGIN  
             INSERT INTO AUD_TRANSACTION_TABLE (TRANSACTION_ID, TABLE_NAME)
             VALUES (V_TRNID,  'PUR_PRICE_CHART');
       EXCEPTION WHEN unique_violation THEN
             NULL;
       END; 
	END IF;   
    

    IF TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    EXCEPTION
        WHEN others THEN
            CALL main.erraudit(SESSION_USER::text, 'T_PUR_PRICE_CHART_AUD'::CHARACTER, SQLSTATE::text, SQLERRM);
			RAISE;
			RETURN NULL;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

