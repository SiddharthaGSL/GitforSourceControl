function "main"."t_invitem_cogs_state$invitem()" {
  text = """

DECLARE
    v_cogs_state CHARACTER(1);
    my_cogs_exp VARCHAR(50) := 'my_cogs_exp';
BEGIN
    /*
    *************************************************************************************************************************************************
          PURPOSE: Cost Calculation
    
         REV NO         OWNER           DATE            DESCRIPTION
         ------------   ----------      -----------     ---------------------------------------------------------------------------------------------
         REV : 000      MANASH          14-APR-2017     (TFS ID : 21200) Inventory Valuation Revamp.
         REV : 001      DIPTIMAN        05-JUL-2017     (TFS ID : 30754) Unable to create item when COGS process is running.
    ************************************************************************************************************************************************
    */
    v_cogs_state :=  CURRENT_SETTING('COGS_STATE');

    IF COALESCE(v_cogs_state, '@') = 'R' AND COALESCE(new.cogs_code, 1) <> 0 THEN
        RAISE USING detail = my_cogs_exp, hint = 1;
    ELSIF COALESCE(v_cogs_state, '@') = 'R' AND COALESCE(new.cogs_code, 1) = 0 THEN
        new := ROW (new.icode, new.grpcode, new.cname1, new.ccode1, new.cname2, new.ccode2, new.cname3, new.ccode3, new.cname4, new.ccode4, new.cname5, new.ccode5, new.cname6, new.ccode6, new.rate, new.mrp, new.barrq, new.barunit, new.rem, new.ext, new.taxcode, new.partycode, new.partyname, new.generated, new.last_changed, new.cmpcode, new.unitname, new.charge, new.grccode, new.stkplancode, new.barcode, new.listed_mrp, new.expiry_date, new.partyalias, new.stockindate, new.considerinorder, new.shrtname, new.considerasfree, new.noninventory, new.costrate, new.wsp, new.invarticle_code, new.allow_price_modification, new.alt_mrp, new.alt_listed_mrp, new.isservice, new.service_days, new.pos_multiprice_action, new.negative_stock_alert, new.ismetal, new.item_name, new.price_terms, new.price_basis, new.invmetal_code, new.net_weight, new.grs_weight, new.job_cost_basis, new.job_cost_amt, new.part_qty, new.certificate_no, new.d_count, new.d_size, new.d_weight, new.d_value, new.d_desc, new.c_count, new.c_weight, new.c_value, new.c_desc, new.o_count, new.o_weight, new.o_value, new.o_desc, new.other_chg, new.material_type, new.routecode, new.costsheet_code, new.desc1, new.desc2, new.desc3, new.desc4, new.desc5, new.desc6, new.num1, new.num2, new.num3, new.block_sale, new.block_sale_before, new.block_sale_after, new.block_sale_reason, new.isprice_excludes_tax, new.autoqtypopup, new.pos_return_behavior, new.search_string, new.price_change_limit, new.udfstring01, new.udfstring02, new.udfstring03, new.udfstring04, new.udfstring05, new.udfstring06, new.udfstring07, new.udfstring08, new.udfstring09, new.udfstring10, new.udfnum01, new.udfnum02, new.udfnum03, new.udfnum04, new.udfnum05, new.udfdate01, new.udfdate02, new.udfdate03, new.udfdate04, new.udfdate05, NULL, new.invhsnsacmain_code, new.gst_itc_appl, new.glcode, new.slcode);
    END IF;
    RETURN NEW;
    EXCEPTION
        WHEN raise_exception THEN
            DECLARE
                exc$name CHARACTER VARYING;
                exc$code CHARACTER VARYING;
            BEGIN
                GET STACKED DIAGNOSTICS exc$name := pg_exception_detail,
                    exc$code := pg_exception_hint;

                IF exc$name = my_cogs_exp THEN
                    CALL erraudit(SESSION_USER, 'T_INVITEM_COGS_STATE'::CHARACTER, - 20111, CONCAT_WS('', 'Internal error occured.', 'COGS is in running state, Unable to update Item Master.'));
                    RAISE USING hint = -20111, message = CONCAT_WS('', 'Internal error occured.', 'COGS is in running state, Unable to update Item Master.'), detail = 'User-defined exception';
                END IF;
            END;
            RETURN NEW;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

