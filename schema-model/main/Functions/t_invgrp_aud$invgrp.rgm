function "main"."t_invgrp_aud$invgrp()" {
  text = """

DECLARE
    V_RECORD_OLD AUD_INVGRP%ROWTYPE;
	V_RECORD_NEW AUD_INVGRP%ROWTYPE;
    V_SID DOUBLE PRECISION;
    V_TRNID CHARACTER VARYING(50);
    V_ACTION CHARACTER VARYING(10);
    I RECORD;    
	V_AUDIT_USER CHARACTER VARYING (100);
	V_LOGINUSER  CHARACTER VARYING (100);
	V_PROGRAM    CHARACTER VARYING (100);
	V_REC_COUNT  BIGINT; 
   
BEGIN
       SELECT current_setting('audit.AUDIT_USER', true) INTO V_AUDIT_USER;
	   IF NULLIF(V_AUDIT_USER,'') IS NOT NULL THEN  
		   BEGIN
				SELECT FULLNAME
				INTO   STRICT V_LOGINUSER
				FROM   APPUSER
				WHERE  ID =  substring (V_AUDIT_USER,8,position(';' in V_AUDIT_USER)-8)::NUMERIC; 
		   EXCEPTION
				WHEN no_data_found
				THEN
					V_LOGINUSER := 'System';
			END;			
		ELSE
			V_LOGINUSER := 'SYSTEM';
		END IF;
	   
	   select application_name
	   INTO   V_PROGRAM
	   from pg_stat_activity where pid = pg_backend_pid();

       V_ACTION:=TG_OP;
	   
       SELECT TXID_CURRENT() INTO V_TRNID;
       
        IF TG_OP = 'INSERT' OR  TG_OP = 'UPDATE' THEN 
	   
           V_RECORD_NEW.ACTION := V_ACTION;
           V_RECORD_NEW.ACTION_SUBTYPE := 'NEW';
           V_RECORD_NEW.TRANSACTION_ID := V_TRNID::TEXT;		   
		   V_RECORD_NEW.grpcode := NEW.grpcode;
            V_RECORD_NEW.grpname := NEW.grpname;
            V_RECORD_NEW.lev1grpname := NEW.lev1grpname;
            V_RECORD_NEW.lev2grpname := NEW.lev2grpname;
            V_RECORD_NEW.grpcomm := NEW.grpcomm;
            V_RECORD_NEW.parcode := NEW.parcode;
            V_RECORD_NEW.lev := NEW.lev;
            V_RECORD_NEW.ind := NEW.ind;
            V_RECORD_NEW.rem := NEW.rem;
            V_RECORD_NEW.ext := NEW.ext;
            V_RECORD_NEW.cat1infamily := NEW.cat1infamily;
            V_RECORD_NEW.cat2infamily := NEW.cat2infamily;
            V_RECORD_NEW.cat3infamily := NEW.cat3infamily;
            V_RECORD_NEW.cat4infamily := NEW.cat4infamily;
            V_RECORD_NEW.cat5infamily := NEW.cat5infamily;
            V_RECORD_NEW.cat6infamily := NEW.cat6infamily;
            V_RECORD_NEW.cat1prompt := NEW.cat1prompt;
            V_RECORD_NEW.cat2prompt := NEW.cat2prompt;
            V_RECORD_NEW.cat3prompt := NEW.cat3prompt;
            V_RECORD_NEW.cat4prompt := NEW.cat4prompt;
            V_RECORD_NEW.cat5prompt := NEW.cat5prompt;
            V_RECORD_NEW.cat6prompt := NEW.cat6prompt;
            V_RECORD_NEW.ageing_appl := NEW.ageing_appl;
            V_RECORD_NEW.seq := NEW.seq;
            V_RECORD_NEW.costing_method := NEW.costing_method;
            V_RECORD_NEW.taxcode := NEW.taxcode;
            V_RECORD_NEW.attr1prompt := NEW.attr1prompt;
            V_RECORD_NEW.attr2prompt := NEW.attr2prompt;
            V_RECORD_NEW.attr3prompt := NEW.attr3prompt;
            V_RECORD_NEW.attr4prompt := NEW.attr4prompt;
            V_RECORD_NEW.attr5prompt := NEW.attr5prompt;
            V_RECORD_NEW.attr6prompt := NEW.attr6prompt;
            V_RECORD_NEW.generic_attr1 := NEW.generic_attr1;
            V_RECORD_NEW.generic_attr2 := NEW.generic_attr2;
            V_RECORD_NEW.generic_attr3 := NEW.generic_attr3;
            V_RECORD_NEW.generic_attr4 := NEW.generic_attr4;
            V_RECORD_NEW.generic_attr5 := NEW.generic_attr5;
            V_RECORD_NEW.generic_attr6 := NEW.generic_attr6;
            V_RECORD_NEW.supplier_appl := NEW.supplier_appl;
            V_RECORD_NEW.material_type := NEW.material_type;
            V_RECORD_NEW.routecode := NEW.routecode;
            V_RECORD_NEW.excisemain_code := NEW.excisemain_code;
            V_RECORD_NEW.img_convention := NEW.img_convention;
            V_RECORD_NEW.grp_barunit := NEW.grp_barunit;
            V_RECORD_NEW.grp_unitname := NEW.grp_unitname;
            V_RECORD_NEW.grp_autoqtypopup := NEW.grp_autoqtypopup;
            V_RECORD_NEW.grp_pos_multiprice_action := NEW.grp_pos_multiprice_action;
            V_RECORD_NEW.grp_allow_price_modification := NEW.grp_allow_price_modification;
            V_RECORD_NEW.grp_price_change_limit := NEW.grp_price_change_limit;
            V_RECORD_NEW.grp_negative_stock_alert := NEW.grp_negative_stock_alert;
            V_RECORD_NEW.invhsnsacmain_code := NEW.invhsnsacmain_code;
            V_RECORD_NEW.item_management_mode := NEW.item_management_mode;
            V_RECORD_NEW.price_management := NEW.price_management;
            V_RECORD_NEW.manage_expiry := NEW.manage_expiry;
            V_RECORD_NEW.doccode := NEW.doccode;
            V_RECORD_NEW.iscreatebatchdocumentwise := NEW.iscreatebatchdocumentwise;
          END IF;  
            
         IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN 
	   
            V_RECORD_OLD.ACTION := V_ACTION;
            V_RECORD_OLD.ACTION_SUBTYPE := 'OLD';
            V_RECORD_OLD.TRANSACTION_ID := V_TRNID::TEXT;			
			V_RECORD_OLD.grpcode := OLD.grpcode;
            V_RECORD_OLD.grpname := OLD.grpname;
            V_RECORD_OLD.lev1grpname := OLD.lev1grpname;
            V_RECORD_OLD.lev2grpname := OLD.lev2grpname;
            V_RECORD_OLD.grpcomm := OLD.grpcomm;
            V_RECORD_OLD.parcode := OLD.parcode;
            V_RECORD_OLD.lev := OLD.lev;
            V_RECORD_OLD.ind := OLD.ind;
            V_RECORD_OLD.rem := OLD.rem;
            V_RECORD_OLD.ext := OLD.ext;
            V_RECORD_OLD.cat1infamily := OLD.cat1infamily;
            V_RECORD_OLD.cat2infamily := OLD.cat2infamily;
            V_RECORD_OLD.cat3infamily := OLD.cat3infamily;
            V_RECORD_OLD.cat4infamily := OLD.cat4infamily;
            V_RECORD_OLD.cat5infamily := OLD.cat5infamily;
            V_RECORD_OLD.cat6infamily := OLD.cat6infamily;
            V_RECORD_OLD.cat1prompt := OLD.cat1prompt;
            V_RECORD_OLD.cat2prompt := OLD.cat2prompt;
            V_RECORD_OLD.cat3prompt := OLD.cat3prompt;
            V_RECORD_OLD.cat4prompt := OLD.cat4prompt;
            V_RECORD_OLD.cat5prompt := OLD.cat5prompt;
            V_RECORD_OLD.cat6prompt := OLD.cat6prompt;
            V_RECORD_OLD.ageing_appl := OLD.ageing_appl;
            V_RECORD_OLD.seq := OLD.seq;
            V_RECORD_OLD.costing_method := OLD.costing_method;
            V_RECORD_OLD.taxcode := OLD.taxcode;
            V_RECORD_OLD.attr1prompt := OLD.attr1prompt;
            V_RECORD_OLD.attr2prompt := OLD.attr2prompt;
            V_RECORD_OLD.attr3prompt := OLD.attr3prompt;
            V_RECORD_OLD.attr4prompt := OLD.attr4prompt;
            V_RECORD_OLD.attr5prompt := OLD.attr5prompt;
            V_RECORD_OLD.attr6prompt := OLD.attr6prompt;
            V_RECORD_OLD.generic_attr1 := OLD.generic_attr1;
            V_RECORD_OLD.generic_attr2 := OLD.generic_attr2;
            V_RECORD_OLD.generic_attr3 := OLD.generic_attr3;
            V_RECORD_OLD.generic_attr4 := OLD.generic_attr4;
            V_RECORD_OLD.generic_attr5 := OLD.generic_attr5;
            V_RECORD_OLD.generic_attr6 := OLD.generic_attr6;
            V_RECORD_OLD.supplier_appl := OLD.supplier_appl;
            V_RECORD_OLD.material_type := OLD.material_type;
            V_RECORD_OLD.routecode := OLD.routecode;
            V_RECORD_OLD.excisemain_code := OLD.excisemain_code;
            V_RECORD_OLD.img_convention := OLD.img_convention;
            V_RECORD_OLD.grp_barunit := OLD.grp_barunit;
            V_RECORD_OLD.grp_unitname := OLD.grp_unitname;
            V_RECORD_OLD.grp_autoqtypopup := OLD.grp_autoqtypopup;
            V_RECORD_OLD.grp_pos_multiprice_action := OLD.grp_pos_multiprice_action;
            V_RECORD_OLD.grp_allow_price_modification := OLD.grp_allow_price_modification;
            V_RECORD_OLD.grp_price_change_limit := OLD.grp_price_change_limit;
            V_RECORD_OLD.grp_negative_stock_alert := OLD.grp_negative_stock_alert;
            V_RECORD_OLD.invhsnsacmain_code := OLD.invhsnsacmain_code;
            V_RECORD_OLD.item_management_mode := OLD.item_management_mode;
            V_RECORD_OLD.price_management := OLD.price_management;
            V_RECORD_OLD.manage_expiry := OLD.manage_expiry;
            V_RECORD_OLD.doccode := OLD.doccode;
            V_RECORD_OLD.iscreatebatchdocumentwise := OLD.iscreatebatchdocumentwise;
          END IF;  

    IF TG_OP = 'INSERT' THEN
	    V_REC_COUNT := 1;
        INSERT INTO AUD_INVGRP SELECT V_RECORD_NEW.*;
    END IF;

    IF TG_OP = 'UPDATE' THEN
	FOR I IN (
		SELECT 
		V_RECORD_OLD.invhsnsacmain_code,
                  V_RECORD_OLD.grp_negative_stock_alert,
                  V_RECORD_OLD.grp_price_change_limit,
                  V_RECORD_OLD.grp_allow_price_modification,
                  V_RECORD_OLD.grp_pos_multiprice_action,
                  V_RECORD_OLD.grp_autoqtypopup,
                  V_RECORD_OLD.grp_unitname,
                  V_RECORD_OLD.grp_barunit,
                  V_RECORD_OLD.img_convention,
                  V_RECORD_OLD.excisemain_code,
                  V_RECORD_OLD.material_type,
                  V_RECORD_OLD.supplier_appl,
                  V_RECORD_OLD.generic_attr6,
                  V_RECORD_OLD.generic_attr5,
                  V_RECORD_OLD.generic_attr4,
                  V_RECORD_OLD.generic_attr3,
                  V_RECORD_OLD.generic_attr2,
                  V_RECORD_OLD.generic_attr1,
                  V_RECORD_OLD.attr6prompt,
                  V_RECORD_OLD.attr5prompt,
                  V_RECORD_OLD.attr4prompt,
                  V_RECORD_OLD.attr3prompt,
                  V_RECORD_OLD.attr2prompt,
                  V_RECORD_OLD.attr1prompt,
                  V_RECORD_OLD.taxcode,
                  V_RECORD_OLD.costing_method,
                  V_RECORD_OLD.seq,
                  V_RECORD_OLD.ageing_appl,
                  V_RECORD_OLD.ext,
                  V_RECORD_OLD.rem,
                  V_RECORD_OLD.lev,
                  V_RECORD_OLD.parcode,
                  V_RECORD_OLD.lev2grpname,
                  V_RECORD_OLD.lev1grpname,
                  V_RECORD_OLD.grpname
		EXCEPT
		SELECT 
		V_RECORD_NEW.invhsnsacmain_code,
                  V_RECORD_NEW.grp_negative_stock_alert,
                  V_RECORD_NEW.grp_price_change_limit,
                  V_RECORD_NEW.grp_allow_price_modification,
                  V_RECORD_NEW.grp_pos_multiprice_action,
                  V_RECORD_NEW.grp_autoqtypopup,
                  V_RECORD_NEW.grp_unitname,
                  V_RECORD_NEW.grp_barunit,
                  V_RECORD_NEW.img_convention,
                  V_RECORD_NEW.excisemain_code,
                  V_RECORD_NEW.material_type,
                  V_RECORD_NEW.supplier_appl,
                  V_RECORD_NEW.generic_attr6,
                  V_RECORD_NEW.generic_attr5,
                  V_RECORD_NEW.generic_attr4,
                  V_RECORD_NEW.generic_attr3,
                  V_RECORD_NEW.generic_attr2,
                  V_RECORD_NEW.generic_attr1,
                  V_RECORD_NEW.attr6prompt,
                  V_RECORD_NEW.attr5prompt,
                  V_RECORD_NEW.attr4prompt,
                  V_RECORD_NEW.attr3prompt,
                  V_RECORD_NEW.attr2prompt,
                  V_RECORD_NEW.attr1prompt,
                  V_RECORD_NEW.taxcode,
                  V_RECORD_NEW.costing_method,
                  V_RECORD_NEW.seq,
                  V_RECORD_NEW.ageing_appl,
                  V_RECORD_NEW.ext,
                  V_RECORD_NEW.rem,
                  V_RECORD_NEW.lev,
                  V_RECORD_NEW.parcode,
                  V_RECORD_NEW.lev2grpname,
                  V_RECORD_NEW.lev1grpname,
                  V_RECORD_NEW.grpname
			 )
	LOOP
	  V_REC_COUNT := 1; 
		INSERT INTO AUD_INVGRP SELECT V_RECORD_OLD.*;
       INSERT INTO AUD_INVGRP SELECT V_RECORD_NEW.*;    
	END LOOP;   
    END IF;

    IF TG_OP = 'DELETE' THEN
		V_REC_COUNT := 1;
		INSERT INTO AUD_INVGRP SELECT V_RECORD_OLD.*;
    END IF;
	
	IF V_REC_COUNT >  0
	THEN
	   BEGIN
            INSERT INTO AUD_TRANSACTION (TRANSACTION_ID, TRANSACTION_DATE, LOGIN_USER, PROGRAM, MODULE_SHORTCODE, MODULE_TYPE)
            VALUES (V_TRNID,   current_date,V_LOGINUSER, V_PROGRAM, 'InventoryItemGroup', 'Item Group');
       EXCEPTION WHEN unique_violation THEN
            NULL;
       END;  

       BEGIN  
             INSERT INTO AUD_TRANSACTION_TABLE (TRANSACTION_ID, TABLE_NAME)
             VALUES (V_TRNID,  'INVGRP');
       EXCEPTION WHEN unique_violation THEN
             NULL;
       END; 
	END IF;   
    

    IF TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    EXCEPTION
        WHEN others THEN
            CALL main.erraudit(SESSION_USER::text, 'T_INVGRP_AUD'::CHARACTER, SQLSTATE::text, SQLERRM);
			RAISE;
			RETURN NULL;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

