function "main"."int$pkg_salesperson_int$pkg_salesperson_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      v_status      char(1);
      errmsg        varchar(200);
      errcode       text;
BEGIN

    -- SALESPERSON_NO Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Invalid SALESPERSON_NO. Only alphabets, numbers, and underscore are allowed.', clock_timestamp()
    from int$stg_salesperson
    where not regexp_match(salesperson_no, '^[A-Za-z0-9_]+$','n') IS NOT NULL
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Invalid SALESPERSON_NO. Spaces are not allowed.', clock_timestamp()
    from int$stg_salesperson
    where position(' ' in salesperson_no) > 0
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Duplicate Validation',
        a.salesperson_no||': Duplicate SALESPERSON_NO found in the Excel.', clock_timestamp()
    from int$stg_salesperson a
    where a.salesperson_no in (SELECT salesperson_no
                                    from int$stg_salesperson
                               group by salesperson_no
                               having count(*) > 1)
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Data length (10) exceeded in column SALESPERSON_NO.', clock_timestamp()
    from int$stg_salesperson
    where length(salesperson_no) > 10
    and userid = p_userid;

    -- FIRST_NAME Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Data length (50) exceeded in column FIRST_NAME.', clock_timestamp()
    from int$stg_salesperson
    where length(first_name) > 50
    and userid = p_userid;

    -- MIDDLE_NAME Validation
    
    /*insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    select int$error_log_code.nextval, lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Value is missing in mandatory column MIDDLE_NAME.', sysdate
    from int$stg_salesperson
    where middle_name is null
    and userid = p_userid;*/
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Data length (50) exceeded in column MIDDLE_NAME.', clock_timestamp()
    from int$stg_salesperson
    where length(middle_name) > 50
    and userid = p_userid;

    -- LAST_NAME Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Data length (50) exceeded in column LAST_NAME.', clock_timestamp()
    from int$stg_salesperson
    where length(last_name) > 50
    and userid = p_userid;

   -- DOB Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid DOB. Date of birth cannot be a future date.', clock_timestamp()
    from int$stg_salesperson
    where dob > date_trunc('day', clock_timestamp())
    and userid = p_userid;

    -- GENDER Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid GENDER. Only "M" or "F" are allowed.', clock_timestamp()
    from int$stg_salesperson
    where UPPER(gender) not in ('M','F')
    and userid = p_userid;

    -- ADDRESS1 Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Data length (50) exceeded in column ADDRESS1.', clock_timestamp()
    from int$stg_salesperson
    where length(address1) > 100
    and userid = p_userid;

    -- ADDRESS2 Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Data length (50) exceeded in column ADDRESS2.', clock_timestamp()
    from int$stg_salesperson
    where length(address2) > 100
    and userid = p_userid;

    -- ADDRESS3 Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        salesperson_no||': Data length (50) exceeded in column ADDRESS3.', clock_timestamp()
    from int$stg_salesperson
    where length(address3) > 100
    and userid = p_userid;

    -- CITY_NAME Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid CITY_NAME. Should match the city master.', clock_timestamp()
    from int$stg_salesperson s
    where not exists (
        SELECT 1
        from admcity c
        where upper(c.ctname) = upper(s.city_name)
    )
    AND s.city_name IS NOT NULL
    and userid = p_userid;

    -- PIN_CODE Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Input string was not in a correct format. in column PIN_CODE.', clock_timestamp()
    from int$stg_salesperson s
    where not regexp_match(pin_code, '[0-9]','n') IS NOT NULL
	and pin_code IS NOT NULL
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Maximum 6 digits is allowed in column PIN_CODE.', clock_timestamp()
    from int$stg_salesperson
    where length(pin_code) > 6
	and pin_code IS NOT NULL
    and userid = p_userid;

    -- MOBILE Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid MOBILE. Only numbers and the plus (+) sign as prefix are allowed.', clock_timestamp()
    from int$stg_salesperson
    where not regexp_match(mobile, '^\+?\d+$','n') IS NOT NULL
	and	mobile IS NOT NULL
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Data length (15) exceeded in column MOBILE.', clock_timestamp()
    from int$stg_salesperson
    where length(mobile) > 15
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid MOBILE. Spaces are not allowed.', clock_timestamp()
    from int$stg_salesperson
    where position(' ' in mobile) > 0
    and userid = p_userid;

    -- EMAIL_ADDRESS Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Data length (50) exceeded in column EMAIL_ADDRESS.', clock_timestamp()
    from int$stg_salesperson
    where length(email_address) > 50
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid EMAIL_ADDRESS.', clock_timestamp()
    from int$stg_salesperson a
    where (position('@' in a.email_address) = 0 OR position('.' in a.email_address) = 0)
    or (LENGTH(coalesce(SUBSTR(a.email_address, position('.' in a.email_address) + 2),'0')) < 2)
    and a.email_address is not null
    and a.userid = p_userid;

    -- PHONE1 Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid PHONE1. Only numbers and the plus (+) sign as prefix are allowed.', clock_timestamp()
    from int$stg_salesperson
    where not regexp_match(phone1, '^\+?\d+$','n') IS NOT NULL
	and	phone1 IS NOT NULL
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Data length (15) exceeded in column PHONE1.', clock_timestamp()
    from int$stg_salesperson
    where length(phone1) > 15
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid PHONE1. Spaces are not allowed.', clock_timestamp()
    from int$stg_salesperson
    where position(' ' in phone1) > 0
    and userid = p_userid;

    -- PHONE2 Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid PHONE2. Only numbers and the plus (+) sign as prefix are allowed.', clock_timestamp()
    from int$stg_salesperson
    where not regexp_match(phone2, '^\+?\d+$','n') IS NOT NULL
	and	phone1 IS NOT NULL
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Data length (15) exceeded in column PHONE2.', clock_timestamp()
    from int$stg_salesperson
    where length(phone2) > 15
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid PHONE2. Spaces are not allowed.', clock_timestamp()
    from int$stg_salesperson
    where position(' ' in phone2) > 0
    and userid = p_userid;

    -- EXTINCT_SALESPERSON Validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Invalid EXTINCT_SALESPERSON. Only "Y" or "N" are allowed.', clock_timestamp()
    from int$stg_salesperson
    where UPPER(extinct_salesperson) NOT IN ('Y','N')
    and userid = p_userid;

    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
    SELECT nextval('int$error_log_code'), lineno, 'SALESPERSON', userid, 'Input Validation',
        'Data length exceeded in column EXTINCT_SALESPERSON.', clock_timestamp()
    from int$stg_salesperson
    where length(extinct_salesperson) > 1
    and userid = p_userid;

    

      -- Check whether records are valid or not
      BEGIN
         SELECT 'S'
           INTO STRICT v_status
           
          WHERE EXISTS (SELECT 'S'
                      FROM int$error_log
                     WHERE userid = p_userid);

         RETURN('0');
      EXCEPTION
         WHEN no_data_found
         THEN
            RETURN('1');
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
              VALUES (nextval('int$error_log_code'),
                      0,
                      'SALESPERSON',
                      p_userid,
                      errcode,
                      errmsg,
                      clock_timestamp());

         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

