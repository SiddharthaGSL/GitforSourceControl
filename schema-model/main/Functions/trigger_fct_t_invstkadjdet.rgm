function "main"."trigger_fct_t_invstkadjdet()" {
  text = """

DECLARE
   V_TYPE           varchar(100);
   V_DETAIL_CODE    INVSTOCK.DETAIL_CODE%TYPE;
   V_ENTCODE        INVSTOCK.ENTCODE%TYPE;
   V_ENTNO          INVSTOCK.ENTNO%TYPE;
   V_ENTDT          INVSTOCK.ENTDT%TYPE;
   V_ENTTYPE        INVSTOCK.ENTTYPE%TYPE;
   V_LOCCODE        INVSTOCK.LOCCODE%TYPE;
   V_YCODE          INVSTOCK.YCODE%TYPE;
   V_NEW_ICODE      INVSTOCK.ICODE%TYPE;
   V_OLD_ICODE      INVSTOCK.ICODE%TYPE;
   V_NEW_QTY        INVSTOCK.QTY%TYPE;
   V_OLD_QTY        INVSTOCK.QTY%TYPE;
   V_NEW_RATE       INVSTOCK.RATE%TYPE;
   V_OLD_RATE       INVSTOCK.RATE%TYPE;
   V_REFPCODE       INVSTOCK.REFPCODE%TYPE;
   V_REFLOCCODE     INVSTOCK.REFLOCCODE%TYPE;
   V_REFCMPCODE     INVSTOCK.REFCMPCODE%TYPE;
   V_REFGLCODE      INVSTOCK.REFGLCODE%TYPE;
   V_REFDEPTCODE    INVSTOCK.REFDEPTCODE%TYPE;
   V_REFPRCODE      INVSTOCK.REFPRCODE%TYPE;
   V_REFDOCNO       INVSTOCK.REFDOCNO%TYPE;
   V_REFPKGCODE     INVSTOCK.REFPKGCODE%TYPE;
   V_REFDCCODE      INVSTOCK.REFDCCODE%TYPE;
   V_OTHER_RATE     INVSTOCK.COSTRATE%TYPE;
   -- START REV : 002
   V_ADMSITE_CODE   INVSTOCK.ADMSITE_CODE%TYPE;
 -- END REV : 002
BEGIN
   IF TG_OP = 'INSERT' THEN
      V_TYPE := 'INSERTING';
   END IF;

   IF TG_OP = 'UPDATE' THEN
      V_TYPE := 'UPDATING';
   END IF;

   IF TG_OP = 'DELETE' THEN
      V_TYPE := 'DELETING';
   END IF;

  -- START REV : 005
  -- IF NVL(:NEW.QTY,0) <> 0 THEN -- REV : 004
  IF coalesce(NEW.QTY, coalesce(OLD.QTY,0)) <> 0 THEN
  -- END REV :  005
   -- STOCK AND COSTING REFLECTION
   SELECT STKADJNO ENTNO
         ,STKADJDT ENTDT
         ,'ADJ' ENTTYPE
         ,YCODE YCODE
         ,LOCCODE LOCCODE
         ,NULL REFPCODE
         ,NULL REFLOCCODE
         ,NULL REFCMPCODE
         ,NULL REFGLCODE
         ,NULL REFDEPTCODE
         ,NULL REFPRCODE
         ,NULL REFDOCNO
         ,NULL REFPKGCODE
         -- START REV : 002
         ,ADMSITE_CODE
         -- END REV : 002
   INTO STRICT   V_ENTNO
         ,V_ENTDT
         ,V_ENTTYPE
         ,V_YCODE
         ,V_LOCCODE
         ,V_REFPCODE
         ,V_REFLOCCODE
         ,V_REFCMPCODE
         ,V_REFGLCODE
         ,V_REFDEPTCODE
         ,V_REFPRCODE
         ,V_REFDOCNO
         ,V_REFPKGCODE
         -- START REV : 002
         ,V_ADMSITE_CODE
         -- END REV : 002
   FROM   INVSTKADJMAIN
   WHERE  STKADJCODE = coalesce(NEW.STKADJCODE, OLD.STKADJCODE);

   V_DETAIL_CODE := coalesce(NEW.CODE, OLD.CODE);
   V_ENTCODE := coalesce(NEW.STKADJCODE, OLD.STKADJCODE);
   V_NEW_ICODE := NEW.ICODE;
   V_OLD_ICODE := OLD.ICODE;
   V_NEW_QTY := NEW.QTY;
   V_OLD_QTY := OLD.QTY;
   V_NEW_RATE := NEW.COSTRATE;
   V_OLD_RATE := OLD.COSTRATE;
   V_OTHER_RATE := NEW.COSTRATE;

   -- STOCK AND COSTING REFLECTION
   -- START REV : 002
   call DB_PKG_STOCK$REFLECT(V_DETAIL_CODE
                       ,V_TYPE
                       ,V_ENTCODE
                       ,V_ENTNO
                       ,V_ENTDT
                       ,V_ENTTYPE
                       ,V_LOCCODE
                       ,V_YCODE
                       ,V_NEW_ICODE
                       ,V_OLD_ICODE
                       ,V_NEW_QTY
                       ,V_OLD_QTY
                       ,V_NEW_RATE
                       ,V_OLD_RATE
                       ,V_REFPCODE
                       ,V_REFLOCCODE
                       ,V_REFCMPCODE
                       ,V_REFGLCODE
                       ,V_REFDEPTCODE
                       ,V_REFPRCODE
                       ,V_REFDOCNO
                       ,V_REFPKGCODE
                       ,V_REFDCCODE
                       ,V_OTHER_RATE
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,V_ADMSITE_CODE
                       -- START REV : 003
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,0
                       ,NULL
                       ,NEW.COSTRATE
                       -- END REV : 003
                       -- START REV : 006
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,coalesce(NEW.INVBATCH_SERIAL_CODE, OLD.INVBATCH_SERIAL_CODE)
                       -- END REV : 006 
                       );
   -- END REV : 002
    END IF;
    -- REV : 004
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

END
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

