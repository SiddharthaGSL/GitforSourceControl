function "main"."trigger_fct_t_invdcdet()" {
  text = """

DECLARE
   V_TYPE                 varchar(100);
   V_DETAIL_CODE          INVSTOCK.DETAIL_CODE%TYPE;
   V_ENTCODE              INVSTOCK.ENTCODE%TYPE;
   V_ENTNO                INVSTOCK.ENTNO%TYPE;
   V_ENTDT                INVSTOCK.ENTDT%TYPE;
   V_ENTTYPE              INVSTOCK.ENTTYPE%TYPE;
   V_LOCCODE              INVSTOCK.LOCCODE%TYPE;
   V_YCODE                INVSTOCK.YCODE%TYPE;
   V_NEW_ICODE            INVSTOCK.ICODE%TYPE;
   V_OLD_ICODE            INVSTOCK.ICODE%TYPE;
   V_NEW_QTY              INVSTOCK.QTY%TYPE;
   V_OLD_QTY              INVSTOCK.QTY%TYPE;
   V_NEW_RATE             INVSTOCK.RATE%TYPE;
   V_OLD_RATE             INVSTOCK.RATE%TYPE;
   V_REFPCODE             INVSTOCK.REFPCODE%TYPE;
   V_REFLOCCODE           INVSTOCK.REFLOCCODE%TYPE;
   V_REFCMPCODE           INVSTOCK.REFCMPCODE%TYPE;
   V_REFGLCODE            INVSTOCK.REFGLCODE%TYPE;
   V_REFDEPTCODE          INVSTOCK.REFDEPTCODE%TYPE;
   V_REFPRCODE            INVSTOCK.REFPRCODE%TYPE;
   V_REFDOCNO             INVSTOCK.REFDOCNO%TYPE;
   V_REFPKGCODE           INVSTOCK.REFPKGCODE%TYPE;
   V_REFDCCODE            INVSTOCK.REFDCCODE%TYPE;
   V_OTHER_RATE           INVSTOCK.COSTRATE%TYPE;
   V_TEMP_LOC             INVSTOCK.REFLOCCODE%TYPE;
   -- START REV : 005
   V_SCHEME_DOCNO         INVDCMAIN.SCHEME_DOCNO%TYPE;
   V_STATUS               INVDCMAIN.STATUS%TYPE;
   -- END REV : 005
   -- START REV : 006
   V_ADMSITE_CODE         INVSTOCK.ADMSITE_CODE%TYPE;
-- END REV : 006
   -- START REV : 008
    V_INVBIN_CODE         INVSTOCK.INVBIN_CODE%TYPE;
    V_RESERVE_QTY         INVSTOCK.RESERVE_QTY%TYPE;
    -- END REV : 008
    V_ENTRY_SOURCE        INVDCMAIN.ENTRY_SOURCE%TYPE;
BEGIN
  BEGIN
/*******************************************************************************************************************************************************
  NO.       DATE        AUTHOR                   DESCRIPTION
  --------- ----------  ----------------------   -------------------------------------------------------------------------------------------------------
  REV : 001 25/03/2009   SUJOY / RAJKUMAR         (BUG ID : 1120) POS Lite I
  REV : 002 06/02/2012   DIPTIMAN                 (BUG ID : 216)  Site related changes.
  REV : 003 11/06/2019   MOUSUMI                  (TFS ID : 4223)  ENTRY SOURCE RELATED CHANGES
  REV : 009 05/07/2022   SIDDHARTHA               (TFS ID : 7751)  BATCH SERIAL RELATED CHANGES
  ******************************************************************************************************************************************************/
  -- START REV : 003
  BEGIN
    SELECT ENTRY_SOURCE
    INTO STRICT   V_ENTRY_SOURCE
    FROM   INVDCMAIN
    WHERE  DCCODE = NEW.DCCODE;
  EXCEPTION WHEN no_data_found THEN
     V_ENTRY_SOURCE := NULL;
  END;
  -- END REV : 003 
   IF TG_OP = 'INSERT' THEN
      V_TYPE := 'INSERTING';
   
     -- START REV : 003
     -- Considering :NEW Instead of :OLD because we are trying to restrict the
     -- execution of this dependent table update from trigger when update is done 
     -- from web application even if the document was created from any other source
     -- like (Import Excel, D2K etc.) 
     IF  coalesce(V_ENTRY_SOURCE,'XX') <> 'WEB'
     THEN
     -- END REV : 003
      IF NEW.SALORDDET_CODE             -- REV : 005     :NEW.ORDCODE
         IS NOT NULL THEN

         UPDATE SALORDDET
         SET DQTY = coalesce(DQTY, 0) + coalesce(NEW.ISQTY, 0)
         -- START REV : 005
         WHERE  CODE = NEW.SALORDDET_CODE;

         -- START REV : 008
         IF NEW.INVPICKLISTDET_CODE IS NOT NULL THEN
             UPDATE INVPICKLISTDET
             SET    PACKED_QTY = coalesce(PACKED_QTY, 0) + coalesce(NEW.ISQTY, 0)
             WHERE  CODE = NEW.INVPICKLISTDET_CODE;
         END IF;
         -- END REV : 008
         -- START REV : 007
         -- END REV : 005
         -- END REV : 001
         -- UPDATE_SALORDMAIN_STATUS(:NEW.ORDCODE);           -- REV : 005
         INSERT INTO GLOBAL_TEMP_STORAGE(CODE_1) VALUES (NEW.ORDCODE);
         -- END REV : 007
      END IF;
   END IF;
  END IF; -- REV : 003
   IF TG_OP = 'UPDATE' THEN
      V_TYPE := 'UPDATING';

     -- START REV : 003
     -- Considering :NEW Instead of :OLD because we are trying to restrict the
     -- execution of this dependent table update from trigger when update is done 
     -- from web application even if the document was created from any other source
     -- like (Import Excel, D2K etc.) 
     IF  coalesce(V_ENTRY_SOURCE,'XX') <> 'WEB'
     THEN
     -- END REV : 003
      IF OLD.SALORDDET_CODE IS NOT NULL THEN            -- REV : 005 :NEW.ORDCODE IS NOT NULL THEN
         -- START REV : 002
         UPDATE SALORDDET
         SET DQTY = coalesce(DQTY, 0) - coalesce(OLD.ISQTY, 0)
         -- START REV : 005
         WHERE  CODE = OLD.SALORDDET_CODE;

         -- START REV : 008
         IF OLD.INVPICKLISTDET_CODE IS NOT NULL THEN
             UPDATE INVPICKLISTDET
             SET    PACKED_QTY = coalesce(PACKED_QTY, 0) - coalesce(OLD.ISQTY, 0)
             WHERE  CODE = OLD.INVPICKLISTDET_CODE;
         END IF;
         -- END REV : 008
         -- START REV  007
         -- UPDATE_SALORDMAIN_STATUS(:OLD.ORDCODE);
         INSERT INTO GLOBAL_TEMP_STORAGE(CODE_1) VALUES (OLD.ORDCODE);
         -- END REV : 007
      END IF;

      IF NEW.SALORDDET_CODE IS NOT NULL THEN
         -- END REV : 005
         UPDATE SALORDDET
         SET DQTY = coalesce(DQTY, 0) + coalesce(NEW.ISQTY, 0)
         WHERE  CODE = NEW.SALORDDET_CODE;

         -- START REV : 008
         IF NEW.INVPICKLISTDET_CODE IS NOT NULL THEN
             UPDATE INVPICKLISTDET
             SET    PACKED_QTY = coalesce(PACKED_QTY, 0) + coalesce(NEW.ISQTY, 0)
             WHERE  CODE = NEW.INVPICKLISTDET_CODE;
         END IF;
         -- END REV : 008
         -- START REV : 007
         /*
         -- START REV : 005
         -- UPDATE_SALORDMAIN_STATUS(:NEW.ORDCODE);
         -- END REV : 005
         -- END REV : 002
         */
         INSERT INTO GLOBAL_TEMP_STORAGE(CODE_1) VALUES (NEW.ORDCODE);
         -- END REV : 007
      END IF;
   END IF;
  END IF; -- REV : 003
   IF TG_OP = 'DELETE' THEN
      V_TYPE := 'DELETING';
     -- START REV : 003 
     /* IF :OLD.SALORDDET_CODE                                              -- REV : 005 :OLD.ORDCODE
                            IS NOT NULL THEN
         UPDATE SALORDDET
         SET DQTY = NVL(DQTY, 0) - NVL(:OLD.ISQTY, 0)
         -- START REV : 005
         WHERE  CODE = :OLD.SALORDDET_CODE;

          -- START REV : 008
         IF :OLD.INVPICKLISTDET_CODE IS NOT NULL THEN
             UPDATE INVPICKLISTDET
             SET    PACKED_QTY = NVL(PACKED_QTY, 0) - NVL(:OLD.ISQTY, 0)
             WHERE  CODE = :OLD.INVPICKLISTDET_CODE;
         END IF;
         -- END REV : 008
         -- START REV  007
         -- UPDATE_SALORDMAIN_STATUS(:OLD.ORDCODE);
         INSERT INTO GLOBAL_TEMP_STORAGE(CODE_1) VALUES(:OLD.ORDCODE);
      END IF;
      -- END REV : 003
   END IF;*/
  END IF; -- REV : 003
   -- STOCK AND COSTING REFLECTION
   -- FOR OUT
   SELECT DCNO ENTNO
         ,DCDT ENTDT
         ,'DCO' ENTTYPE
         ,YCODE YCODE
         ,OUTLOCCODE OUTLOCCODE
         ,PCODE REFPCODE
         ,INLOCCODE REFLOCCODE
         ,NULL REFCMPCODE
         ,NULL REFGLCODE
         ,NULL REFDEPTCODE
         ,NULL REFPRCODE
         ,DOCNO REFDOCNO
         ,NULL REFPKGCODE
         -- START REV : 005
         ,SCHEME_DOCNO
         ,STATUS
         -- END REV : 005
         -- START REV : 006
         ,ADMSITE_CODE_OWNER
         -- END REV : 006
   INTO STRICT   V_ENTNO
         ,V_ENTDT
         ,V_ENTTYPE
         ,V_YCODE
         ,V_LOCCODE
         ,V_REFPCODE
         ,V_REFLOCCODE
         ,V_REFCMPCODE
         ,V_REFGLCODE
         ,V_REFDEPTCODE
         ,V_REFPRCODE
         ,V_REFDOCNO
         ,V_REFPKGCODE
         -- START REV : 005
         ,V_SCHEME_DOCNO
         ,V_STATUS
         -- END REV : 005
         -- START REV : 006
         ,V_ADMSITE_CODE
         -- END REV : 006
   FROM   INVDCMAIN
   WHERE  DCCODE = coalesce(NEW.DCCODE, OLD.DCCODE);

   V_DETAIL_CODE := coalesce(NEW.CODE, OLD.CODE);
   V_ENTCODE := coalesce(NEW.DCCODE, OLD.DCCODE);
   V_NEW_ICODE := NEW.ICODE;
   V_OLD_ICODE := OLD.ICODE;
   V_NEW_QTY := NEW.ISQTY;
   V_OLD_QTY := OLD.ISQTY;
   V_NEW_RATE := NEW.RATE;
   V_OLD_RATE := OLD.RATE;
   -- START REV : 008
   V_INVBIN_CODE := coalesce(NEW.INVBIN_CODE,OLD.INVBIN_CODE);
   V_RESERVE_QTY := 0;
   IF V_INVBIN_CODE IS NOT NULL THEN
        V_RESERVE_QTY := (-1) * coalesce(NEW.ISQTY,OLD.ISQTY);
   END IF;

   -- END REV : 008
   -- STOCK AND COSTING REFLECTION
   --FOR STIOCK OUT
   -- START REV : 004
   -- START REV : 005
   IF V_STATUS <> 'C'  THEN
      CALL DB_PKG_STOCK$REFLECT(V_DETAIL_CODE
                          ,V_TYPE
                          ,V_ENTCODE
                          ,V_ENTNO
                          ,V_ENTDT
                          ,V_ENTTYPE
                          ,V_LOCCODE
                          ,V_YCODE
                          ,V_NEW_ICODE
                          ,V_OLD_ICODE
                          ,V_NEW_QTY
                          ,V_OLD_QTY
                          ,V_NEW_RATE
                          ,V_OLD_RATE
                          ,V_REFPCODE
                          ,V_REFLOCCODE
                          ,V_REFCMPCODE
                          ,V_REFGLCODE
                          ,V_REFDEPTCODE
                          ,V_REFPRCODE
                          ,V_REFDOCNO
                          ,V_REFPKGCODE
                          ,V_REFDCCODE
                          ,V_OTHER_RATE
                          ,V_SCHEME_DOCNO
                          ,NULL
                          ,NULL
                          ,NEW.REMARKS
                          -- START REV : 006
                          ,V_ADMSITE_CODE
                          -- END REV : 006
                          -- START REV : 008
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,V_INVBIN_CODE
                          ,V_RESERVE_QTY
                          -- END REV : 008
                          -- START REV : 009
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,coalesce(NEW.INVBATCH_SERIAL_CODE, OLD.INVBATCH_SERIAL_CODE)
                          -- END REV : 009
                          );
      -- END REV : 005
      -- END REV : 004
      --FOR STIOCK IN
      V_ENTTYPE := 'DCI';
      -- INTERCHANGING THE LOCATION
      V_TEMP_LOC := V_LOCCODE;
      V_LOCCODE := V_REFLOCCODE;
      V_REFLOCCODE := V_TEMP_LOC;
      -- START REV : 004
      -- START REV : 005
      CALL DB_PKG_STOCK$REFLECT(V_DETAIL_CODE
                          ,V_TYPE
                          ,V_ENTCODE
                          ,V_ENTNO
                          ,V_ENTDT
                          ,V_ENTTYPE
                          ,V_LOCCODE
                          ,V_YCODE
                          ,V_NEW_ICODE
                          ,V_OLD_ICODE
                          ,V_NEW_QTY
                          ,V_OLD_QTY
                          ,V_NEW_RATE
                          ,V_OLD_RATE
                          ,V_REFPCODE
                          ,V_REFLOCCODE
                          ,V_REFCMPCODE
                          ,V_REFGLCODE
                          ,V_REFDEPTCODE
                          ,V_REFPRCODE
                          ,V_REFDOCNO
                          ,V_REFPKGCODE
                          ,V_REFDCCODE
                          ,V_OTHER_RATE
                          ,V_SCHEME_DOCNO
                          ,NULL
                          ,NULL
                          ,NEW.REMARKS
                          -- START REV : 006
                          ,V_ADMSITE_CODE
                          -- END REV : 006
                          -- START REV : 009
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,0
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,NULL
                          ,coalesce(NEW.INVBATCH_SERIAL_CODE, OLD.INVBATCH_SERIAL_CODE)
                          -- END REV : 009
                          );
   END IF;
   -- END REV : 005
   -- END REV : 004
  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

END
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

