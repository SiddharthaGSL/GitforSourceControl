function "main"."t_finvchmain_aud$finvchmain()" {
  text = """

DECLARE
    V_RECORD_OLD AUD_FINVCHMAIN%ROWTYPE;
	V_RECORD_NEW AUD_FINVCHMAIN%ROWTYPE;
    V_SID DOUBLE PRECISION;
    V_TRNID CHARACTER VARYING(50);
    V_ACTION CHARACTER VARYING(10);
    I RECORD;    
	V_AUDIT_USER CHARACTER VARYING (100);
	V_LOGINUSER  CHARACTER VARYING (100);
	V_PROGRAM    CHARACTER VARYING (100);
	V_REC_COUNT  BIGINT; 
   
BEGIN
       SELECT current_setting('audit.AUDIT_USER', true) INTO V_AUDIT_USER;
	   IF NULLIF(V_AUDIT_USER,'') IS NOT NULL THEN  
		   BEGIN
				SELECT FULLNAME
				INTO   STRICT V_LOGINUSER
				FROM   APPUSER
				WHERE  ID =  substring (V_AUDIT_USER,8,position(';' in V_AUDIT_USER)-8)::NUMERIC; 
		   EXCEPTION
				WHEN no_data_found
				THEN
					V_LOGINUSER := 'System';
			END;			
		ELSE
			V_LOGINUSER := 'SYSTEM';
		END IF;
	   
	   select application_name
	   INTO   V_PROGRAM
	   from pg_stat_activity where pid = pg_backend_pid();

       V_ACTION:=TG_OP;
	   
       SELECT TXID_CURRENT() INTO V_TRNID;
       
        IF TG_OP = 'INSERT' OR  TG_OP = 'UPDATE' THEN 
	   
           V_RECORD_NEW.ACTION := V_ACTION;
           V_RECORD_NEW.ACTION_SUBTYPE := 'NEW';
           V_RECORD_NEW.TRANSACTION_ID := V_TRNID::TEXT;		   
		   V_RECORD_NEW.vchcode := NEW.vchcode;
            V_RECORD_NEW.vchno := NEW.vchno;
            V_RECORD_NEW.vchdt := NEW.vchdt;
            V_RECORD_NEW.vchtype := NEW.vchtype;
            V_RECORD_NEW.refno := NEW.refno;
            V_RECORD_NEW.glcode := NEW.glcode;
            V_RECORD_NEW.damount := NEW.damount;
            V_RECORD_NEW.camount := NEW.camount;
            V_RECORD_NEW.ycode := NEW.ycode;
            V_RECORD_NEW.ecode := NEW.ecode;
            V_RECORD_NEW.time := NEW.time;
            V_RECORD_NEW.last_access_time := NEW.last_access_time;
            V_RECORD_NEW.last_access_ecode := NEW.last_access_ecode;
            V_RECORD_NEW.nartext := NEW.nartext;
            V_RECORD_NEW.doccode := NEW.doccode;
            V_RECORD_NEW.scheme_docno := NEW.scheme_docno;
            V_RECORD_NEW.creation_dt := NEW.creation_dt;
            V_RECORD_NEW.release_status := NEW.release_status;
            V_RECORD_NEW.admsite_code_owner := NEW.admsite_code_owner;
            V_RECORD_NEW.release_time := NEW.release_time;
            V_RECORD_NEW.release_ecode := NEW.release_ecode;
            V_RECORD_NEW.isadvance := NEW.isadvance;
            V_RECORD_NEW.admou_code := NEW.admou_code;
            V_RECORD_NEW.temp_doccode := NEW.temp_doccode;
            V_RECORD_NEW.dataversion := NEW.dataversion;
            V_RECORD_NEW.entry_source := NEW.entry_source;
            V_RECORD_NEW.udfstring01 := NEW.udfstring01;
            V_RECORD_NEW.udfstring02 := NEW.udfstring02;
            V_RECORD_NEW.udfstring03 := NEW.udfstring03;
            V_RECORD_NEW.udfstring04 := NEW.udfstring04;
            V_RECORD_NEW.udfstring05 := NEW.udfstring05;
            V_RECORD_NEW.udfstring06 := NEW.udfstring06;
            V_RECORD_NEW.udfstring07 := NEW.udfstring07;
            V_RECORD_NEW.udfstring08 := NEW.udfstring08;
            V_RECORD_NEW.udfstring09 := NEW.udfstring09;
            V_RECORD_NEW.udfstring10 := NEW.udfstring10;
            V_RECORD_NEW.udfnum01 := NEW.udfnum01;
            V_RECORD_NEW.udfnum02 := NEW.udfnum02;
            V_RECORD_NEW.udfnum03 := NEW.udfnum03;
            V_RECORD_NEW.udfnum04 := NEW.udfnum04;
            V_RECORD_NEW.udfnum05 := NEW.udfnum05;
            V_RECORD_NEW.udfdate01 := NEW.udfdate01;
            V_RECORD_NEW.udfdate02 := NEW.udfdate02;
            V_RECORD_NEW.udfdate03 := NEW.udfdate03;
            V_RECORD_NEW.udfdate04 := NEW.udfdate04;
            V_RECORD_NEW.udfdate05 := NEW.udfdate05;
          END IF;  
            
         IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN 
	   
            V_RECORD_OLD.ACTION := V_ACTION;
            V_RECORD_OLD.ACTION_SUBTYPE := 'OLD';
            V_RECORD_OLD.TRANSACTION_ID := V_TRNID::TEXT;			
			V_RECORD_OLD.vchcode := OLD.vchcode;
            V_RECORD_OLD.vchno := OLD.vchno;
            V_RECORD_OLD.vchdt := OLD.vchdt;
            V_RECORD_OLD.vchtype := OLD.vchtype;
            V_RECORD_OLD.refno := OLD.refno;
            V_RECORD_OLD.glcode := OLD.glcode;
            V_RECORD_OLD.damount := OLD.damount;
            V_RECORD_OLD.camount := OLD.camount;
            V_RECORD_OLD.ycode := OLD.ycode;
            V_RECORD_OLD.ecode := OLD.ecode;
            V_RECORD_OLD.time := OLD.time;
            V_RECORD_OLD.last_access_time := OLD.last_access_time;
            V_RECORD_OLD.last_access_ecode := OLD.last_access_ecode;
            V_RECORD_OLD.nartext := OLD.nartext;
            V_RECORD_OLD.doccode := OLD.doccode;
            V_RECORD_OLD.scheme_docno := OLD.scheme_docno;
            V_RECORD_OLD.creation_dt := OLD.creation_dt;
            V_RECORD_OLD.release_status := OLD.release_status;
            V_RECORD_OLD.admsite_code_owner := OLD.admsite_code_owner;
            V_RECORD_OLD.release_time := OLD.release_time;
            V_RECORD_OLD.release_ecode := OLD.release_ecode;
            V_RECORD_OLD.isadvance := OLD.isadvance;
            V_RECORD_OLD.admou_code := OLD.admou_code;
            V_RECORD_OLD.temp_doccode := OLD.temp_doccode;
            V_RECORD_OLD.dataversion := OLD.dataversion;
            V_RECORD_OLD.entry_source := OLD.entry_source;
            V_RECORD_OLD.udfstring01 := OLD.udfstring01;
            V_RECORD_OLD.udfstring02 := OLD.udfstring02;
            V_RECORD_OLD.udfstring03 := OLD.udfstring03;
            V_RECORD_OLD.udfstring04 := OLD.udfstring04;
            V_RECORD_OLD.udfstring05 := OLD.udfstring05;
            V_RECORD_OLD.udfstring06 := OLD.udfstring06;
            V_RECORD_OLD.udfstring07 := OLD.udfstring07;
            V_RECORD_OLD.udfstring08 := OLD.udfstring08;
            V_RECORD_OLD.udfstring09 := OLD.udfstring09;
            V_RECORD_OLD.udfstring10 := OLD.udfstring10;
            V_RECORD_OLD.udfnum01 := OLD.udfnum01;
            V_RECORD_OLD.udfnum02 := OLD.udfnum02;
            V_RECORD_OLD.udfnum03 := OLD.udfnum03;
            V_RECORD_OLD.udfnum04 := OLD.udfnum04;
            V_RECORD_OLD.udfnum05 := OLD.udfnum05;
            V_RECORD_OLD.udfdate01 := OLD.udfdate01;
            V_RECORD_OLD.udfdate02 := OLD.udfdate02;
            V_RECORD_OLD.udfdate03 := OLD.udfdate03;
            V_RECORD_OLD.udfdate04 := OLD.udfdate04;
            V_RECORD_OLD.udfdate05 := OLD.udfdate05;
          END IF;  

    IF TG_OP = 'INSERT' THEN
	    V_REC_COUNT := 1;
        INSERT INTO AUD_FINVCHMAIN SELECT V_RECORD_NEW.*;
    END IF;

    IF TG_OP = 'UPDATE' THEN
	FOR I IN (
		SELECT 
		V_RECORD_OLD.isadvance,
                  V_RECORD_OLD.release_status,
                  V_RECORD_OLD.scheme_docno,
                  V_RECORD_OLD.nartext,
                  V_RECORD_OLD.camount,
                  V_RECORD_OLD.damount,
                  V_RECORD_OLD.glcode,
                  V_RECORD_OLD.refno,
                  V_RECORD_OLD.vchtype,
                  V_RECORD_OLD.vchdt
		EXCEPT
		SELECT 
		V_RECORD_NEW.isadvance,
                  V_RECORD_NEW.release_status,
                  V_RECORD_NEW.scheme_docno,
                  V_RECORD_NEW.nartext,
                  V_RECORD_NEW.camount,
                  V_RECORD_NEW.damount,
                  V_RECORD_NEW.glcode,
                  V_RECORD_NEW.refno,
                  V_RECORD_NEW.vchtype,
                  V_RECORD_NEW.vchdt
			 )
	LOOP
	  V_REC_COUNT := 1; 
		INSERT INTO AUD_FINVCHMAIN SELECT V_RECORD_OLD.*;
       INSERT INTO AUD_FINVCHMAIN SELECT V_RECORD_NEW.*;    
	END LOOP;   
    END IF;

    IF TG_OP = 'DELETE' THEN
		V_REC_COUNT := 1;
		INSERT INTO AUD_FINVCHMAIN SELECT V_RECORD_OLD.*;
    END IF;
	
	IF V_REC_COUNT >  0
	THEN
	   BEGIN
            INSERT INTO AUD_TRANSACTION (TRANSACTION_ID, TRANSACTION_DATE, LOGIN_USER, PROGRAM, MODULE_SHORTCODE, MODULE_TYPE)
            VALUES (V_TRNID,   current_date,V_LOGINUSER, V_PROGRAM, 'FinVoucher', 'Voucher');
       EXCEPTION WHEN unique_violation THEN
            NULL;
       END;  

       BEGIN  
             INSERT INTO AUD_TRANSACTION_TABLE (TRANSACTION_ID, TABLE_NAME)
             VALUES (V_TRNID,  'FINVCHMAIN');
       EXCEPTION WHEN unique_violation THEN
             NULL;
       END; 
	END IF;   
    

    IF TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    EXCEPTION
        WHEN others THEN
            CALL main.erraudit(SESSION_USER::text, 'T_FINVCHMAIN_AUD'::CHARACTER, SQLSTATE::text, SQLERRM);
			RAISE;
			RETURN NULL;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

