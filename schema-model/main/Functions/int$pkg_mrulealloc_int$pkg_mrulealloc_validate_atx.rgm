function "main"."int$pkg_mrulealloc_int$pkg_mrulealloc_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

        v_status    char(1);
        errmsg      varchar(200);
        errcode     text;
BEGIN
        -- start data length check
        -- site short name length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Length Validation','Site Short Name length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   length(site_short_name) > 25
        and     site_short_name is not null
        and     userid = p_userid;

        -- slid length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Length Validation','Supplier''s SLID length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   length(supplier_slid) > 25
        and     supplier_slid is not null
        and     userid = p_userid;

        -- article name length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Length Validation','Article Name length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   length(article_name) > 100
        and     article_name is not null
        and     userid = p_userid;

        -- margin rule name length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Length Validation','Margine Rule Name length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   length(margin_rule) > 100
        and     margin_rule is not null
        and     userid = p_userid;

        -- allocation update name length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Length Validation','Update Allocation length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   length(update_allocation) > 3
        and     update_allocation is not null
        and     userid = p_userid;

        -- start null check
        -- slid null
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Mandatory Validation','Supplier Id is Mandatory.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   supplier_slid is null
        and     userid = p_userid;

        -- article name null
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Mandatory Validation','Article Name is Mandatory.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   article_name is null
        and     userid = p_userid;

        -- margin rule name null
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Mandatory Validation','Margin Rule is Mandatory.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   margin_rule is null
        and     userid = p_userid;

        -- allocation update name length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Mandatory Validation','Update Allocation is Mandatory.',clock_timestamp()
        from    int$stg_mrulealloc s
        where   update_allocation is null
        and     userid = p_userid;

        -- start field value checking
        -- invalid site short name
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Invalid / Extinct Site Name',clock_timestamp()
        FROM int$stg_mrulealloc a
		LEFT OUTER JOIN (
							SELECT  upper(s.shrtname)  srtname
							from    admsite s

						   where   sitetype in ('MS-OO-CM','OS-OO-CM','MS-CO-CM','MS-CO-OM-TS')
							-- END REV : 004
							and     s.ext = 'N'
						) st ON (upper(a.site_short_name) = st.srtname)
		WHERE a.userid = p_userid  and st.srtname is null and a.site_short_name is not null;

        -- invalid slid
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation',' Invalid Supplier SLID',clock_timestamp()
        FROM int$stg_mrulealloc a
		LEFT OUTER JOIN (
							SELECT  upper(f.slid)  slid
							from    finsl   f,
									admcls  c
							where   f.clscode = c.clscode
							and     c.clstype <> 'D'
							and     f.ext     = 'N'
						) sl ON (upper(a.supplier_slid) = sl.slid)
		WHERE a.userid = p_userid  and sl.slid is null;

        -- invalid article name
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Invalid / Extinct Article Name',clock_timestamp()
        FROM int$stg_mrulealloc a
		LEFT OUTER JOIN (
							SELECT  upper(c.name)  artname
							from    invarticle  c
							where   c.ext = 'N'
						) ar ON (upper(a.article_name) = ar.artname)
		WHERE a.userid = p_userid  and ar.artname is null;

        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Inventoy Group of Article is Extinct',clock_timestamp()
        FROM int$stg_mrulealloc a
		LEFT OUTER JOIN (
							SELECT  upper(c.name)  artname
							from    invarticle  c,
									invgrp      g
							where   c.grpcode   = g.grpcode
							and     g.ext       = 'N'
						) ar ON (upper(a.article_name) = ar.artname)
		WHERE a.userid = p_userid  and ar.artname is null;

        -- invalid margin rule
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Invalid / Extinct Margin Rule Name',clock_timestamp()
        FROM int$stg_mrulealloc a
		LEFT OUTER JOIN (
							SELECT  upper(m.name)  rulname
							from    invmmrule   m
							where   m.ext   = 'N'
						) mr ON (upper(a.margin_rule) = mr.rulname)
		WHERE a.userid = p_userid  and mr.rulname is null;

        -- invalid update allocation
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Invalid value for Update Allocation',clock_timestamp()
        from    int$stg_mrulealloc a
        where   a.userid = p_userid
        and     upper(a.update_allocation) not in ('YES','NO');

        -- row level validation
        -- duplicate check
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Duplicate record with same Site - Supplier - Article Name exists in excel.',clock_timestamp()
        from    int$stg_mrulealloc a
        where   a.userid = p_userid
        and     a.site_short_name is not null
        and (a.supplier_slid,a.article_name) in (
                                        SELECT  tm.supplier_slid,tm.article_name
                                        from (
                                                    select  t.supplier_slid,t.article_name,t.rnk
                                                    from (
                                                                select  a1.supplier_slid,a1.article_name,rank() over (partition by a1.supplier_slid,a1.article_name order by a1.supplier_slid) rnk
                                                                from    int$stg_mrulealloc a1
                                                                where   a1.userid = p_userid
                                                                and     a1.site_short_name is null
                                                            ) t
                                                ) tm
                                        where   tm.rnk > 1
                                    );

        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Duplicate record with same Supplier and Article Name exists in excel.',clock_timestamp()
        from    int$stg_mrulealloc a
        where   a.userid = p_userid
        and     a.site_short_name is not null
        and (a.site_short_name,a.supplier_slid,a.article_name) in (
                        SELECT  tm.site_short_name,tm.supplier_slid,tm.article_name
                        from (
                                    select  t.site_short_name,t.supplier_slid,t.article_name,t.rnk
                                    from (
                                                select  a1.site_short_name,a1.supplier_slid,a1.article_name,rank() over (partition by a1.site_short_name,a1.supplier_slid,a1.article_name order by a1.site_short_name) rnk
                                                from    int$stg_mrulealloc a1
                                                where   a1.userid = p_userid
                                                and     a1.site_short_name is not null
                                            ) t
                                ) tm
                        where   tm.rnk > 1
                    );

        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Update Allocation is set to ''No'', unable to modify.',clock_timestamp()
        from    int$stg_mrulealloc  a,
                (
                    SELECT  upper(r.name)  rlname
                    from    invmmrule   r,
                            invmmrule_allocation ra
                    where   r.code = ra.invmmrule_code
                ) rl
        where   a.userid = p_userid
        and     upper(a.margin_rule) = rl.rlname
        and     upper(a.update_allocation) = 'NO'
        and     a.site_short_name is not null
        and     a.article_name is not null
        and     a.supplier_slid is not null;

        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'MRULEALLOC', userid, 'Data Validation','Update Allocation is set to ''No'', unable to modify.',clock_timestamp()
        from    int$stg_mrulealloc  a,
                (
                    SELECT  DISTINCT upper(r.name)  rlname
                    from    invmmrule   r,
                            invarticle_finsl_mm rf
                    where   r.code = rf.invmmrule_code
                ) rl
        where   a.userid = p_userid
        and     upper(a.margin_rule) = rl.rlname
        and     upper(a.update_allocation) = 'NO'
        and     a.article_name is not null
        and     a.supplier_slid is not null;

        ----COMMIT;

        -- check whether records are valid or not
        begin
            select  'S'
            into STRICT    v_status

            where   exists (
                            SELECT  'S'
                            from    int$error_log
                            where   userid = p_userid
                            );
            return('0');
        exception
            when no_data_found then
            return('1');
        end;
    exception
        when others then
            errcode := SQLSTATE;
            errmsg := sqlerrm;

            insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
            values (nextval('int$error_log_code'), 0, 'MRULEALLOC', p_userid, errcode, errmsg, clock_timestamp());
            --COMMIT;

            return('0');
    end;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

