function "main"."t_salordmain_aud$salordmain()" {
  text = """

DECLARE
    V_RECORD_OLD AUD_SALORDMAIN%ROWTYPE;
	V_RECORD_NEW AUD_SALORDMAIN%ROWTYPE;
    V_SID DOUBLE PRECISION;
    V_TRNID CHARACTER VARYING(50);
    V_ACTION CHARACTER VARYING(10);
    I RECORD;    
	V_AUDIT_USER CHARACTER VARYING (100);
	V_LOGINUSER  CHARACTER VARYING (100);
	V_PROGRAM    CHARACTER VARYING (100);
	V_REC_COUNT  BIGINT; 
   
BEGIN
       SELECT current_setting('audit.AUDIT_USER', true) INTO V_AUDIT_USER;
	   IF NULLIF(V_AUDIT_USER,'') IS NOT NULL THEN  
		   BEGIN
				SELECT FULLNAME
				INTO   STRICT V_LOGINUSER
				FROM   APPUSER
				WHERE  ID =  substring (V_AUDIT_USER,8,position(';' in V_AUDIT_USER)-8)::NUMERIC; 
		   EXCEPTION
				WHEN no_data_found
				THEN
					V_LOGINUSER := 'System';
			END;			
		ELSE
			V_LOGINUSER := 'SYSTEM';
		END IF;
	   
	   select application_name
	   INTO   V_PROGRAM
	   from pg_stat_activity where pid = pg_backend_pid();

       V_ACTION:=TG_OP;
	   
       SELECT TXID_CURRENT() INTO V_TRNID;
       
        IF TG_OP = 'INSERT' OR  TG_OP = 'UPDATE' THEN 
	   
           V_RECORD_NEW.ACTION := V_ACTION;
           V_RECORD_NEW.ACTION_SUBTYPE := 'NEW';
           V_RECORD_NEW.TRANSACTION_ID := V_TRNID::TEXT;		   
		   V_RECORD_NEW.ordcode := NEW.ordcode;
            V_RECORD_NEW.ordno := NEW.ordno;
            V_RECORD_NEW.orddt := NEW.orddt;
            V_RECORD_NEW.pcode := NEW.pcode;
            V_RECORD_NEW.docno := NEW.docno;
            V_RECORD_NEW.docdt := NEW.docdt;
            V_RECORD_NEW.agcode := NEW.agcode;
            V_RECORD_NEW.agrate := NEW.agrate;
            V_RECORD_NEW.trpcode := NEW.trpcode;
            V_RECORD_NEW.duedt := NEW.duedt;
            V_RECORD_NEW.stat := NEW.stat;
            V_RECORD_NEW.authorcode := NEW.authorcode;
            V_RECORD_NEW.rem := NEW.rem;
            V_RECORD_NEW.ycode := NEW.ycode;
            V_RECORD_NEW.ext := NEW.ext;
            V_RECORD_NEW.ecode := NEW.ecode;
            V_RECORD_NEW.time := NEW.time;
            V_RECORD_NEW.saletype := NEW.saletype;
            V_RECORD_NEW.doccode := NEW.doccode;
            V_RECORD_NEW.scheme_docno := NEW.scheme_docno;
            V_RECORD_NEW.admou_code := NEW.admou_code;
            V_RECORD_NEW.admsite_code := NEW.admsite_code;
            V_RECORD_NEW.pricetype := NEW.pricetype;
            V_RECORD_NEW.pricelistcode := NEW.pricelistcode;
            V_RECORD_NEW.discount_factor := NEW.discount_factor;
            V_RECORD_NEW.price_roundoff := NEW.price_roundoff;
            V_RECORD_NEW.roundoff_limit := NEW.roundoff_limit;
            V_RECORD_NEW.admsite_code_owner := NEW.admsite_code_owner;
            V_RECORD_NEW.incl_vat_in_dist := NEW.incl_vat_in_dist;
            V_RECORD_NEW.discount_mode := NEW.discount_mode;
            V_RECORD_NEW.discount_basis := NEW.discount_basis;
            V_RECORD_NEW.saltermcode := NEW.saltermcode;
            V_RECORD_NEW.grsamt := NEW.grsamt;
            V_RECORD_NEW.chgamt := NEW.chgamt;
            V_RECORD_NEW.netamt := NEW.netamt;
            V_RECORD_NEW.saltradegrp_code := NEW.saltradegrp_code;
            V_RECORD_NEW.formcode := NEW.formcode;
            V_RECORD_NEW.psite_posorder_code := NEW.psite_posorder_code;
            V_RECORD_NEW.pos_remarks := NEW.pos_remarks;
            V_RECORD_NEW.cmptax_code_basis := NEW.cmptax_code_basis;
            V_RECORD_NEW.chl_orderid := NEW.chl_orderid;
            V_RECORD_NEW.chl_master_chlcode := NEW.chl_master_chlcode;
            V_RECORD_NEW.authorizationtime := NEW.authorizationtime;
            V_RECORD_NEW.last_access_ecode := NEW.last_access_ecode;
            V_RECORD_NEW.last_access_time := NEW.last_access_time;
            V_RECORD_NEW.ishold := NEW.ishold;
            V_RECORD_NEW.heldby := NEW.heldby;
            V_RECORD_NEW.heldon := NEW.heldon;
            V_RECORD_NEW.reserve_inv := NEW.reserve_inv;
            V_RECORD_NEW.dataversion := NEW.dataversion;
            V_RECORD_NEW.udfstring01 := NEW.udfstring01;
            V_RECORD_NEW.udfstring02 := NEW.udfstring02;
            V_RECORD_NEW.udfstring03 := NEW.udfstring03;
            V_RECORD_NEW.udfstring04 := NEW.udfstring04;
            V_RECORD_NEW.udfstring05 := NEW.udfstring05;
            V_RECORD_NEW.udfstring06 := NEW.udfstring06;
            V_RECORD_NEW.udfstring07 := NEW.udfstring07;
            V_RECORD_NEW.udfstring08 := NEW.udfstring08;
            V_RECORD_NEW.udfstring09 := NEW.udfstring09;
            V_RECORD_NEW.udfstring10 := NEW.udfstring10;
            V_RECORD_NEW.udfnum01 := NEW.udfnum01;
            V_RECORD_NEW.udfnum02 := NEW.udfnum02;
            V_RECORD_NEW.udfnum03 := NEW.udfnum03;
            V_RECORD_NEW.udfnum04 := NEW.udfnum04;
            V_RECORD_NEW.udfnum05 := NEW.udfnum05;
            V_RECORD_NEW.udfdate01 := NEW.udfdate01;
            V_RECORD_NEW.udfdate02 := NEW.udfdate02;
            V_RECORD_NEW.udfdate03 := NEW.udfdate03;
            V_RECORD_NEW.udfdate04 := NEW.udfdate04;
            V_RECORD_NEW.udfdate05 := NEW.udfdate05;
            V_RECORD_NEW.entry_source := NEW.entry_source;
            V_RECORD_NEW.allowpartialreservation := NEW.allowpartialreservation;
            V_RECORD_NEW.intgorderid := NEW.intgorderid;
            V_RECORD_NEW.channel_code := NEW.channel_code;
          END IF;  
            
         IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN 
	   
            V_RECORD_OLD.ACTION := V_ACTION;
            V_RECORD_OLD.ACTION_SUBTYPE := 'OLD';
            V_RECORD_OLD.TRANSACTION_ID := V_TRNID::TEXT;			
			V_RECORD_OLD.ordcode := OLD.ordcode;
            V_RECORD_OLD.ordno := OLD.ordno;
            V_RECORD_OLD.orddt := OLD.orddt;
            V_RECORD_OLD.pcode := OLD.pcode;
            V_RECORD_OLD.docno := OLD.docno;
            V_RECORD_OLD.docdt := OLD.docdt;
            V_RECORD_OLD.agcode := OLD.agcode;
            V_RECORD_OLD.agrate := OLD.agrate;
            V_RECORD_OLD.trpcode := OLD.trpcode;
            V_RECORD_OLD.duedt := OLD.duedt;
            V_RECORD_OLD.stat := OLD.stat;
            V_RECORD_OLD.authorcode := OLD.authorcode;
            V_RECORD_OLD.rem := OLD.rem;
            V_RECORD_OLD.ycode := OLD.ycode;
            V_RECORD_OLD.ext := OLD.ext;
            V_RECORD_OLD.ecode := OLD.ecode;
            V_RECORD_OLD.time := OLD.time;
            V_RECORD_OLD.saletype := OLD.saletype;
            V_RECORD_OLD.doccode := OLD.doccode;
            V_RECORD_OLD.scheme_docno := OLD.scheme_docno;
            V_RECORD_OLD.admou_code := OLD.admou_code;
            V_RECORD_OLD.admsite_code := OLD.admsite_code;
            V_RECORD_OLD.pricetype := OLD.pricetype;
            V_RECORD_OLD.pricelistcode := OLD.pricelistcode;
            V_RECORD_OLD.discount_factor := OLD.discount_factor;
            V_RECORD_OLD.price_roundoff := OLD.price_roundoff;
            V_RECORD_OLD.roundoff_limit := OLD.roundoff_limit;
            V_RECORD_OLD.admsite_code_owner := OLD.admsite_code_owner;
            V_RECORD_OLD.incl_vat_in_dist := OLD.incl_vat_in_dist;
            V_RECORD_OLD.discount_mode := OLD.discount_mode;
            V_RECORD_OLD.discount_basis := OLD.discount_basis;
            V_RECORD_OLD.saltermcode := OLD.saltermcode;
            V_RECORD_OLD.grsamt := OLD.grsamt;
            V_RECORD_OLD.chgamt := OLD.chgamt;
            V_RECORD_OLD.netamt := OLD.netamt;
            V_RECORD_OLD.saltradegrp_code := OLD.saltradegrp_code;
            V_RECORD_OLD.formcode := OLD.formcode;
            V_RECORD_OLD.psite_posorder_code := OLD.psite_posorder_code;
            V_RECORD_OLD.pos_remarks := OLD.pos_remarks;
            V_RECORD_OLD.cmptax_code_basis := OLD.cmptax_code_basis;
            V_RECORD_OLD.chl_orderid := OLD.chl_orderid;
            V_RECORD_OLD.chl_master_chlcode := OLD.chl_master_chlcode;
            V_RECORD_OLD.authorizationtime := OLD.authorizationtime;
            V_RECORD_OLD.last_access_ecode := OLD.last_access_ecode;
            V_RECORD_OLD.last_access_time := OLD.last_access_time;
            V_RECORD_OLD.ishold := OLD.ishold;
            V_RECORD_OLD.heldby := OLD.heldby;
            V_RECORD_OLD.heldon := OLD.heldon;
            V_RECORD_OLD.reserve_inv := OLD.reserve_inv;
            V_RECORD_OLD.dataversion := OLD.dataversion;
            V_RECORD_OLD.udfstring01 := OLD.udfstring01;
            V_RECORD_OLD.udfstring02 := OLD.udfstring02;
            V_RECORD_OLD.udfstring03 := OLD.udfstring03;
            V_RECORD_OLD.udfstring04 := OLD.udfstring04;
            V_RECORD_OLD.udfstring05 := OLD.udfstring05;
            V_RECORD_OLD.udfstring06 := OLD.udfstring06;
            V_RECORD_OLD.udfstring07 := OLD.udfstring07;
            V_RECORD_OLD.udfstring08 := OLD.udfstring08;
            V_RECORD_OLD.udfstring09 := OLD.udfstring09;
            V_RECORD_OLD.udfstring10 := OLD.udfstring10;
            V_RECORD_OLD.udfnum01 := OLD.udfnum01;
            V_RECORD_OLD.udfnum02 := OLD.udfnum02;
            V_RECORD_OLD.udfnum03 := OLD.udfnum03;
            V_RECORD_OLD.udfnum04 := OLD.udfnum04;
            V_RECORD_OLD.udfnum05 := OLD.udfnum05;
            V_RECORD_OLD.udfdate01 := OLD.udfdate01;
            V_RECORD_OLD.udfdate02 := OLD.udfdate02;
            V_RECORD_OLD.udfdate03 := OLD.udfdate03;
            V_RECORD_OLD.udfdate04 := OLD.udfdate04;
            V_RECORD_OLD.udfdate05 := OLD.udfdate05;
            V_RECORD_OLD.entry_source := OLD.entry_source;
            V_RECORD_OLD.allowpartialreservation := OLD.allowpartialreservation;
            V_RECORD_OLD.intgorderid := OLD.intgorderid;
            V_RECORD_OLD.channel_code := OLD.channel_code;
          END IF;  

    IF TG_OP = 'INSERT' THEN
	    V_REC_COUNT := 1;
        INSERT INTO AUD_SALORDMAIN SELECT V_RECORD_NEW.*;
    END IF;

    IF TG_OP = 'UPDATE' THEN
	FOR I IN (
		SELECT 
		V_RECORD_OLD.reserve_inv,
                  V_RECORD_OLD.ishold,
                  V_RECORD_OLD.authorizationtime,
                  V_RECORD_OLD.pos_remarks,
                  V_RECORD_OLD.psite_posorder_code,
                  V_RECORD_OLD.formcode,
                  V_RECORD_OLD.saltradegrp_code,
                  V_RECORD_OLD.netamt,
                  V_RECORD_OLD.chgamt,
                  V_RECORD_OLD.grsamt,
                  V_RECORD_OLD.saltermcode,
                  V_RECORD_OLD.pricelistcode,
                  V_RECORD_OLD.admsite_code,
                  V_RECORD_OLD.scheme_docno,
                  V_RECORD_OLD.rem,
                  V_RECORD_OLD.duedt,
                  V_RECORD_OLD.agcode,
                  V_RECORD_OLD.docdt,
                  V_RECORD_OLD.docno,
                  V_RECORD_OLD.pcode,
                  V_RECORD_OLD.orddt,
                  V_RECORD_OLD.ordno
		EXCEPT
		SELECT 
		V_RECORD_NEW.reserve_inv,
                  V_RECORD_NEW.ishold,
                  V_RECORD_NEW.authorizationtime,
                  V_RECORD_NEW.pos_remarks,
                  V_RECORD_NEW.psite_posorder_code,
                  V_RECORD_NEW.formcode,
                  V_RECORD_NEW.saltradegrp_code,
                  V_RECORD_NEW.netamt,
                  V_RECORD_NEW.chgamt,
                  V_RECORD_NEW.grsamt,
                  V_RECORD_NEW.saltermcode,
                  V_RECORD_NEW.pricelistcode,
                  V_RECORD_NEW.admsite_code,
                  V_RECORD_NEW.scheme_docno,
                  V_RECORD_NEW.rem,
                  V_RECORD_NEW.duedt,
                  V_RECORD_NEW.agcode,
                  V_RECORD_NEW.docdt,
                  V_RECORD_NEW.docno,
                  V_RECORD_NEW.pcode,
                  V_RECORD_NEW.orddt,
                  V_RECORD_NEW.ordno
			 )
	LOOP
	  V_REC_COUNT := 1; 
		INSERT INTO AUD_SALORDMAIN SELECT V_RECORD_OLD.*;
       INSERT INTO AUD_SALORDMAIN SELECT V_RECORD_NEW.*;    
	END LOOP;   
    END IF;

    IF TG_OP = 'DELETE' THEN
		V_REC_COUNT := 1;
		INSERT INTO AUD_SALORDMAIN SELECT V_RECORD_OLD.*;
    END IF;
	
	IF V_REC_COUNT >  0
	THEN
	   BEGIN
            INSERT INTO AUD_TRANSACTION (TRANSACTION_ID, TRANSACTION_DATE, LOGIN_USER, PROGRAM, MODULE_SHORTCODE, MODULE_TYPE)
            VALUES (V_TRNID,   current_date,V_LOGINUSER, V_PROGRAM, 'SaleOrder', 'Sales/Transfer Order');
       EXCEPTION WHEN unique_violation THEN
            NULL;
       END;  

       BEGIN  
             INSERT INTO AUD_TRANSACTION_TABLE (TRANSACTION_ID, TABLE_NAME)
             VALUES (V_TRNID,  'SALORDMAIN');
       EXCEPTION WHEN unique_violation THEN
             NULL;
       END; 
	END IF;   
    

    IF TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    EXCEPTION
        WHEN others THEN
            CALL main.erraudit(SESSION_USER::text, 'T_SALORDMAIN_AUD'::CHARACTER, SQLSTATE::text, SQLERRM);
			RAISE;
			RETURN NULL;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

