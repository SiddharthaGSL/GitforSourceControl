function "main"."trigger_fct_t_prdjobbom()" {
  text = """

/********************************************************************************************************************
   NAME: T_PRDJOBBOM
   PURPOSE:
   REVISIONS:
   No.          Date            Author      Description
   ---------    ----------      --------    -----------------------------------------------------------------
   REV : 000    16-JUL-2015     MANASH      (BUG ID : XXX)  Generic Production release.
   REV : 001    19/08/2020      MOUSUMI      (BUG ID : MIGRATION)  Migration Related Changes
********************************************************************************************************************/
DECLARE
   V_PCODE             PRDJOBMAIN.PCODE%TYPE;
   V_PRCODE            PRDJOBMAIN.PRCODE%TYPE;
   V_MODE              varchar(10);
   V_ADMSITE_CODE      PRDJOBMAIN.ADMSITE_CODE%TYPE;
   V_JOBTYPE           PRDJOBMAIN.JOBTYPE%TYPE;
   V_JOB_DATE          PRDJOBMAIN.JOB_DATE%TYPE;
   V_PRV_PRCODE        PRDJRCMAIN.PRCODE%TYPE;
   V_PRV_OPSEQ         PRDLOTOPERATION.OPERATION_SEQ%TYPE;
   V_ORD_QTY           PRDJOBDET.QTY%TYPE := 0;
   V_CUR_OP_SEQ        PRDJOBDET.OPERATION_SEQ%TYPE;
   V_CONSIDER_IN_WIP   PRDJOBDET.CONSIDER_IN_WIP%TYPE;
   V_A2F_QTY           PRDLOTOPERATION.AVAILABLE_TO_FORWARD%TYPE;
   V_ASSEMBLY_QTY      PRDJOBBOM.ASSEMBLY_QTY%TYPE;
   -- START REV : 001
   V_ENTRY_SOURCE      varchar(25) := NULL;
   V_SID               bigint;
   V_PROGRAM           varchar(50);
-- END REV : 001
BEGIN
  BEGIN
   BEGIN
      SELECT PCODE,
             PRCODE,
             ADMSITE_CODE,
             JOBTYPE,
             JOB_DATE,
             ENTRY_SOURCE
        INTO STRICT V_PCODE,
             V_PRCODE,
             V_ADMSITE_CODE,
             V_JOBTYPE,
             V_JOB_DATE,
             V_ENTRY_SOURCE
        FROM PRDJOBMAIN
       WHERE CODE = coalesce(NEW.JOBCODE, OLD.JOBCODE);
   EXCEPTION
      WHEN OTHERS
      THEN
         V_PCODE := 0;
         V_PRCODE := 0;
         V_ADMSITE_CODE := NULL;
   END;

   IF V_JOBTYPE NOT IN ('AS', 'AN')
   THEN
      BEGIN
         SELECT OPERATION_SEQ, coalesce(QTY, 0), CONSIDER_IN_WIP
           INTO STRICT V_CUR_OP_SEQ, V_ORD_QTY, V_CONSIDER_IN_WIP
           FROM PRDJOBDET D
          WHERE CODE = coalesce(NEW.PRDJOBDET_CODE, OLD.PRDJOBDET_CODE);
      EXCEPTION
         WHEN no_data_found
         THEN
            V_CUR_OP_SEQ := NULL;
            V_ORD_QTY := 0;
            V_CONSIDER_IN_WIP := 'Y';
      END;

      IF     coalesce(NEW.OPERATION_SEQ, OLD.OPERATION_SEQ) > 1
         AND coalesce(NEW.ASSEMBLY_ICODE, OLD.ASSEMBLY_ICODE) =
                coalesce(NEW.COMPONENT_ICODE, OLD.COMPONENT_ICODE)
      THEN
         V_PRV_OPSEQ :=
            DB_PKG_PRODUCTION$GET_PRV_OPSEQ(
               coalesce(NEW.LOTCODE, OLD.LOTCODE),
               coalesce(NEW.ASSEMBLY_ICODE, OLD.ASSEMBLY_ICODE),
               coalesce(NEW.ASS_SAITEM_CODE, OLD.ASS_SAITEM_CODE),
               coalesce(NEW.COM_SAITEM_CODE, OLD.COM_SAITEM_CODE),
               coalesce(NEW.OPERATION_SEQ, OLD.OPERATION_SEQ));

         V_PRV_PRCODE :=
            DB_PKG_PRODUCTION$GET_PRV_PRCODE(
               coalesce(NEW.LOTCODE, OLD.LOTCODE),
               coalesce(NEW.ASSEMBLY_ICODE, OLD.ASSEMBLY_ICODE),
               coalesce(NEW.ASS_SAITEM_CODE, OLD.ASS_SAITEM_CODE),
               coalesce(NEW.COM_SAITEM_CODE, OLD.COM_SAITEM_CODE),
               coalesce(NEW.OPERATION_SEQ, OLD.OPERATION_SEQ));
      END IF;

      IF TG_OP = 'INSERT'
      THEN
         V_MODE := 'INSERTING';
      ELSIF TG_OP = 'UPDATE'
      THEN
         V_MODE := 'UPDATING';
      ELSIF TG_OP = 'DELETE'
      THEN
         V_MODE := 'DELETING';
      END IF;

      -- START REV : 001
      IF     coalesce(V_ENTRY_SOURCE, 'XX') <> 'WEB'
AND not coalesce(V_PROGRAM,'XX') ILIKE '%w3wp.exe%'
      THEN
         -- END REV : 001
         IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE')
            AND (NEW.ASSEMBLY_ICODE = NEW.COMPONENT_ICODE)
            AND NEW.ASSEMBLY_ICODE IS NOT NULL
         THEN
            --V_ASSEMBLY_QTY := ROUND((NVL(:NEW.ASSEMBLY_QTY,0) * NVL(:NEW.BOM_QTY,0)),3);
            --V_A2F_QTY := DB_PKG_PRODUCTION.CALC_AVAILABLE_TO_FOROWARD_QTY(:NEW.LOTCODE,:NEW.ASSEMBLY_ICODE,V_PRV_OPSEQ,:NEW.ASS_SAITEM_CODE,:NEW.COM_SAITEM_CODE,V_ASSEMBLY_QTY);
            V_A2F_QTY :=
               ROUND ( (coalesce(NEW.ASSEMBLY_QTY, 0) * coalesce(NEW.BOM_QTY, 0)),
                      3);

            UPDATE PRDLOTOPERATION
               SET AVAILABLE_TO_FORWARD =
                      coalesce(AVAILABLE_TO_FORWARD, 0) - coalesce(V_A2F_QTY, 0)
             WHERE     LOTCODE = NEW.LOTCODE
                   AND ASSEMBLY_ICODE = NEW.ASSEMBLY_ICODE
                   AND coalesce(ASS_SAITEM_CODE, 0) =
                          coalesce(NEW.COM_SAITEM_CODE,
                               coalesce(ASS_SAITEM_CODE, 0))
                   AND OPERATION_SEQ = V_PRV_OPSEQ
                   AND PRCODE = V_PRV_PRCODE
                   AND CONSIDER_IN_WIP <> 'N';
         END IF;

         IF (TG_OP = 'DELETE' OR TG_OP = 'UPDATE')
            AND (OLD.ASSEMBLY_ICODE = OLD.COMPONENT_ICODE)
            AND OLD.ASSEMBLY_ICODE IS NOT NULL
         THEN
            --V_ASSEMBLY_QTY := ROUND((NVL(:OLD.ASSEMBLY_QTY,0) * NVL(:OLD.BOM_QTY,0)),3);
            --V_A2F_QTY := DB_PKG_PRODUCTION.CALC_AVAILABLE_TO_FOROWARD_QTY(:OLD.LOTCODE,:OLD.ASSEMBLY_ICODE,V_PRV_OPSEQ,:OLD.ASS_SAITEM_CODE,V_ASSEMBLY_QTY);
            V_A2F_QTY :=
               ROUND ( (coalesce(OLD.ASSEMBLY_QTY, 0) * coalesce(OLD.BOM_QTY, 0)),
                      3);

            UPDATE PRDLOTOPERATION
               SET AVAILABLE_TO_FORWARD =
                      coalesce(AVAILABLE_TO_FORWARD, 0) + coalesce(V_A2F_QTY, 0)
             WHERE     LOTCODE = OLD.LOTCODE
                   AND ASSEMBLY_ICODE = OLD.ASSEMBLY_ICODE
                   AND coalesce(ASS_SAITEM_CODE, 0) =
                          coalesce(OLD.COM_SAITEM_CODE,
                               coalesce(ASS_SAITEM_CODE, 0))
                   AND OPERATION_SEQ = V_PRV_OPSEQ
                   AND PRCODE = V_PRV_PRCODE
                   AND CONSIDER_IN_WIP <> 'N';
         END IF;
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      CALL ERRAUDIT(USER,
                'T_PRDJOBBOM',
                SQLSTATE::varchar,
                SQLERRM);
      RAISE EXCEPTION '%', 'ERROR ENCOUNTERED  ' || SQLSTATE::varchar || '  ' || SQLERRM USING ERRCODE = '45100';
  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

END
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

