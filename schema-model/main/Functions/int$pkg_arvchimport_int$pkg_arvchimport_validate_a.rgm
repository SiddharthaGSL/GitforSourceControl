function "main"."int$pkg_arvchimport_int$pkg_arvchimport_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      v_status   char(1);
      errmsg     varchar(200);
      errcode    bigint;
      v_date     varchar(25);
      g_mark     varchar(100);
      v_oucode   bigint;
BEGIN
      -- ************************ Length checking Start *****************************************
      g_mark := 'V1';

      -- scheme_doc_format length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'Scheme Doc Format length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.scheme_doc_format) > 100 AND a.userid = p_userid;

      g_mark := 'V2';

      -- scheme_docno length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'Scheme Doc No length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.scheme_docno) > 25 AND a.userid = p_userid;

      g_mark := 'V3';

      -- voucher_ref length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'Voucher Ref length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.voucher_ref) > 100 AND a.userid = p_userid;

      g_mark := 'V5';

      -- voucher_remarks length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'Voucher Remarks length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.voucher_remarks) > 500 AND a.userid = p_userid;

      g_mark := 'V7';

      -- sl_slid length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'SL ID length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.sl_slid) > 25 AND a.userid = p_userid;

      g_mark := 'V8';

      -- amount length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'Amount length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.amount::TEXT) > 22 AND a.userid = p_userid;

      g_mark := 'V9';

      -- ref_admsite_shrtname length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'Ref Admsite Shrtname length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.ref_admsite_shrtname) > 25 AND a.userid = p_userid;

      g_mark := 'V10';

      -- ledger_nartext length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'Ledger Nartext length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.ledger_nartext) > 500 AND a.userid = p_userid;

      g_mark := 'V11';

      -- chq_no length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'CHQ No length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.INSTRUMENT_NO) > 25 AND a.userid = p_userid;

      g_mark := 'V12';

      -- drawn on length
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Length Validation',
                'Drawn On length is higher than it''s defined data length.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE LENGTH(a.drawn_on) > 100 AND a.userid = p_userid;

      -- ************************ Length checking End *****************************************
      -- ************************ Mandatory checking Start ************************************
      g_mark := 'V14';

      -- vchdt is null
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Mandatory Validation',
                'Column is Mandatory for voucher date',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE vchdt IS NULL AND a.userid = p_userid;

      g_mark := 'V15';

      -- scheme_doc_format is null
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Mandatory Validation',
                'Column is Mandatory for document scheme format',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE scheme_doc_format IS NULL AND a.userid = p_userid;

      g_mark := 'V16';

      -- bank_cash_glname is null
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Mandatory Validation',
                'Column is Mandatory header GL name',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE bank_cash_glname IS NULL AND a.userid = p_userid;

      g_mark := 'V17';

      -- gl_name is null
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Mandatory Validation',
                'Sub-ledger-SLID is mandatory.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE SL_SLID IS NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Mandatory Validation',
                'Reference Site Short Name can not be blank.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE REF_ADMSITE_SHRTNAME IS NULL AND a.userid = p_userid;

      -- ************************ Mandatory checking End ************************************
      -- ************************ Data Validation Start *************************************
      -- vchdt > sysdate
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                   'Future Voucher Date is Invalid ('
                || TO_CHAR(vchdt, 'dd/mm/rrrr')
                || ')',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE date_trunc('day', vchdt) > date_trunc('day', clock_timestamp()) AND a.userid = p_userid;

      -- VCHDT checking for the following -
      -- Year extinct,
      DECLARE
         v_dtfr           timestamp;
         v_dtto           timestamp;
         v_yr_ext         char(1);
         v_day_status     char(1);
         v_locdays        hrdemp.locdays%TYPE;
         v_last_dt_lock   char(1);

         c1 CURSOR FOR
            SELECT DISTINCT date_trunc('day', vchdt) vchdt
            FROM int$stg_ARVCHIMPORT

              where userid = p_userid;
            -- end rev : 007
      BEGIN
         FOR i IN c1
         LOOP
            -- Ycode related checking, min trans date checking, lockday checking, Year exists or not, Day status related checking
            BEGIN
               SELECT ext, dtfr, dtto
                 INTO STRICT v_yr_ext, v_dtfr, v_dtto
                 FROM admyear
                WHERE i.vchdt BETWEEN dtfr AND dtto;

               IF coalesce(v_yr_ext, 'N') = 'Y'
               THEN
                  INSERT INTO int$error_log(code,
                                             lineno,
                                             classname,
                                             userid,
                                             errortype,
                                             errordesc,
                                             createdon)
                     SELECT nextval('int$error_log_code'),
                            lineno,
                            'ARVCHIMPORT',
                            userid,
                            'Data Validation',
                            'Year of the Date is not open / extinct',
                            clock_timestamp()
                       FROM int$stg_ARVCHIMPORT
                      WHERE date_trunc('day', vchdt) = i.vchdt AND userid = p_userid;
               ELSE
                  IF i.vchdt < v_dtfr
                  THEN
                     INSERT INTO int$error_log(code,
                                                lineno,
                                                classname,
                                                userid,
                                                errortype,
                                                errordesc,
                                                createdon)
                        SELECT nextval('int$error_log_code'),
                               lineno,
                               'ARVCHIMPORT',
                               userid,
                               'Data Validation',
                                  'Date can not be less than start date of current accounting year date '
                               || TO_CHAR(v_dtfr, 'DD/MM/YYYY'),
                               clock_timestamp()
                          FROM int$stg_ARVCHIMPORT
                         WHERE date_trunc('day', vchdt) = i.vchdt AND userid = p_userid;
                  ELSE
                     BEGIN
                        SELECT locdays, allow_last_fy_day_mode
                          INTO STRICT v_locdays, v_last_dt_lock
                          FROM hrdemp
                         WHERE ecode = p_userid;

                        IF v_locdays IS NOT NULL
                        THEN
                           IF coalesce(
                                 db_fun_chk_last_dt_lock(v_last_dt_lock,
                                                          i.vchdt),
                                 0) = 0
                           THEN
                              /* INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
                                  SELECT int$error_log_code.NEXTVAL, lineno, 'ARVCHIMPORT', userid, 'Data Validation',
                                         'user do not have priviledge to igonre lock days on the last day of accounting year', SYSDATE
                                  FROM   int$stg_ARVCHIMPORT
                                  WHERE  TRUNC (vchdt) = i.vchdt
                                  AND    userid = p_userid;
                               */
                              -- ELSE
                              IF date_trunc('day', i.vchdt) <
                                    (current_date - v_locdays::integer)
                              THEN
                                 INSERT INTO int$error_log(code,
                                                            lineno,
                                                            classname,
                                                            userid,
                                                            errortype,
                                                            errordesc,
                                                            createdon)
                                    SELECT nextval('int$error_log_code'),
                                           lineno,
                                           'ARVCHIMPORT',
                                           userid,
                                           'Data Validation',
                                           'User lock days logic fails',
                                           clock_timestamp()
                                      FROM int$stg_ARVCHIMPORT
                                     WHERE     date_trunc('day', vchdt) = i.vchdt
                                           AND userid = p_userid;
                              END IF;
                           END IF;
                        END IF;
                     EXCEPTION
                        WHEN no_data_found
                        THEN
                           INSERT INTO int$error_log(code,
                                                      lineno,
                                                      classname,
                                                      userid,
                                                      errortype,
                                                      errordesc,
                                                      createdon)
                              SELECT nextval('int$error_log_code'),
                                     lineno,
                                     'ARVCHIMPORT',
                                     userid,
                                     'Data Validation',
                                     'User not exists',
                                     clock_timestamp()
                                FROM int$stg_ARVCHIMPORT
                               WHERE     date_trunc('day', vchdt) = i.vchdt
                                     AND userid = p_userid;
                     END;
                  END IF;
               END IF;
            EXCEPTION
               WHEN no_data_found
               THEN
                  INSERT INTO int$error_log(code,
                                             lineno,
                                             classname,
                                             userid,
                                             errortype,
                                             errordesc,
                                             createdon)
                     SELECT nextval('int$error_log_code'),
                            lineno,
                            'ARVCHIMPORT',
                            userid,
                            'Data Validation',
                            'Year not exists',
                            clock_timestamp()
                       FROM int$stg_ARVCHIMPORT
                      WHERE date_trunc('day', vchdt) = i.vchdt AND userid = p_userid;
            END;

            INSERT INTO int$error_log(code,
                                       lineno,
                                       classname,
                                       userid,
                                       errortype,
                                       errordesc,
                                       createdon)
               SELECT nextval('int$error_log_code'),
                      0,
                      'ARVCHIMPORT',
                      p_userid,
                      'Mandatory Validation',
                      'Finance Month is Closed no entry is possible for the date',
                      clock_timestamp()
                 FROM admmonth a, admou_month b
                WHERE     a.mcode = b.admmonth_code
                      AND i.vchdt BETWEEN dtfr AND dtto
                      AND b.admou_code = p_connect_ou
                      AND b.fin_month_status = 'C';
         END LOOP;
      END;

      -- scheme_doc_format chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Invalid Scheme Doc format.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE     UPPER(a.scheme_doc_format) NOT IN
                       (SELECT UPPER(a.docname)
                          FROM admdocscheme a, admmenu_docscheme b
                         WHERE     a.doccode = b.doccode
                               --AND b.menucode = 911
                               --START REV : 005
                               AND    b.mdmenushortcode = 'FinanceARVoucher'
                               --END REV : 005
                               AND coalesce(a.ext, 'N') = 'N'
                               AND (   0 =
                                          (SELECT COUNT(*)
                                             FROM admdocscheme    c,
                                                  admou_docscheme d
                                            WHERE     c.doccode = d.doccode
                                                  AND d.admsite_code =
                                                         p_connect_site
                                                  AND coalesce(c.ext, 'N') = 'N')
                                    OR a.doccode IN (SELECT e.doccode
                                             FROM admdocscheme    e,
                                                  admou_docscheme f
                                            WHERE     e.doccode = f.doccode
                                                  AND f.admsite_code =
                                                         p_connect_site
                                                  AND coalesce(e.ext, 'N') = 'N')))
                AND a.userid = p_userid;

      -- scheme_docno chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Scheme Doc No is missing for "Manual" type document scheme format',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE (    UPPER(a.scheme_doc_format) IN ('MANUAL (GENERAL)', 'MANUAL (EXCISE)')
                     AND a.scheme_docno IS NULL)
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Scheme Doc No should be null, as it would be auto generated',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE (    UPPER(a.scheme_doc_format) NOT IN ('MANUAL (GENERAL)', 'MANUAL (EXCISE)')
                     AND a.scheme_docno IS NOT NULL)
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                LINENO,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                'Scheme Doc No already exists',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE     a.scheme_docno IS NOT NULL
                AND UPPER(a.scheme_docno) IN (SELECT UPPER(V.scheme_docno)
                          FROM finvchmain V
                         WHERE ADMOU_CODE = P_CONNECT_OU)
                AND userid = p_userid;

      g_mark := 'V25';

      -- bank cash glname
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Invalid Bank / Cash Ledger.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT
          WHERE     UPPER(bank_cash_glname) NOT IN (SELECT UPPER(g.glname) glname
                          FROM fingl g
                         WHERE     g.srctype IN ('B', 'C')
                               AND g.admsite_code_owner IS NOT NULL
                               AND g.admsite_code_owner = p_connect_site
                               AND g.ext = 'N')
                AND userid = p_userid;

      g_mark := 'V30';

      -- invalid sl_slid, Checking for SLID is present in finsl or not
      -- case - 0
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Sub-ledger  SLID is extinct / Invalid SLID',
                clock_timestamp()
           FROM int$stg_arvchimport a LEFT OUTER JOIN finsl sl
		   ON (UPPER(a.sl_slid) = UPPER(sL.SLID))
WHERE (sL.SLID IS NULL OR SL.EXT = 'Y') AND a.sl_slid IS NOT NULL AND userid = p_userid;

       -- start rev : 008
       -- validating OU tagging
       INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Sub-ledger SLID exist in other than Connected OU.',
                clock_timestamp()
           FROM int$stg_arvchimport a LEFT OUTER JOIN v_arap_subledger sl
		   ON (UPPER(a.sl_slid) = UPPER(sL.SLID))
WHERE a.sl_slid IS NOT NULL and SL.admou_code is not null and SL.admou_code <> p_connect_ou and (SELECT count(*) from v_arap_subledger where upper(slid) = upper(a.sl_slid) and admou_code = p_connect_ou) = 0 AND userid = p_userid;
       -- end rev : 008
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Ledger is extinct for the given Sub Ledger SLID/Ledger is not AR/AP type by Nature.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT
          WHERE     UPPER(sl_slid) NOT IN (SELECT UPPER(slid)
                          FROM finsl, fingl
                         WHERE     finsl.GLCODE = FINGL.GLCODE
                               AND FINGL.EXT = 'N'
                               AND fingl.SRCTYPE = 'R')
                AND userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                'Amount can not be zero or Negative.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT
          WHERE coalesce(amount, 0) <= 0 AND userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Site Short Name is not available or it is extinct.',
                clock_timestamp()
           FROM int$stg_arvchimport a LEFT OUTER JOIN admsite st  
		   ON (UPPER(a.ref_admsite_shrtname) = UPPER(st.shrtname))
WHERE  -- END REV : 001
   (ST.shrtname IS NULL OR ST.EXT = 'Y') AND a.ref_admsite_shrtname IS NOT NULL -- START REV : 001
  AND st.shrtname IS NULL -- END REV : 001
  AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Same Site Short Name available for Multiple Sites.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE     a.ref_admsite_shrtname IS NOT NULL
                AND 1 <
                       (SELECT COUNT(SHRTNAME)
                          FROM ADMSITE
                         WHERE UPPER(SHRTNAME) =
                                  UPPER(a.ref_admsite_shrtname))
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Reference Site Short Name is  belong to invalid site type [ i.e. US-CO-OM-TS or US-CO-OM]',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a, ADMSITE ST
          WHERE     UPPER(a.ref_admsite_shrtname) = UPPER(st.shrtname)
                AND SITETYPE IN ('US-CO-OM-TS', 'US-CO-OM')
                AND a.ref_admsite_shrtname IS NOT NULL
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Reference Site Short Name is Invalid',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a, FINSL SLID, ADMCLS CLS
          WHERE     a.ref_admsite_shrtname IS NOT NULL
                AND UPPER(SL_SLID) = UPPER(SLID.SLID)
                AND SLID.CLSCODE = CLS.CLSCODE
                AND NOT EXISTS
                       (SELECT NULL
                          FROM V_POP_REF_ADMSITE R
                         WHERE     UPPER(r.shrtname) =
                                      UPPER(a.ref_admsite_shrtname)
                               AND (   (    R.SLCODE IS NOT NULL
                                        AND R.SLCODE = SLID.SLCODE)
                                    OR R.SLCODE IS NULL)
                               AND (   (    CLS.CLSTYPE = 'C'
                                        AND R.CLSTYPE = 'C'
                                        AND R.SLCODE IS NOT NULL)
                                    OR (    CLS.CLSTYPE <> 'C'
                                        AND R.CLSTYPE = 'N')
                                    OR R.SLCODE IS NULL)
                               AND (   ADMOU_CODE IS NULL
                                    OR ADMOU_CODE = P_CONNECT_OU))
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Cheque no and date both value is required',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE (   INSTRUMENT_NO IS NULL AND INSTRUMENT_DATE IS NOT NULL
                     OR (PAYMENT_MODE <> 'NEFT/RTGS'
                           AND INSTRUMENT_NO IS NOT NULL
                           AND INSTRUMENT_DATE IS NULL))
                AND userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Drawn On is not required for ''NEFT/RTGS''',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE     DRAWN_ON IS NOT NULL
                AND PAYMENT_MODE IN ('CASH', 'NEFT/RTGS')
                AND userid = p_userid;

      --PAYMENT MODE VALIDATION
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Cheque Not required.',
                clock_timestamp()
           FROM int$stg_arvchimport a
           LEFT OUTER JOIN (SELECT UPPER(glname) glname, srctype
                   FROM fingl
                  WHERE ext = 'N') gl ON (UPPER(a.bank_cash_glname) = gl.glname)
WHERE gl.srctype = 'C' AND Instrument_no IS NOT NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'For Bank type Ledger Payment Mode should be CHEQUE or NEFT/RTGS.',
                clock_timestamp()
           FROM int$stg_arvchimport a
LEFT OUTER JOIN (SELECT UPPER(glname) glname, srctype
                   FROM fingl
                  WHERE ext = 'N') gl ON (UPPER(a.bank_cash_glname) = gl.glname)
WHERE gl.srctype = 'B' AND UPPER(PAYMENT_MODE) NOT IN ('CHEQUE', 'NEFT/RTGS') AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'For Cash type GL Payment Mode should be CASH.',
                clock_timestamp()
           FROM int$stg_arvchimport a
LEFT OUTER JOIN (SELECT UPPER(glname) glname, srctype
                   FROM fingl
                  WHERE ext = 'N') gl ON (UPPER(a.bank_cash_glname) = gl.glname)
WHERE gl.srctype <> 'B' AND UPPER(PAYMENT_MODE) <> 'CASH' AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Valid Value should be either of the following CASH, CHEQUE and NEFT/RTGS.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE     UPPER(PAYMENT_MODE) NOT IN ('CASH', 'NEFT/RTGS', 'CHEQUE')
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Valid Value should be ''Yes'' or ''No''',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a
          WHERE     UPPER(ISREVERSAL) NOT IN ('YES', 'NO')
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Cheque No already issued /  cancelled / dishounered',
                clock_timestamp()
           FROM int$stg_arvchimport a
LEFT OUTER JOIN (SELECT UPPER(glname) glname, glcode
                   FROM fingl
                  WHERE ext = 'N' AND SRCTYPE = 'B') gl ON (UPPER(a.bank_cash_glname) = gl.glname)
WHERE  -- AND  UPPER(payment_mode) = 'CHEQUE'
   a.instrument_no IN (SELECT d.chqno 
                          FROM finchqmain m, finchqdet d
                         WHERE     m.bookcode = d.bookcode
                               AND d.stat <> 'N'
                               AND m.glcode = gl.glcode) AND a.userid = p_userid;

      -- END REV : 002
      /*    INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
             SELECT int$error_log_code.NEXTVAL, 0, 'ARVCHIMPORT', p_userid, 'Data Validation',
                    'Different drawn on for same Ledger and Sub Ledger - '||voucher_ref, SYSDATE
             FROM   (
                       SELECT voucher_ref, COUNT (DISTINCT drawn_on)
                       FROM int$stg_ARVCHIMPORT
                       WHERE userid = p_userid
                       GROUP BY ref_admsite_shrtname, sl_slid, voucher_ref
                       HAVING COUNT (DISTINCT drawn_on) > 1);*/
      /*INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
          SELECT int$error_log_code.NEXTVAL, 0, 'ARVCHIMPORT', p_userid, 'Data Validation',
                 'Different drawn on for same Ledger and Sub Ledger - '||voucher_ref, SYSDATE
          FROM   (
                    SELECT SL_SLID, COUNT (DISTINCT drawn_on)
                    FROM int$stg_ARVCHIMPORT
                    WHERE userid = p_userid
                    GROUP BY ref_admsite_shrtname, sl_slid, voucher_ref
                    HAVING COUNT (DISTINCT drawn_on) > 1);*/
      -- **
      -- vchdt,scheme_doc_format,scheme_docno,bank_cash_glname, voucher_remarks
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                   'Different voucher date for same voucher ref - '
                || voucher_ref,
                clock_timestamp()
           FROM (  SELECT voucher_ref, COUNT(DISTINCT vchdt)
                     FROM int$stg_ARVCHIMPORT
                    WHERE userid = p_userid
                 GROUP BY voucher_ref
                   HAVING COUNT(DISTINCT vchdt) > 1) alias5;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                   'Different voucher number format for same voucher ref - '
                || voucher_ref,
                clock_timestamp()
           FROM (  SELECT voucher_ref, COUNT(DISTINCT scheme_doc_format)
                     FROM int$stg_ARVCHIMPORT
                    WHERE userid = p_userid
                 GROUP BY voucher_ref
                   HAVING COUNT(DISTINCT scheme_doc_format) > 1) alias5;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                   'Different voucher number for same voucher ref - '
                || voucher_ref,
                clock_timestamp()
           FROM (  SELECT voucher_ref, COUNT(DISTINCT scheme_docno)
                     FROM int$stg_ARVCHIMPORT
                    WHERE userid = p_userid
                 GROUP BY voucher_ref
                   HAVING COUNT(DISTINCT scheme_docno) > 1) alias5;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                'Same voucher number for Different voucher ref',
                clock_timestamp()
           FROM (  SELECT scheme_docno, COUNT(DISTINCT voucher_ref)
                     FROM int$stg_ARVCHIMPORT
                    WHERE userid = p_userid AND scheme_docno IS NOT NULL
                 GROUP BY scheme_docno
                   HAVING COUNT(DISTINCT voucher_ref) > 1) alias5;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                   'Different bank cash gl name for same voucher ref - '
                || voucher_ref,
                clock_timestamp()
           FROM (  SELECT voucher_ref, COUNT(DISTINCT bank_cash_glname)
                     FROM int$stg_ARVCHIMPORT
                    WHERE userid = p_userid
                 GROUP BY voucher_ref
                   HAVING COUNT(DISTINCT bank_cash_glname) > 1) alias5;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                   'Different voucher remarks for same voucher ref - '
                || voucher_ref,
                clock_timestamp()
           FROM (  SELECT voucher_ref, COUNT(DISTINCT voucher_remarks)
                     FROM int$stg_ARVCHIMPORT
                    WHERE userid = p_userid
                 GROUP BY voucher_ref
                   HAVING COUNT(DISTINCT voucher_remarks) > 1) alias5;

      -- row level validation
      /*INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'ARVCHIMPORT',
                p_userid,
                'Data Validation',
                'Duplicate Subledger- SLID for same Voucher Reference No.',
                clock_timestamp()
           FROM (SELECT ROW_NUMBER()
                        OVER (PARTITION BY sl_slid, voucher_ref
                              ORDER BY sl_slid, voucher_ref)
                           row_cnt
                   FROM int$stg_ARVCHIMPORT a
                  WHERE a.userid = p_userid) t
          WHERE row_cnt > 1;*/

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'ARVCHIMPORT',
                userid,
                'Data Validation',
                'Instrument details are not allowed for Cash type of GL.',
                clock_timestamp()
           FROM int$stg_ARVCHIMPORT a,
                (SELECT UPPER(g.glname) glname
                   FROM fingl g
                  WHERE g.srctype = 'C') gl
          WHERE     UPPER(a.bank_cash_glname) = gl.glname
                AND (   a.instrument_no IS NOT NULL
                     OR a.instrument_date IS NOT NULL
                     OR a.drawn_on IS NOT NULL)
                AND a.userid = p_userid;

      -- check whether records are valid or not
      BEGIN
         SELECT 'S'
           INTO STRICT v_status
           
          WHERE EXISTS (SELECT 'S'
                      FROM int$error_log
                     WHERE userid = p_userid);

         RETURN('0');
      EXCEPTION
         WHEN no_data_found
         THEN
            RETURN('1');
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
              VALUES (nextval('int$error_log_code'),
                      0,
                      'ARVCHIMPORT',
                      p_userid,
                      errcode,
                      errmsg || ',' || g_mark,
                      clock_timestamp());

         --COMMIT;

         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

