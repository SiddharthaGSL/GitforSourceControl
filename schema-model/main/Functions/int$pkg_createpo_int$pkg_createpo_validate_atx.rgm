function "main"."int$pkg_createpo_int$pkg_createpo_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      v_status                         char(1);
      errmsg                           varchar(200);
      errcode                          text;
      v_grcdt                          timestamp;
      v_icode                          varchar(9);
      v_barcode                        varchar(50);
      v_pono                           varchar(25) := NULL;
      v_cnt                            bigint;
      v_userid                         bigint;
      v_profcode                       bigint;
      v_rlcode                         bigint;
      v_doccode                        bigint;
      v_create_new_itemcode            char(1);
      v_create_itm_status              char(1);

      g_mark                           varchar(100);
      V_PUR_ORDER_LIMIT_ALERT_METHOD   char(1) := NULL;          -- REV : 011
      -- START REV : 017
      V_NON_PRICE_CHART_ITEMS          ADMPROF.NON_PRICE_CHART_ITEMS%TYPE
                                          := 'I';
      V_RATE                           INVITEM.RATE%TYPE;
      V_PASS_FLAG                      char(1) := 'Y';
      V_ITEM_CODE                      INVITEM.BARCODE%TYPE;
      -- END REV : 017
      -- start rev : 018
      v_site_type                      admsite.sitetype%TYPE;
      -- end rev : 018
i RECORD;
  C1_LOOP RECORD;

BEGIN
      DELETE FROM int$stg_createpo_all_fld
       WHERE userid = p_userid;
	   

      INSERT INTO int$stg_createpo_all_fld(scheme_doc_format,
                                            scheme_docno,
                                            orddt,
                                            supplier_slid,
                                            docno,
                                            agent_slid,
                                            agrate,
                                            transporters_slid,
                                            ord_rem,
                                            dtfr,
                                            validity_period,
                                            payterm,
                                            whether_consignment,
                                            mrchantdiser_username,
                                            fintradegrp_name,
                                            purterm_name,
                                            form_name,
                                            currency_shortcode,
                                            exrate,
                                            site_shortname,
                                            icode_barcode,
                                            oem_barcode,
                                            ordqty,
                                            order_rate,
                                            order_item_rem,
                                            udfstring01,
                                            udfstring02,
                                            udfstring03,
                                            udfstring04,
                                            udfstring05,
                                            udfstring06,
                                            udfstring07,
                                            udfstring08,
                                            udfstring09,
                                            udfstring10,
                                            udfnum01,
                                            udfnum02,
                                            udfnum03,
                                            udfnum04,
                                            udfnum05,
                                            udfdate01,
                                            udfdate02,
                                            udfdate03,
                                            udfdate04,
                                            udfdate05,
                                            article_name,
                                            item_name,
                                            item_rem,
                                            cname1,
                                            cname2,
                                            cname3,
                                            cname4,
                                            cname5,
                                            cname6,
                                            desc1,
                                            desc2,
                                            desc3,
                                            desc4,
                                            desc5,
                                            desc6,
                                            num1,
                                            num2,
                                            num3,
                                            item_shrtname,
                                            tax_name,
                                            negative_stk_alert,
                                            barunit,
                                            standard_rate,
                                            rsp,
                                            listed_mrp,
                                            wsp,
                                            uom,
                                            material_type,
                                            item_vendor_id,
                                            expiry_date,
                                            order_item_due_date,
                                            lineno,
                                            userid,
                                            item_master_mrp,
                                            allow_zero_rate,
                                            -- START REV : 006
                                            hsn_sac_code,
                                            invhsnsacmain_code,
                                            -- END REV : 006
                                            -- START REV : 007
                                            Extra_Tax,
                                            -- END REV : 007
                                            -- START REV : 001
                                            invitem_udfstring01,
                                            invitem_udfstring02,
                                            invitem_udfstring03,
                                            invitem_udfstring04,
                                            invitem_udfstring05,
                                            invitem_udfstring06,
                                            invitem_udfstring07,
                                            invitem_udfstring08,
                                            invitem_udfstring09,
                                            invitem_udfstring10,
                                            invitem_udfnum01,
                                            invitem_udfnum02,
                                            invitem_udfnum03,
                                            invitem_udfnum04,
                                            invitem_udfnum05,
                                            invitem_udfdate01,
                                            invitem_udfdate02,
                                            invitem_udfdate03,
                                            invitem_udfdate04,
                                            invitem_udfdate05,
                                            -- END REV : 001
                                            -- START REV : 012
                                            GLNAME,
                                            GLCODE,
                                            SLID,
                                            GST_ITC_APPL,
                                            -- END REV : 012
                                            -- START REV : 028
                                            ITEM_MANAGEMENT_MODE,
                                            PRICE_MANAGEMENT,
                                            MANAGE_EXPIRY,
                                            VALIDITY_MODE,
                                            BATCH_VALIDITY_PERIOD,
                                            POS_BATCH_SELECTION_MODE
                                            -- END REV : 028
                                        )
         SELECT scheme_doc_format,
                scheme_docno,
                orddt,
                supplier_slid,
                docno,
                agent_slid,
                agrate,
                transporters_slid,
                ord_rem,
                dtfr,
                validity_period,
                payterm,
                whether_consignment,
                mrchantdiser_username,
                fintradegrp_name,
                purterm_name,
                form_name,
                currency_shortcode,
                exrate,
                site_shortname,
                icode_barcode,
                oem_barcode,
                ordqty,
                order_rate,
                order_item_rem,
                udfstring01,
                udfstring02,
                udfstring03,
                udfstring04,
                udfstring05,
                udfstring06,
                udfstring07,
                udfstring08,
                udfstring09,
                udfstring10,
                udfnum01,
                udfnum02,
                udfnum03,
                udfnum04,
                udfnum05,
                udfdate01,
                udfdate02,
                udfdate03,
                udfdate04,
                udfdate05,
                article_name,
                item_name,
                item_rem,
                cname1,
                cname2,
                cname3,
                cname4,
                cname5,
                cname6,
                desc1,
                desc2,
                desc3,
                desc4,
                desc5,
                desc6,
                num1,
                num2,
                num3,
                item_shrtname,
                tax_name,
                negative_stk_alert,
                barunit,
                standard_rate,
                rsp,
                listed_mrp,
                wsp,
                uom,
                material_type,
                item_vendor_id,
                expiry_date,
                order_item_due_date,
                lineno,
                userid,
                item_master_mrp,
                allow_zero_rate,
                -- START REV : 006
                UPPER(hsn_sac_code),
                invhsnsacmain_code,
                -- END REV : 006
                -- START REV : 007
                UPPER(Extra_Tax),
                -- END REV : 007
                -- START REV : 001
                invitem_udfstring01,
                invitem_udfstring02,
                invitem_udfstring03,
                invitem_udfstring04,
                invitem_udfstring05,
                invitem_udfstring06,
                invitem_udfstring07,
                invitem_udfstring08,
                invitem_udfstring09,
                invitem_udfstring10,
                invitem_udfnum01,
                invitem_udfnum02,
                invitem_udfnum03,
                invitem_udfnum04,
                invitem_udfnum05,
                invitem_udfdate01,
                invitem_udfdate02,
                invitem_udfdate03,
                invitem_udfdate04,
                invitem_udfdate05,
                -- END REV : 001
                -- START REV : 012
                GLNAME,
                GLCODE,
                SLID,
                CASE WHEN UPPER(GST_ITC_APPL)='INPUT APPLICABLE' THEN  'IP' WHEN UPPER(GST_ITC_APPL)='CAPITAL GOODS' THEN  'CP' WHEN UPPER(GST_ITC_APPL)='NOT APPLICABLE' THEN  'NO'  ELSE NULL END
                   GST_ITC_APPL
                -- END REV : 012
                -- END REV : 025
                -- START REV : 028
                ,CASE WHEN UPPER(ITEM_MANAGEMENT_MODE) = 'ITEM WISE' THEN 'I'
                      WHEN UPPER(ITEM_MANAGEMENT_MODE) = 'SERIAL WISE' THEN 'S'
                      WHEN UPPER(ITEM_MANAGEMENT_MODE) = 'BATCH WISE' THEN 'B'
                      WHEN UPPER(ITEM_MANAGEMENT_MODE) IS NULL THEN NULL
                      ELSE 'X'
                 END ITEM_MANAGEMENT_MODE
                ,CASE WHEN UPPER(PRICE_MANAGEMENT) = 'ITEM LEVEL' THEN 'I'
                      WHEN UPPER(PRICE_MANAGEMENT) = 'BATCH/SERIAL LEVEL' THEN 'B'
                      WHEN UPPER(PRICE_MANAGEMENT) IS NULL THEN NULL
                      ELSE 'X'
                END PRICE_MANAGEMENT   
                ,CASE WHEN UPPER(MANAGE_EXPIRY) = 'NO' THEN 'N'
                      WHEN UPPER(MANAGE_EXPIRY) = 'YES' THEN 'Y'
                      WHEN UPPER(MANAGE_EXPIRY) IS NULL THEN NULL
                      ELSE 'X'
                 END MANAGE_EXPIRY
                ,CASE WHEN UPPER(VALIDITY_MODE) = 'DAY' THEN 'D'
                      WHEN UPPER(VALIDITY_MODE) = 'MONTH' THEN 'M'
                      WHEN UPPER(VALIDITY_MODE) = 'YEAR' THEN 'Y'
                      WHEN UPPER(VALIDITY_MODE) = 'NONE' THEN 'N'
                      WHEN UPPER(VALIDITY_MODE) IS NULL THEN NULL
                      ELSE 'X'
                 END VALIDITY_MODE
                ,BATCH_VALIDITY_PERIOD 
                ,'M'  POS_BATCH_SELECTION_MODE
                -- END REV : 028
          FROM int$stg_createpo
          WHERE userid = p_userid;

      -- START REV : 001
      DECLARE
         v_sql   varchar(2000);

         c1 CURSOR FOR
              SELECT *
                FROM udfconfigdetail
               WHERE     tablename = 'PURORDMAIN'
                     AND isenabled = 1
                     AND defaultvalue IS NOT NULL
            ORDER BY code;

         c2 CURSOR FOR
              SELECT *
                FROM udfconfigdetail
               WHERE     tablename = 'INVITEM'
                     AND isenabled = 1
                     AND defaultvalue IS NOT NULL
            ORDER BY code;
      BEGIN
         FOR i IN c1
         LOOP
            v_sql := NULL;

            IF i.datatype IN ('String',
                              'FixedList',
                              'EditableList',
                              'Memo')
            THEN
               v_sql :=
                     'UPDATE int$stg_createpo_all_fld a '
                  || 'SET '
                  || i.columnname 
                  || ' = '''
                  || REPLACE(i.defaultvalue, '''', '''''')
                  || ''' '
                  || 'WHERE a.'
                  || i.columnname
                  || ' is null '
                  || 'AND a.userid = '
                  || p_userid::text;
            ELSIF i.datatype = 'Numeric'
            THEN
               v_sql :=
                     'UPDATE int$stg_createpo_all_fld a '
                  || 'SET '
                  || i.columnname
                  || ' = '
                  || i.defaultvalue
                  || ' '
                  || 'WHERE a.'
                  || i.columnname
                  || ' is null '
                  || 'AND a.userid = '
                  || p_userid::text;
            ELSIF i.datatype = 'Date'
            THEN
               v_sql :=
                     'UPDATE int$stg_createpo_all_fld a '
                  || 'SET '
                  || i.columnname
                  --|| ' = TO_DATE('''
				  || ' = '
                  || quote_nullable(REPLACE(I.DEFAULTVALUE, 'T', ' ')::date)
                  --|| ''',''RRRR-MM-DD HH24:MI:SS'') '
                  || ' WHERE a.'
                  || i.columnname
                  || ' is null '
                  || 'AND a.userid = '
                  || p_userid::text;
            END IF;

            -- dbms_output.put_line(v_sql);
            EXECUTE(v_sql);
         END LOOP;

         FOR i IN c2
         LOOP
            IF i.datatype IN ('String',
                              'FixedList',
                              'EditableList',
                              'Memo')
            THEN
               v_sql :=
                     'UPDATE int$stg_createpo_all_fld a '
                  || 'SET invitem_'
                  || i.columnname
                  || ' = '''
                  || REPLACE(i.defaultvalue, '''', '''''')
				  --|| ' = TO_DATE('''
                  || ''' '
                  || 'WHERE a.invitem_'
                  || i.columnname
                  || ' is null '
                  || 'AND a.userid = '
                  || p_userid::text;
            ELSIF i.datatype = 'Numeric'
            THEN
               v_sql :=
                     'UPDATE int$stg_createpo_all_fld a '
                  || 'SET invitem_'
                  || i.columnname
                  || ' = '
                  || i.defaultvalue
                  || ' '
                  || 'WHERE a.invitem_'
                  || i.columnname
                  || ' is null '
                  || 'AND a.userid = '
                  || p_userid::text;
            ELSIF i.datatype = 'Date'
            THEN
               v_sql :=
                     'UPDATE int$stg_createpo_all_fld a '
                  || 'SET invitem_'
                  || i.columnname
                  || ' = '
                  || quote_nullable(REPLACE(I.DEFAULTVALUE, 'T', ' ')::date)
                  --|| ''',''RRRR-MM-DD HH24:MI:SS'') '
                  || ' WHERE a.invitem_'
                  || i.columnname
                  || ' is null '
                  || 'AND a.userid = '
                  || p_userid::text;
            END IF;

            EXECUTE(v_sql);
         -- dbms_output.put_line(v_sql);
         END LOOP;

         --COMMIT;
      END;

      -- END REV : 001
      -- ************************ Length checking Start *****************************************
      IF 1 = 1
      THEN
         -- START REV : 002
         NULL;
      -- END REV : 002
      END IF;

      -- ************************ Length checking End *****************************************
      -- ************************ Mandatory checking Start ************************************
      IF 1 = 1
      THEN
         g_mark := 'M1000';

         -- scheme_doc_format is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - scheme_doc_format.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.scheme_doc_format IS NULL AND a.userid = p_userid;

         -- orddt is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - orddt.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.orddt IS NULL AND a.userid = p_userid;

         -- supplier_slid is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - supplier_slid.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.supplier_slid IS NULL AND a.userid = p_userid;

         -- docno is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - docno.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.docno IS NULL AND a.userid = p_userid;

         -- dtfr is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - dtfr.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.dtfr IS NULL AND a.userid = p_userid;

         -- validity_period is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - validity_period.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.validity_period IS NULL AND a.userid = p_userid;

         -- whether_consignment is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - whether_consignment.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.whether_consignment IS NULL AND a.userid = p_userid;

         -- site_shortname is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - site_shortname.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.site_shortname IS NULL AND a.userid = p_userid;

         -- ordqty is null
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   'CREATEPO',
                   userid,
                   'Mandatory Validation',
                   'Column is Mandatory - ordqty.',
                   clock_timestamp()
              FROM int$stg_createpo a
             WHERE a.ordqty IS NULL AND a.userid = p_userid;

         /*
         -- order_rate is null
         insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         select  int$error_log_code.nextval, lineno, 'CREATEPO', userid, 'Mandatory Validation','Column is Mandatory - order_rate.',sysdate
         from    int$stg_createpo a
         where   a.order_rate is null
         and     a.userid = p_userid;
         */
         -- START REV : 002
         /*
         -- uom is null
         insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         select  int$error_log_code.nextval, lineno, 'CREATEPO', userid, 'Mandatory Validation','Column is Mandatory - uom.',sysdate
         from    int$stg_createpo a
         where   a.uom is null
         and     a.userid = p_userid;
         */
         -- Mandatory checking for UDF in PURORDMAIN
         BEGIN
            FOR i
               IN (SELECT d.columnname
                     FROM udfconfigdetail d
                    WHERE     d.tablename = 'PURORDMAIN'
                          AND d.isenabled = 1
                          AND d.ismandatory = 1)
            LOOP
               EXECUTE
                     'insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon) '
                  || 'select  int$error_log_code.nextval, lineno, ''CREATEPO'', userid, ''Mandatory Validation'',''Column is Mandatory - '
                  || i.columnname
                  || ''',sysdate '
                  || 'from    int$stg_createpo a '
                  || 'where   '
                  || i.columnname
                  || ' is null '
                  || 'and     a.userid = '
                  || p_userid::text
                  || ' ';
            END LOOP;
         END;

         -- For items in PO
         BEGIN
            FOR i
               IN (SELECT d.tablename || '_' || d.columnname colname
                     FROM udfconfigdetail d
                    WHERE     d.tablename = 'INVITEM'
                          AND d.isenabled = 1
                          AND d.ismandatory = 1)
            LOOP
               EXECUTE
                     'insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon) '
                  || 'select  int$error_log_code.nextval, lineno, ''CREATEPO'', userid, ''Mandatory Validation'',''Column is Mandatory - '
                  || i.colname
                  || ''',sysdate '
                  || 'from    int$stg_createpo a '
                  || 'where   '
                  || i.colname
                  || ' is null '
                  -- START REV : 008
                  || 'AND      a.icode_barcode IS NULL '
                  -- END REV : 008
                  || 'and     a.userid = '
                  || p_userid::text
                  || ' ';
            END LOOP;
         END;
      -- END REV : 002
      END IF;

      -- ************************ Mandatory checking End ************************************
      -- ************************ Data Validation Start *************************************
      --IF  'MAIN' = 'MAIN' THEN -- Diptiman
      -- Multiple PO, Multiple site, Multiple date is allowed
      -- START REV : 012
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data validation',
                'GST Applicability should be in( ''INPUT APPLICABLE'',''CAPITAL GOODS'',''NOT APPLICABLE'')',
                clock_timestamp()
           FROM int$stg_CREATEPO a
          WHERE     UPPER(GST_ITC_APPL) NOT IN ('INPUT APPLICABLE', 'CAPITAL GOODS', 'NOT APPLICABLE')
                AND GST_ITC_APPL IS NOT NULL
                AND a.userid = p_userid;

      /*  INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT int$error_log_code.NEXTVAL,
        lineno,
        'CREATEPO',
        userid,
        'Data validation',
        'GST Applicability is mandatory for Item Creation.',
        SYSDATE
        FROM int$stg_CREATEPO a
        WHERE   GST_ITC_APPL IS NULL
        and   (  a.CNAME1 is NOT null
                OR     a.CNAME2 is NOT null
                OR     a.CNAME3 is NOT null
                OR     a.CNAME4 is NOT null
                OR     a.CNAME5 is NOT null
                OR     a.CNAME6 is NOT null
               )
        AND     a.icode_barcode is null
        AND   a.userid = p_userid;*/
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Ledger Name (' || a.GLNAME || ')',
                clock_timestamp()
           FROM int$stg_CREATEPO a
          WHERE     NOT EXISTS (SELECT NULL
                          FROM FINGL
                         WHERE     FINGL.EXT = 'N'
                               AND UPPER(FINGL.GLNAME) = UPPER(a.GLNAME)
                               AND SRCTYPE = 'G')
                AND a.glname IS NOT NULL
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Sub-Ledger Can not be null for given ledger',
                clock_timestamp()
           FROM int$stg_CREATEPO a
          WHERE     EXISTS (SELECT NULL
                          FROM FINGL
                         WHERE     FINGL.EXT = 'N'
                               AND UPPER(FINGL.GLNAME) = UPPER(a.GLNAME)
                               AND SLAPP = 'Y')
                AND a.slid IS NULL
                AND a.GLNAME IS NOT NULL
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Sub-ledger (' || a.slid || ')',
                clock_timestamp()
           FROM int$stg_CREATEPO a
          WHERE     NOT EXISTS
                       (SELECT NULL
                          FROM FINSL, FINGL, FINSL_GL FGL
                         WHERE     UPPER(FINSL.slid) = UPPER(a.slid)
                               AND FINGL.GLCODE = FGL.GLCODE
                               AND FGL.SLCODE = FINSL.SLCODE
                               AND FGL.EXT = 'N'
                               AND FINSL.EXT = 'N'
                               AND FINGL.GLCODE =
                                      (SELECT GLCODE
                                         FROM FINGL
                                        WHERE UPPER(GLNAME) =
                                                 UPPER(A.GLNAME)))
                AND a.slid IS NOT NULL
                AND a.userid = p_userid;

      -- END REV : 012
      g_mark := 'D1000';

      -- OU code updation
      -- START REV : 004
      UPDATE int$stg_createpo_all_fld a
         SET admou_code =
                (SELECT s.admou_code
                   FROM admsite s
                  WHERE UPPER(s.shrtname) = UPPER(a.site_shortname))
       WHERE a.userid = p_userid;

      -- END REV : 004
      g_mark := 'D1001';

      -- Check whether the user have the login permission in the site (SITE_SHORTNAME)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'User do not have the login previledge in site ('
                || site_shortname
                || ')',
                clock_timestamp()
           FROM (SELECT DISTINCT x.site_shortname
                   FROM int$stg_createpo x
                  WHERE     UPPER(x.site_shortname) NOT IN (SELECT UPPER(a.shrtname)
                                  FROM hrdemp    h,
                                       hrdemp_ou ho,
                                       admou     o,
                                       admsite   a
                                 WHERE     h.ecode = ho.hrdemp_code
                                       AND ho.admou_code = o.code
                                       AND ho.admsite_code = a.code
                                       -- start rev : 018
                                       AND a.sitetype IN ('MS-OO-CM', 'OS-OO-CM')
                                       -- end rev : 018
                                       AND o.ext = 'N'
                                       AND a.ext = 'N'
                                       AND h.ecode = x.userid
                                -- start rev : 018
UNION ALL

                                SELECT UPPER(a.shrtname)
                                  FROM hrdemp h, hrdemp_ou ho, admsite a
                                 WHERE     h.ecode = ho.hrdemp_code
                                       AND ho.admou_code IS NULL
                                       AND ho.admsite_code = a.code
                                       AND a.sitetype = 'MS-CO-OM-TS'
                                       AND a.ext = 'N'
                                       AND h.ecode = x.userid -- end rev : 018
                                                             )
                        AND userid = p_userid) alias8;

      g_mark := 'D1002';

      -- site_shortname checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Site should be same for a particular PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.site_shortname)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.site_shortname) >
                                                    1) x)) alias7;

      g_mark := 'D1003';

      -- site_shortname checking (1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Site Short Name is not available in Site Master / it is extinct Site',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(a.site_shortname) NOT IN (SELECT UPPER(b.shrtname)
                          FROM admsite b
                         WHERE coalesce(b.ext, 'N') = 'N')
                AND a.userid = p_userid;

      g_mark := 'D1004';

      -- site_shortname checking (2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                -- start rev : 018
                --'Site type is not valid as only MS-OO-CM , OS-OO-CM site are valid', sysdate
                'Site type is not valid as only OS-OO-CM , MS-CO-OM-TS, MS-OO-CM site are valid',
                clock_timestamp()
           -- end rev : 018
           FROM int$stg_createpo a
          WHERE     UPPER(a.site_shortname) NOT IN (SELECT UPPER(b.shrtname)
                          FROM admsite b
                         WHERE     coalesce(b.ext, 'N') = 'N'
                               -- start rev : 018
                               --and    b.sitetype in ('MS-OO-CM', 'OS-OO-CM')
                               AND b.sitetype IN ('MS-OO-CM', 'MS-CO-OM-TS', 'OS-OO-CM') -- end rev : 018
                                                                             )
                AND a.userid = p_userid;

      g_mark := 'D1005';

      -- site_shortname checking (3)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Specified Scheme Doc Format is not applicable for this Site',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(a.site_shortname) NOT IN (SELECT UPPER(b.shrtname)
                          FROM admsite b, hrdemp_ou c
                         WHERE     b.code = c.admsite_code
                               AND coalesce(b.ext, 'N') = 'N'
                               AND coalesce(c.ext, 'N') = 'N'
                               -- start rev : 018
                               --and    b.sitetype in ('MS-OO-CM', 'OS-OO-CM')
                               AND b.sitetype IN ('MS-OO-CM', 'MS-CO-OM-TS', 'OS-OO-CM')
                               -- end rev : 018
                               AND c.hrdemp_code = p_userid)
                AND a.userid = p_userid;

      g_mark := 'D1006';

      UPDATE int$stg_createpo_all_fld a
         SET(admsite_code, ou_admcmptax_code) =
                (SELECT code, psite_admcmptax_code
                   FROM admsite b
                  WHERE     UPPER(b.shrtname) = UPPER(a.site_shortname)
                        AND a.site_shortname IS NOT NULL)
       WHERE userid = p_userid;

      g_mark := 'D1007';

      -- previledge checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'user has no permission for PO creation',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     NOT EXISTS (SELECT b.mdmenushortcode                        -- 022
                          -- start rev : 022
                          --from   admpriv b, hrdemp c
                          FROM rolemenu b, rolemenuOPERATION O, hrdemp c

                         WHERE     b.ROLEID = c.rlcode
                               AND B.ID = O.rolemenuid
                               AND coalesce(c.ext, 'N') = 'N'
                               --and    b.menucode = 86 -- menucodefor PO
                               AND b.mdmenushortcode = 'ProcOrd'
                               -- END REV : 022
                               AND O.mdappoperationid = 1
                               AND c.ecode = p_userid)
                AND a.admsite_code IS NOT NULL
                AND a.userid = p_userid;

      g_mark := 'D1008';

      -- orddt > sysdate
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                   'Invalid order date ('
                || TO_CHAR(orddt, 'dd/mm/yyyy')
                || ')',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE date_trunc('day', orddt) > date_trunc('day', clock_timestamp()) AND a.userid = p_userid;

      g_mark := 'D1009';

      -- ORDDT checking for the following -
      -- Year extinct,
      DECLARE
         v_dtfr           timestamp;
         v_dtto           timestamp;
         v_yr_ext         char(1);
         v_day_status     char(1);
         v_locdays        hrdemp.locdays%TYPE;
         v_last_dt_lock   char(1);

         c1 CURSOR FOR
            SELECT DISTINCT date_trunc('day', orddt) orddt
              FROM int$stg_createpo

             WHERE userid = p_userid;
      -- END REV : 005
      BEGIN
         FOR i IN c1
         LOOP
            -- Ycode related checking, min trans date checking, lockday checking, Year exists or not, Day status related checking
            BEGIN
               SELECT ext, dtfr, dtto
                 INTO STRICT v_yr_ext, v_dtfr, v_dtto
                 FROM admyear
                WHERE i.orddt BETWEEN dtfr AND dtto;

               IF coalesce(v_yr_ext, 'N') = 'Y'
               THEN
                  INSERT INTO int$error_log(code,
                                             lineno,
                                             classname,
                                             userid,
                                             errortype,
                                             errordesc,
                                             createdon)
                     SELECT nextval('int$error_log_code'),
                            lineno,
                            'CREATEPO',
                            userid,
                            'Data Validation',
                            'Year of the Date is not open / extinct',
                            clock_timestamp()
                       FROM int$stg_createpo
                      WHERE date_trunc('day', orddt) = i.orddt AND userid = p_userid;
               ELSE
                  IF i.orddt < v_dtfr
                  THEN
                     INSERT INTO int$error_log(code,
                                                lineno,
                                                classname,
                                                userid,
                                                errortype,
                                                errordesc,
                                                createdon)
                        SELECT nextval('int$error_log_code'),
                               lineno,
                               'CREATEPO',
                               userid,
                               'Data Validation',
                                  'Date can not be less than start date of current accounting year date '
                               || TO_CHAR(v_dtfr, 'DD/MM/RRRR'),
                               clock_timestamp()
                          FROM int$stg_createpo
                         WHERE date_trunc('day', orddt) = i.orddt AND userid = p_userid;
                  ELSE
                     BEGIN
                        SELECT locdays, allow_last_fy_day_mode
                          INTO STRICT v_locdays, v_last_dt_lock
                          FROM hrdemp
                         WHERE ecode = p_userid;

                        IF v_locdays IS NOT NULL
                        THEN
                           IF coalesce(
                                 db_fun_chk_last_dt_lock(v_last_dt_lock,
                                                          current_date),
                                 0) <> 0
                           THEN
                              INSERT INTO int$error_log(code,
                                                         lineno,
                                                         classname,
                                                         userid,
                                                         errortype,
                                                         errordesc,
                                                         createdon)
                                 SELECT nextval('int$error_log_code'),
                                        lineno,
                                        'CREATEPO',
                                        userid,
                                        'Data Validation',
                                        'user do not have priviledge to igonre lock days on the last day of accounting year',
                                        clock_timestamp()
                                   FROM int$stg_createpo
                                  WHERE     date_trunc('day', orddt) = i.orddt
                                        AND userid = p_userid;
                           ELSE
                              IF date_trunc('day', i.orddt) <
                                    (current_date - v_locdays::integer)
                              THEN
                                 INSERT INTO int$error_log(code,
                                                            lineno,
                                                            classname,
                                                            userid,
                                                            errortype,
                                                            errordesc,
                                                            createdon)
                                    SELECT nextval('int$error_log_code'),
                                           lineno,
                                           'CREATEPO',
                                           userid,
                                           'Data Validation',
                                           'User lock days logic fails',
                                           clock_timestamp()
                                      FROM int$stg_createpo
                                     WHERE     date_trunc('day', orddt) = i.orddt
                                           AND userid = p_userid;
                              END IF;
                           END IF;
                        END IF;
                     EXCEPTION
                        WHEN no_data_found
                        THEN
                           INSERT INTO int$error_log(code,
                                                      lineno,
                                                      classname,
                                                      userid,
                                                      errortype,
                                                      errordesc,
                                                      createdon)
                              SELECT nextval('int$error_log_code'),
                                     lineno,
                                     'CREATEPO',
                                     userid,
                                     'Data Validation',
                                     'User not exists',
                                     clock_timestamp()
                                FROM int$stg_createpo
                               WHERE     date_trunc('day', orddt) = i.orddt
                                     AND userid = p_userid;
                     END;
                  END IF;
               END IF;
            EXCEPTION
               WHEN no_data_found
               THEN
                  INSERT INTO int$error_log(code,
                                             lineno,
                                             classname,
                                             userid,
                                             errortype,
                                             errordesc,
                                             createdon)
                     SELECT nextval('int$error_log_code'),
                            lineno,
                            'CREATEPO',
                            userid,
                            'Data Validation',
                            'Year not exists',
                            clock_timestamp()
                       FROM int$stg_createpo
                      WHERE date_trunc('day', orddt) = i.orddt AND userid = p_userid;
            END;

            -- day status related checking
            -- START REV : 004
            -- Day check
            -- START REV : 023
            -- Finalcial Year Status checking
            /*
            INSERT INTO int$error_log (code,
                                       lineno,
                                       classname,
                                       userid,
                                       errortype,
                                       errordesc,
                                       createdon)
               SELECT int$error_log_code.NEXTVAL,
                      0,
                      'CREATEPO',
                      p_userid,
                      'Mandatory Validation',
                      'Finance Month is Closed not Import possible for the date.',
                      SYSDATE
                 FROM admmonth a, admou_month b
                WHERE     a.mcode = b.admmonth_code
                      AND i.orddt BETWEEN dtfr AND dtto
                      AND b.inv_month_status = 'C';
                 */
                INSERT INTO int$error_log(code,
                                       lineno,
                                       classname,
                                       userid,
                                       errortype,
                                       errordesc,
                                       createdon)
               SELECT nextval('int$error_log_code'),
                      0,
                      'CREATEPO',
                      p_userid,
                      'Mandatory Validation',
                      'Financial Year is Closed not Import possible for the date.',
                      clock_timestamp()
                FROM admyear a, admou_year b
                WHERE     a.ycode = b.admyear_code
                      AND i.orddt BETWEEN a.dtfr AND a.dtto
                      AND b.admyear_status = 'C'
                      and b.admou_code = p_connect_ou;
                -- END REV : 023
            /*
            begin
                select day_status into v_day_status
                from   admdaybook
                where  trunc(saledt) = i.orddt;

                if     nvl(v_day_status, 'N') = 'N' then
                       insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
                       select  int$error_log_code.nextval, lineno, 'CREATEPO', userid, 'Data Validation', 'Day is not open', sysdate
                       from    int$stg_createpo
                       where   trunc(orddt) = i.orddt
                       and     userid = p_userid;

                elsif nvl(v_day_status, 'N') = 'C' then
                       insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
                       select  int$error_log_code.nextval, lineno, 'CREATEPO', userid, 'Data Validation', 'Day is closed', sysdate
                       from    int$stg_createpo
                       where   trunc(orddt) = i.orddt
                       and     userid = p_userid;
                end if;
            exception
                when no_data_found then
                    insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
                    select  int$error_log_code.nextval, lineno, 'CREATEPO', p_userid, 'Data Validation', 'Day is not present in daybook', sysdate
                    from    int$stg_createpo
                    where   trunc(orddt) = i.orddt
                    and     userid = p_userid;
            end;
            */
            -- END REV : 004
            UPDATE int$stg_createpo_all_fld a
               SET ycode =
                      (SELECT ycode
                         FROM admyear
                        WHERE a.orddt BETWEEN dtfr AND dtto)
             WHERE a.orddt = i.orddt AND a.userid = p_userid;
         END LOOP;
      END;

      g_mark := 'D1010';

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'Order date different for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.orddt)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.orddt) > 1)
                                       x)) alias7;

      g_mark := 'D1011';

      -- scheme_doc_format chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Scheme_doc fromat is not applicable for site or it is extinct',
                clock_timestamp()
           FROM int$stg_createpo x
          WHERE     UPPER(scheme_doc_format) NOT IN
                       (SELECT UPPER(a.docname)
                          FROM admdocscheme a, admmenu_docscheme b
                         WHERE     a.doccode = b.doccode
                               -- START REV : 022
                               --and    b.menucode = 86
                               AND b.MDMENUSHORTCODE = 'ProcOrd'
                               -- END REV : 022
                               AND coalesce(a.ext, 'N') = 'N'
                               AND (   0 =
                                          (SELECT COUNT(*)
                                             FROM admdocscheme    c,
                                                  admou_docscheme d
                                            WHERE     c.doccode = d.doccode
                                                  AND d.admsite_code =
                                                         (SELECT DISTINCT
                                                                 code
                                                            FROM admsite m
                                                           WHERE UPPER(
                                                                    m.shrtname) =
                                                                    UPPER(
                                                                       x.site_shortname)) -- p_connect_site
                                                  AND coalesce(c.ext, 'N') = 'N')
                                    OR a.doccode IN
                                          (SELECT e.doccode
                                             FROM admdocscheme    e,
                                                  admou_docscheme f
                                            WHERE     e.doccode = f.doccode
                                                  AND f.admsite_code =
                                                         (SELECT DISTINCT
                                                                 code
                                                            FROM admsite n
                                                           WHERE UPPER(
                                                                    n.shrtname) =
                                                                    UPPER(
                                                                       x.site_shortname)) -- p_connect_site
                                                  AND coalesce(e.ext, 'N') = 'N')))
                AND x.userid = p_userid;

      g_mark := 'D1012';

      -- scheme_docno chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Different Scheme Doc Format for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT a.docno,
                                                 COUNT(
                                                    DISTINCT scheme_doc_format)
                                            FROM int$stg_createpo a
                                           WHERE a.userid = p_userid
                                        GROUP BY a.docno
                                          HAVING COUNT(
                                                    DISTINCT scheme_doc_format) >
                                                    1) x)) alias7;

      g_mark := 'V1013';

      UPDATE int$stg_createpo_all_fld a
         SET doccode =
                (SELECT doccode
                   FROM admdocscheme b
                  WHERE (UPPER(b.docname) = UPPER(a.scheme_doc_format)))
       WHERE a.scheme_doc_format IS NOT NULL AND a.userid = p_userid;

      g_mark := 'D1014';

      -- scheme_docno chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Scheme Doc No is missing for "Manual" type document scheme format',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE (    UPPER(a.scheme_doc_format) IN ('MANUAL (GENERAL)', 'MANUAL (EXCISE)')
                     AND a.scheme_docno IS NULL)
                AND a.userid = p_userid;

      g_mark := 'D1015';

      -- scheme_docno chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Scheme Docno should be null, as it would be auto generated',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE (    UPPER(a.scheme_doc_format) NOT IN ('MANUAL (GENERAL)', 'MANUAL (EXCISE)')
                     AND a.scheme_docno IS NOT NULL)
                AND a.userid = p_userid;

      g_mark := 'D1016';

      -- scheme_docno chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                p_userid,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Scheme Docno already exists (' || x.scheme_docno || ')',
                clock_timestamp()
           FROM int$stg_createpo x
          WHERE x.scheme_docno IN
                   (  SELECT a.scheme_docno
                        FROM int$stg_createpo a, purordmain b
                       WHERE     UPPER(a.scheme_docno) =
                                    UPPER(b.scheme_docno)
                             AND userid = p_userid
                             AND ycode =
                                    (SELECT ycode
                                       FROM admyear
                                      WHERE p_logging_date BETWEEN dtfr
                                                               AND dtto)
                    GROUP BY a.scheme_docno
                      HAVING COUNT(DISTINCT a.scheme_docno) > 0);

      g_mark := 'D1017';

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'Diferent Scheme Doc No for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.scheme_docno)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.scheme_docno) >
                                                    1) x)) alias7;

      g_mark := 'D1018';

      -- supplier_slid checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Supplier SLID (' || a.supplier_slid || ')',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     NOT EXISTS (SELECT slid
                          FROM finsl b
                         WHERE     UPPER(b.slid) =
                                      coalesce(UPPER(a.supplier_slid), 'x')
                               AND coalesce(ext, 'N') = 'N')
                AND a.userid = p_userid;

      g_mark := 'D1019';

      -- supplier_slid checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Same PO should have same Supplier''s SLID for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT b.docno,
                                                 COUNT(DISTINCT supplier_slid)
                                            FROM int$stg_createpo b
                                           WHERE b.userid = p_userid
                                        GROUP BY b.docno
                                          HAVING COUNT(
                                                    DISTINCT supplier_slid) >
                                                    1) x)) alias7;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Supplier is TDS agency Type - ' || a.supplier_slid,
                clock_timestamp()
           FROM int$stg_createpo a, finsl b, admcls c
          WHERE     UPPER(a.supplier_slid) = UPPER(b.slid)
                AND b.clscode = c.clscode
                AND c.clstype = 'D'
                AND a.userid = p_userid;

      -- start rev : 018
      BEGIN
         SELECT DISTINCT sitetype
           INTO STRICT v_site_type
           FROM (SELECT sitetype
                   FROM int$stg_createpo a, admsite s
                  WHERE     a.userid = p_userid
                        AND UPPER(a.site_shortname) = UPPER(s.shrtname)
                        AND coalesce(s.ext, 'N') = 'N') tmp
          WHERE tmp.sitetype = 'MS-CO-OM-TS';
      EXCEPTION
         WHEN no_data_found
         THEN
            v_site_type := NULL;
      END;

      IF coalesce(v_site_type, '@@') = 'MS-CO-OM-TS'
      THEN
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   a.lineno,
                   'CREATEPO',
                   p_userid,
                   'Data Validation',
                   'Non-consignment purchase is not applicable for this type of site. Please select only consignment applicable suppliers.',
                   clock_timestamp()
              FROM int$stg_createpo a, finsl b
             WHERE     UPPER(a.supplier_slid) = UPPER(b.slid)
                   AND b.whether_consignment = 'N'
                   AND a.supplier_slid IS NOT NULL
                   AND a.userid = p_userid;
      END IF;

      -- end rev : 018
      g_mark := 'D1020';

      -- supplier_slid checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Supplier''s SLID',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.userid = p_userid
                AND a.supplier_slid NOT IN
                       (SELECT DISTINCT finsl.slid
                          FROM fingl, admcls, finsl
LEFT OUTER JOIN finsl_ou ON (finsl.slcode = finsl_ou.slcode)
WHERE finsl.glcode = fingl.glcode AND finsl.clscode = admcls.clscode  AND fingl.srctype = 'R' AND admcls.clstype <> 'D' AND coalesce(finsl.ext, 'N') = 'N' AND (   (    (SELECT COUNT(*)
                                               FROM finsl_ou
                                              WHERE slcode = finsl.slcode) >
                                               0
                                        AND (finsl_ou.admsite_code =
                                                (SELECT code
                                                   FROM admsite
                                                  WHERE UPPER(shrtname) =
                                                           UPPER(
                                                              a.site_shortname))))
                                    OR ( (SELECT COUNT(*)
                                            FROM finsl_ou
                                           WHERE slcode = finsl.slcode) = 0)) );

      g_mark := 'D1021';

      UPDATE int$stg_createpo_all_fld a
         -- START REV : 009
         -- set    (pcode, dtto) = (select slcode, (nvl(a.orddt,sysdate) + nvl(pur_duedays,0))
         SET(pcode, dtto) =
                (SELECT slcode,
                        (coalesce(a.orddt, current_date) + INTERVAL '1 day' * coalesce(a.validity_period, coalesce(b.pur_duedays, 0)))
                   -- END REV : 009
                   FROM finsl b
                  WHERE (UPPER(b.slid) = UPPER(a.supplier_slid)))
       WHERE a.supplier_slid IS NOT NULL AND a.userid = p_userid;

      g_mark := 'D1022';

      UPDATE int$stg_createpo_all_fld a
         SET enable_lgt_track =
                (SELECT CASE WHEN shipment_tracking_appl='N' THEN  0  ELSE 1 END
                   FROM finsl_ou
                  WHERE     admou_code = a.admou_code
                        AND admsite_code = a.admsite_code
                        AND slcode = a.pcode)
       WHERE a.userid = p_userid;

      g_mark := 'D1023';

      UPDATE int$stg_createpo_all_fld a
         SET enable_lgt_track =
                (SELECT CASE WHEN shipment_tracking_appl='N' THEN  0  ELSE 1 END
                   FROM finsl
                  WHERE slcode = a.pcode)
       WHERE a.enable_lgt_track IS NULL AND a.userid = p_userid;

      g_mark := 'D1024';

      -- START REV : 023
      /*
      -- docno chking
      INSERT INTO int$error_log (code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT int$error_log_code.NEXTVAL,
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Duplicate Doc No. (' || a.docno || ')',
                SYSDATE
           FROM int$stg_createpo a, purordmain b
          WHERE     UPPER (a.docno) = UPPER (b.docno)
                AND a.userid = p_userid
                AND b.ycode = (SELECT ycode
                                 FROM admyear
                                WHERE p_logging_date BETWEEN dtfr AND dtto);
          */
          -- END REV : 023
      g_mark := 'D1025';

      -- agent_slid chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid agent SLID (' || a.agent_slid || ')',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.agent_slid NOT IN (SELECT x.slid
                          FROM finsl x, admcls y
                         WHERE     x.clscode = y.clscode
                               AND y.clstype = 'A'
                               AND coalesce(x.ext, 'N') = 'N')
                AND a.agent_slid IS NOT NULL
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Agenet is TDS agency Type - ' || a.agent_slid,
                clock_timestamp()
           FROM int$stg_createpo a, finsl b, admcls c
          WHERE     UPPER(a.agent_slid) = UPPER(b.slid)
                AND b.clscode = c.clscode
                AND c.clstype = 'D'
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Agent SLID (' || a.agent_slid || ') is extinct',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.agent_slid IN (SELECT x.slid
                          FROM finsl x, admcls y
                         WHERE     x.clscode = y.clscode
                               AND y.clstype = 'A'
                               AND coalesce(x.ext, 'N') = 'Y')
                AND a.userid = p_userid;

      g_mark := 'D1026';

      -- agent_slid checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Same PO should have same Agent SLID for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT b.docno,
                                                 COUNT(DISTINCT agent_slid)
                                            FROM int$stg_createpo b
                                           WHERE b.userid = p_userid
                                        GROUP BY b.docno
                                          HAVING COUNT(DISTINCT agent_slid) >
                                                    1) x)) alias7;

      g_mark := 'D1027';

      -- agrate checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Agent ID is missing where as agent rate is given.',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.userid = p_userid
                AND a.agent_slid IS NULL
                AND a.agrate IS NOT NULL;

      g_mark := 'D1028';

      -- agrate checking (1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Agent Rate',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.userid = p_userid
                AND (agent_slid IS NULL AND agrate IS NOT NULL);

      g_mark := 'D1029';

      -- agrate checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Agent Rate, value should be between 0 and 99.99',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE a.userid = p_userid AND (agrate < 0 OR agrate > 99.99);

      UPDATE int$stg_createpo_all_fld a
         SET agcode =
                (SELECT slcode
                   FROM finsl b
                  WHERE (UPPER(b.slid) = UPPER(a.agent_slid)))
       WHERE a.agent_slid IS NOT NULL AND a.userid = p_userid;

      g_mark := 'D1030';

      -- agrate checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Same PO should have same Agent rate for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.agrate)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.agrate) >
                                                    1) x)) alias7;

      g_mark := 'D1031';
      g_mark := 'D1032';
      g_mark := 'D1033';

      -- transporters_slid chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Transporters SLID (' || a.transporters_slid || ')',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.transporters_slid IS NOT NULL
                AND a.transporters_slid NOT IN (SELECT x.slid
                          FROM finsl x, admcls y
                         WHERE     x.clscode = y.clscode
                               AND y.clstype = 'T'
                               AND coalesce(x.ext, 'N') = 'N')
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Agenet is TDS agency Type - ' || a.transporters_slid,
                clock_timestamp()
           FROM int$stg_createpo a, finsl b, admcls c
          WHERE     UPPER(a.transporters_slid) = UPPER(b.slid)
                AND b.clscode = c.clscode
                AND c.clstype = 'D'
                AND a.userid = p_userid;

      -- transporters_slid chking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'Transporters SLID ('
                || a.transporters_slid
                || ') is extinct',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.transporters_slid IN (SELECT x.slid
                          FROM finsl x, admcls y
                         WHERE     x.clscode = y.clscode
                               AND y.clstype = 'T'
                               AND coalesce(x.ext, 'N') = 'Y')
                AND a.userid = p_userid;

      g_mark := 'D1034';

      -- transporters_slid checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Transporters SLID should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.transporters_slid)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.transporters_slid) >
                                                    1) x)) alias7;

      g_mark := 'D1035';

      UPDATE int$stg_createpo_all_fld a
         SET trpcode =
                (SELECT slcode
                   FROM finsl b
                  WHERE (UPPER(b.slid) = UPPER(a.transporters_slid)))
       WHERE a.transporters_slid IS NOT NULL AND a.userid = p_userid;

      g_mark := 'D1036';

      -- ord_rem checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Same PO should have same PO Remarks',
                clock_timestamp()
           FROM int$stg_createpo a, int$stg_createpo b
          WHERE     a.userid = p_userid
                AND UPPER(coalesce(a.docno, 'x')) = UPPER(coalesce(b.docno, 'x'))
                AND UPPER(coalesce(a.ord_rem, 'x')) <>
                       UPPER(coalesce(b.ord_rem, 'x'));

      g_mark := 'D1037';

      -- dtfr checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'Invalid Date from ('
                || TO_CHAR(a.dtfr, 'dd/mm/rrrr')
                || ')',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.userid = p_userid
                AND a.dtfr IS NOT NULL
                AND a.dtfr < a.orddt;

      g_mark := 'D1038';
      -- dtfr checking
      /*
      insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
      select  int$error_log_code.nextval, a.lineno, 'CREATEPO', p_userid, 'Data Validation',
              'PO Valid from should be same for a single PO', sysdate
      from    int$stg_createpo a, int$stg_createpo b
      where   a.userid = p_userid
      and     upper(nvl(a.docno,'x')) = upper(nvl(b.docno,'x'))
      and     a.dtfr <> b.dtfr;
      */
      g_mark := 'D1039';

      -- validity_period checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid validity period',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE a.userid = p_userid AND coalesce(a.validity_period, 0) < 0;

      g_mark := 'D1040';

      -- validity_period checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'PO Valid from should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.validity_period)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.validity_period) >
                                                    1) x)) alias7;

      g_mark := 'D1041';

      -- validity_period checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Payment Term Should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.payterm)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.payterm) >
                                                    1) x)) alias7;

      g_mark := 'D1042';

      -- whether_consignment checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Selected Supplier is Non-Consignment hence Whether consignment Value should be ''No''',
                clock_timestamp()
           FROM int$stg_createpo a, finsl b
          WHERE     a.userid = p_userid
                AND UPPER(a.supplier_slid) = UPPER(b.slid)
                AND b.whether_consignment = 'N'
                AND UPPER(a.whether_consignment) <> 'NO';

      g_mark := 'D1043';

      -- whether_consignment checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Selected Supplier is Consignment hence consignment Value should be YES / NO',
                clock_timestamp()
           FROM int$stg_createpo a, finsl b
          WHERE     a.userid = p_userid
                AND UPPER(a.supplier_slid) = UPPER(b.slid)
                AND b.whether_consignment = 'Y'
                AND UPPER(a.whether_consignment) NOT IN ('YES', 'NO');

      g_mark := 'D1044';

      -- whether_consignment checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Whether consignment Should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.whether_consignment)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.whether_consignment) >
                                                    1) x)) alias7;

      g_mark := 'D1045';

      -- MRCHANTDISER_USERNAME checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Mrchantdiser username',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.mrchantdiser_username IS NOT NULL
                AND UPPER(a.mrchantdiser_username) NOT IN (SELECT UPPER(e.abbre)
                          FROM hrdemp e
LEFT OUTER JOIN hrddept d ON (e.deptcode = d.deptcode)
WHERE e.ext = 'N' AND e.ecode <> 1 )
                AND a.userid = p_userid;

      g_mark := 'D1046';

      -- mrchantdiser_username checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Mrchantdiser username should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.mrchantdiser_username)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.mrchantdiser_username) >
                                                    1) x)) alias7;

      g_mark := 'D1047';

      UPDATE int$stg_createpo_all_fld a
         SET mrchndsrcode =
                (SELECT ecode
                   FROM hrdemp b
                  WHERE (UPPER(b.abbre) = UPPER(a.mrchantdiser_username)))
       WHERE a.mrchantdiser_username IS NOT NULL AND a.userid = p_userid;

      g_mark := 'D1048';

      -- fintradegrp_name checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid trade group',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(coalesce(a.fintradegrp_name, 'LOCAL')) NOT IN (SELECT b.name
                          FROM fintradegrp b
                         WHERE coalesce(b.ext, 'N') = 'N')
                AND a.userid = p_userid;

      g_mark := 'D1049';

      -- fintradegrp_name checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Tradegroup  should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.fintradegrp_name)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.fintradegrp_name) >
                                                    1) x)) alias7;

      g_mark := 'D1049';

      UPDATE int$stg_createpo_all_fld a
         SET fintradegrp_code =
                (SELECT code
                   FROM fintradegrp b
                  WHERE (UPPER(b.name) = UPPER(a.fintradegrp_name)))
       WHERE a.fintradegrp_name IS NOT NULL AND a.userid = p_userid;

      /*
      g_mark := 'D1030';
      -- purterm_name checking (2)
      insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
      select  int$error_log_code.nextval, a.lineno, 'CREATEPO', p_userid, 'Data Validation',
              'Given Term Name is more than once available in Term Master, hence cant consider proper one', sysdate
      from    int$stg_createpo_all_fld a, purtermmain b
      where   a.purterm_name = b.name
      and     a.userid = p_userid
      group by a.purterm_name
      having  count(1) > 1;
      */
      g_mark := 'D1051';

      -- purterm_name checking (3)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Given term name is extinct',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.purterm_name IS NOT NULL
                AND a.purterm_name IN (SELECT b.name
                                         FROM purtermmain b
                                        WHERE coalesce(b.ext, 'N') = 'Y')
                AND a.userid = p_userid;

      g_mark := 'D1052';

      -- purterm_name checking (4)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Term name is not belongs to the given Trade Group',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.purterm_name IS NOT NULL
                AND UPPER(a.purterm_name) NOT IN
                       (SELECT UPPER(b.name)
                          FROM purtermmain b
                         WHERE     coalesce(b.ext,
                                        'N') = 'N'
                               AND b.fintradegrp_code =
                                      (SELECT c.code
                                         FROM fintradegrp c
                                        WHERE     UPPER(c.name) =
                                                     UPPER(
                                                        a.fintradegrp_name)
                                              AND coalesce(c.ext, 'N') = 'N'))
                AND a.userid = p_userid;

      g_mark := 'D1053';

      -- purterm_name checking (5)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Trade Group defined in the excel file hence ''Term Name'' can not be null',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE fintradegrp_name IS NOT NULL AND purterm_name IS NULL;

      g_mark := 'D1054';

      -- purterm_name checking (7)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'Term name should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.purterm_name)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.purterm_name) >
                                                    1) x)) alias7;

      g_mark := 'D1055';

      UPDATE int$stg_createpo_all_fld a
         SET purtermcode =
                (SELECT code
                   FROM purtermmain b
                  WHERE (UPPER(b.name) = UPPER(a.purterm_name)))
       WHERE a.purterm_name IS NOT NULL AND a.userid = p_userid;

      g_mark := 'D1056';

      -- form_name checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Form Name as it is not available in Form Master',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.form_name IS NOT NULL
                AND UPPER(a.form_name) NOT IN (SELECT UPPER(b.formname)
                          FROM finform b
                         WHERE coalesce(b.ext, 'N') = 'N')
                AND a.userid = p_userid;

      g_mark := 'D1057';

      -- form_name checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Form Name provided is extinct',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.form_name IS NOT NULL
                AND UPPER(a.form_name) =
                       (SELECT UPPER(b.formname)
                          FROM finform b
                         WHERE     coalesce(b.ext, 'N') = 'Y'
                               AND UPPER(b.formname) = UPPER(a.form_name))
                AND a.userid = p_userid;

      g_mark := 'D1058';

      -- form_name checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                '''Local'' Trade group should have only Form Name as ''None''',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(a.fintradegrp_name) = 'LOCAL'
                AND UPPER(a.form_name) <> 'NONE'
                AND a.userid = p_userid;

      g_mark := 'D1059';

      -- form_name checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'Form name should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.form_name)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.form_name) >
                                                    1) x)) alias7;

      g_mark := 'D1060';

      -- form_name checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Trade Group defined in the excel file hence ''Form Name'' can not be null',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.fintradegrp_name IS NOT NULL
                AND a.form_name IS NULL
                AND a.userid = p_userid;

      g_mark := 'D1061';

      UPDATE int$stg_createpo_all_fld a
         SET formcode =
                (SELECT formcode
                   FROM finform b
                  WHERE (UPPER(b.formname) = UPPER(a.form_name)))
       WHERE a.form_name IS NOT NULL AND a.userid = p_userid;

      -- currency_shortcode checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid currency shortcode (' || a.supplier_slid || ')',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     NOT EXISTS (SELECT shortcode
                          FROM admcurrency b
                         WHERE isextinct = 0)
                AND a.userid = p_userid;

      g_mark := 'D1062';

      -- currency_shortcode checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Conginment Transaction value should be null as currency will be  base currency autoomaically',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(a.whether_consignment) = 'YES'
                AND UPPER(currency_shortcode) <>
                       (SELECT UPPER(shortcode)
                          FROM admcurrency b
                         WHERE b.isbase = 1 AND coalesce(b.isextinct, 0) = 0)
                AND a.userid = p_userid;

      g_mark := 'D1063';

      -- currency_shortcode checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'Currency should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(
                                                    DISTINCT m.currency_shortcode)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.currency_shortcode) >
                                                    1) x)) alias7;

      g_mark := 'D1064';

      /*
      update int$stg_createpo_all_fld a
      set    admcurrency_code = (select code
                                 from   admcurrency b
                                 where  (upper(b.shortcode) = upper(a.currency_shortcode)))
      where  a.currency_shortcode is not null
      and    a.userid = p_userid;
      */
      UPDATE int$stg_createpo_all_fld a
         SET admcurrency_code =
                (SELECT b.code
                   FROM admcurrency b
                  WHERE b.isbase = 1 AND coalesce(b.isextinct, 0) = 0)
       WHERE UPPER(a.whether_consignment) = 'YES' AND a.userid = p_userid;

      g_mark := 'D1065';

      UPDATE int$stg_createpo_all_fld a
         SET admcurrency_code =
                (SELECT b.code
                   FROM admcurrency b
                  WHERE     UPPER(b.shortcode) =
                               UPPER(trim(both a.currency_shortcode))
                        AND coalesce(b.isextinct, 0) = 0)
       WHERE UPPER(a.whether_consignment) = 'NO' AND a.userid = p_userid;

      g_mark := 'D1066';

      UPDATE int$stg_createpo_all_fld a
         SET admcurrency_code =
                (SELECT coalesce(admcurrency_code, 1)
                   FROM finsl b
                  WHERE slcode = a.pcode)
       WHERE     UPPER(a.whether_consignment) = 'NO'
             AND a.admcurrency_code IS NULL
             AND a.userid = p_userid;

      g_mark := 'D1067';

      -- exrate checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'For default currency exchange rate not required to provide in excel',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(currency_shortcode) =
                       (SELECT UPPER(shortcode)
                          FROM admcurrency b
                         WHERE b.isbase = 1 AND coalesce(b.isextinct, 0) = 0)
                AND a.exrate IS NOT NULL
                AND a.userid = p_userid;

      g_mark := 'D1068';

      -- order_rate checking (1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Value is not greater than equal to 0 /decimal value is not within 3 digit',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE a.order_rate <= 0 AND a.userid = p_userid;

      g_mark := 'D1069';

      -- order_rate checking (2)
      -- Checking only for old barodes, not for new barcodes or for items from F5 option
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Supllier has Price Chart Applicability hence Rate should be blank in excel and rate will be picked from Price Chart of the Item',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a, finsl b
          WHERE     a.pcode = b.slcode
                AND a.icode_barcode IS NOT NULL
                AND b.pur_price_chart_appl = 'Y'
                AND a.order_rate IS NOT NULL
                AND a.userid = p_userid;

      -- START REV : 002
      -- END REV : 002
      g_mark := 'D1073';

      -- order_rate checking vs profile settings
      -- order_rate checking (3B)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                -- START REV : 002
                -- 'You are not allowed to update rate as per your profile settings. Do not provide rate in order_rate field.'
                'User do not have priviledge to provide own rate as he/she do not have priviledge to change order rate.' -- END REV : 002
                                                                                                                        ,
                clock_timestamp()
           FROM int$stg_createpo_all_fld a, hrdemp b, admprof c
          WHERE     a.userid = b.ecode
                AND b.profcode = c.profcode
                AND coalesce(c.allow_po_rate_change, 'N') = 'N'
                AND a.order_rate IS NOT NULL
                AND a.userid = p_userid;

      g_mark := 'D1074';

      -- udfstring01 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin01 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring01)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring01) >
                                                    1) x)) alias7;

      g_mark := 'D1075';

      -- udfstring02 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin02 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring02)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring02) >
                                                    1) x)) alias7;

      g_mark := 'D1076';

      -- udfstring03 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin03 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring03)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring03) >
                                                    1) x)) alias7;

      g_mark := 'D1077';

      -- udfstring04 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin04 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring04)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring04) >
                                                    1) x)) alias7;

      g_mark := 'D1078';

      -- udfstring05 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin05 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring05)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring05) >
                                                    1) x)) alias7;

      g_mark := 'D1047';

      -- udfstring06 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin06 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring06)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring06) >
                                                    1) x)) alias7;

      g_mark := 'D1049';

      -- udfstring07 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string07 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring07)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring07) >
                                                    1) x)) alias7;

      g_mark := 'D1050';

      -- udfstring08 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string08 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring08)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring08) >
                                                    1) x)) alias7;

      g_mark := 'D1051';

      -- udfstring09 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string09 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring09)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring09) >
                                                    1) x)) alias7;

      g_mark := 'D1052';

      -- udfstring10 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string10 should be same for same PO - '
                        || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfstring10)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring10) >
                                                    1) x)) alias7;

      g_mark := 'D1053';

      -- udfnum01 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num01 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfnum01)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfnum01) >
                                                    1) x)) alias7;

      g_mark := 'D1054';

      -- udfnum02 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num02 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfnum02)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfnum02) >
                                                    1) x)) alias7;

      g_mark := 'D1055';

      -- udfnum03 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num03 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfnum03)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfnum03) >
                                                    1) x)) alias7;

      g_mark := 'D1056';

      -- udfnum04 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num04 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfnum04)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfnum04) >
                                                    1) x)) alias7;

      g_mark := 'D1057';

      -- udfnum05 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num05 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfnum05)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfnum05) >
                                                    1) x)) alias7;

      g_mark := 'D1058';

      -- udfdate01 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date01 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfdate01)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfdate01) >
                                                    1) x)) alias7;

      g_mark := 'D1059';

      -- udfdate02 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date02 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfdate02)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfdate02) >
                                                    1) x)) alias7;

      g_mark := 'D1060';

      -- udfdate03 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date03 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfdate03)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfdate03) >
                                                    1) x)) alias7;

      g_mark := 'D1061';

      -- udfdate04 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date04 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfdate04)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfdate04) >
                                                    1) x)) alias7;

      g_mark := 'D1062';

      -- udfdate05 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date05 should be same for same PO - ' || a.docno
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND a.docno IN (SELECT x.docno
                                  FROM (  SELECT m.docno,
                                                 COUNT(DISTINCT m.udfdate05)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.docno
                                          HAVING COUNT(DISTINCT m.udfdate05) >
                                                    1) x)) alias7;

      g_mark := 'D1063';

      -- at last check for the tradegrp, term and from ...
      -- POPULATE TRADE GROUP, TERM AS PER PRIORITY
      DECLARE
         v_pricelistcode   salpricelistmain.pricelistcode%TYPE;
         v_termcode        purtermmain.code%TYPE;
         v_termname        purtermmain.name%TYPE;
         v_tradegrp_code   fintradegrp.code%TYPE;
         v_chng_hdr        purtermmain.header_level_ischangeable%TYPE;
         v_chng_line       purtermmain.line_level_ischangeable%TYPE;
         v_formcode        finform.formcode%TYPE;
         v_flag            record;
      BEGIN
         -- if not provided in excel check for the following.
         FOR i IN (SELECT *
                     FROM int$stg_createpo_all_fld
                    WHERE userid = p_userid)
         LOOP
            v_pricelistcode := NULL;
            v_termcode := NULL;
            v_termname := NULL;
            v_tradegrp_code := NULL;
            v_chng_hdr := NULL;
            v_chng_line := NULL;
            v_formcode := NULL;
            v_flag := NULL;

            --v_flag :=
               CALL db_pkg_get_data_procurement$get_tradegrp_term(
                  i.admou_code::bigint,
                  i.admsite_code::bigint,
                  i.pcode::bigint,
                  v_termcode,
                  v_tradegrp_code,
                  v_formcode);

            IF i.purtermcode IS NULL
            THEN
               UPDATE int$stg_createpo_all_fld
                  SET purtermcode = v_termcode
                WHERE     userid = p_userid
                      -- START REV : 005
                      -- start rev : 018
                      --and    admou_code = i.admou_code
                      AND (   (i.admou_code IS NULL AND admou_code IS NULL)
                           OR (    i.admou_code IS NOT NULL
                               AND admou_code = i.admou_code))
                      -- end rev : 018
                      AND admsite_code = i.admsite_code
                      AND pcode = i.pcode;
            -- END REV : 005
            END IF;

            IF i.fintradegrp_code IS NULL
            THEN
               UPDATE int$stg_createpo_all_fld
                  SET fintradegrp_code = v_tradegrp_code
                WHERE     userid = p_userid
                      -- START REV : 005
                      -- start rev : 018
                      --and    admou_code = i.admou_code
                      AND (   (i.admou_code IS NULL AND admou_code IS NULL)
                           OR (    i.admou_code IS NOT NULL
                               AND admou_code = i.admou_code))
                      -- end rev : 018
                      AND admsite_code = i.admsite_code
                      AND pcode = i.pcode;
            -- END REV : 005
            END IF;

            IF i.formcode IS NULL
            THEN
               UPDATE int$stg_createpo_all_fld
                  SET formcode = v_formcode
                WHERE     userid = p_userid
                      -- START REV : 005
                      -- start rev : 018
                      --and    admou_code = i.admou_code
                      AND (   (i.admou_code IS NULL AND admou_code IS NULL)
                           OR (    i.admou_code IS NOT NULL
                               AND admou_code = i.admou_code))
                      -- end rev : 018
                      AND admsite_code = i.admsite_code
                      AND pcode = i.pcode;
            -- END REV : 005
            END IF;
         END LOOP;
      END;

      g_mark := 'D1050';

      -- purterm_name checking (1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Trade Group not available in excel and the Term also not available in Supplier Master',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a, finsl b
          WHERE     a.pcode = b.slcode
                AND a.fintradegrp_code IS NULL
                AND a.purtermcode IS NULL
                AND a.userid = p_userid;

      -- Checking for PURTERM_NAME(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Trade Group not available excel and the same also not available in Supplier Master',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE a.purtermcode IS NULL AND a.userid = p_userid;

      -- Checking for FORM_NAME(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Form Name not available excel and the same not available in Supplier Master also',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE a.formcode IS NULL AND a.userid = p_userid;

      -- Checking for FINTRADEGRP_NAME(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Trade Group not available excel and the same not available in Supplier Master also',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE a.fintradegrp_code IS NULL AND a.userid = p_userid;

      UPDATE int$stg_createpo_all_fld a
         SET exrate = 1
       WHERE a.admcurrency_code = 1 AND a.userid = p_userid;

      UPDATE int$stg_createpo_all_fld a
         SET exrate =
                (SELECT exrate
                   FROM admcurrency_rate m
                  WHERE     m.admcurrency_code = a.admcurrency_code
                        AND m.effdate =
                               (SELECT MAX(d.effdate)
                                  FROM admcurrency_rate d
                                 WHERE     d.admcurrency_code =
                                              a.admcurrency_code
                                       AND d.effdate <= a.orddt))
       WHERE     a.admcurrency_code <> 1
             AND a.exrate IS NULL
             AND a.userid = p_userid;

      --END IF;
      --IF  'DETAIL' = 'DETAIL' THEN
      UPDATE int$stg_createpo a
         SET icode_barcode = UPPER(icode_barcode)
       WHERE a.userid = p_userid;

      g_mark := 'V001';

      -- Checking for ICODE_BARCODE(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'ICODE/BARCODE is not available in Item Master',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.lineno NOT IN
                       (SELECT coalesce(a.lineno, 0) lineno
                          FROM int$stg_createpo a INNER JOIN invitem i1
                         ON     (   (UPPER(a.icode_barcode) = UPPER(i1.icode))
                                    OR (UPPER(a.icode_barcode) = UPPER(i1.barcode)))
                               WHERE a.userid = p_userid)
                AND icode_barcode IS NOT NULL
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'it is Extinct Item',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.lineno IN
                       (SELECT coalesce(a.lineno, 0) lineno
                          FROM int$stg_createpo a, invitem i1
                         WHERE     (   (UPPER(a.icode_barcode) = i1.icode)
                                    OR (UPPER(a.icode_barcode) = i1.barcode))
                               AND coalesce(i1.ext, 'N') = 'Y'
                               AND a.userid = p_userid)
                AND icode_barcode IS NOT NULL
                AND a.userid = p_userid;

      g_mark := 'V002';

      -- Checking for ICODE_BARCODE(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'OEM_BARCODE and ICODE can not be provided simulteneously for same record',
                clock_timestamp()
           FROM int$stg_createpo a, invitem i1
          WHERE     (   (UPPER(a.icode_barcode) = i1.icode)
                     OR (UPPER(a.icode_barcode) = i1.barcode))
                AND coalesce(i1.ext, 'N') <> 'N'
                AND a.oem_barcode IS NOT NULL
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Barcode already exists. Provide new barcode for item creation or move the barcodes to icode_barcode for use of the existing barcodes.',
                clock_timestamp()
           FROM int$stg_createpo a, invitem i1
          WHERE     (   (UPPER(a.oem_barcode) = i1.icode)
                     OR (UPPER(a.oem_barcode) = i1.barcode))
                AND a.oem_barcode IS NOT NULL
                AND a.userid = p_userid;

      -- START REV : 021
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'Duplicate OEM_BARCODE found in sheet - '
                        || UPPER(a.oem_barcode)
                           dup_fld
                   FROM int$stg_createpo a
                  WHERE     a.userid = p_userid
                        AND UPPER(a.oem_barcode) IN (SELECT x.oem_barcode
                                  FROM (  SELECT UPPER(oem_barcode)
                                                    oem_barcode,
                                                 COUNT(*)
                                            FROM int$stg_createpo m
                                           WHERE m.userid = p_userid
                                        GROUP BY UPPER(oem_barcode)
                                          HAVING COUNT(*) > 1) x)) alias11;

      -- END REV : 021
      g_mark := 'V003';

      UPDATE int$stg_createpo_all_fld a
         SET icode =
                (SELECT icode
                   FROM invitem b

                  WHERE (   (b.icode = a.icode_barcode)
                         OR (b.barcode = a.icode_barcode)))
       -- END REV : 016
       WHERE a.icode_barcode IS NOT NULL AND a.userid = p_userid;

      g_mark := 'V005';

      -- Checking for ARTICLE_NAME(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'ICODE / BARCODE of Item Already provided, Article Name would be blank in this case',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.icode_barcode IS NOT NULL
                AND a.article_name IS NOT NULL
                AND a.userid = p_userid;

      -- Checking for ARTICLE_NAME(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid / Extinct Article Name',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(a.article_name) NOT IN (SELECT UPPER(name)
                          FROM invarticle
                         WHERE coalesce(ext, 'N') = 'N')
                AND a.userid = p_userid;

      IF NOT FOUND
      THEN
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   a.lineno,
                   'CREATEPO',
                   p_userid,
                   'Data Validation',
                   'Invalid / Extinct Article Name',
                   clock_timestamp()
              FROM int$stg_createpo a, invarticle b
             WHERE     UPPER(a.article_name) = UPPER(b.name)
                   AND coalesce(b.ext, 'N') = 'Y'
                   AND a.userid = p_userid;
      END IF;

      g_mark := 'V006';

      -- Checking for ARTICLE_NAME(3)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Article Name need to provide',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.article_name IS NULL
                AND a.icode_barcode IS NULL
                AND a.userid = p_userid;

      g_mark := 'V007';

      -- Checking for ARTICLE_NAME(5)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'User do not have permission to create new item',
                clock_timestamp()
           FROM int$stg_createpo a, hrdemp b, admprof c
          WHERE     a.userid = b.ecode
                AND b.profcode = c.profcode
                AND coalesce(c.create_new_itemcode, 'N') = 'N'
                AND a.article_name IS NOT NULL
                AND a.userid = p_userid;

      g_mark := 'V003';

      UPDATE int$stg_createpo_all_fld a
         SET(article_code,
              grpcode,
              ageing_appl,
              costing_method) =
                (SELECT b.code,
                        c.grpcode,
                        c.ageing_appl,
                        c.costing_method
                   FROM invarticle b, invgrp c
                  WHERE     b.grpcode = c.grpcode
                        AND UPPER(b.name) = UPPER(a.article_name))
       WHERE a.article_name IS NOT NULL AND a.userid = p_userid;

      -- START REV : 010
      g_mark := 'V004.1';

      UPDATE int$stg_createpo_all_fld a
         SET negative_stk_alert =
                (SELECT c.grp_negative_stock_alert
                   FROM invgrp c
                  WHERE a.grpcode = c.grpcode)
       WHERE a.userid = p_userid AND a.negative_stk_alert IS NULL;

      g_mark := 'V004.2';

      UPDATE int$stg_createpo_all_fld a
         SET uom =
                (SELECT c.grp_unitname
                   FROM invgrp c
                  WHERE a.grpcode = c.grpcode)
       WHERE a.userid = p_userid AND a.uom IS NULL;

      g_mark := 'V004.3';

      UPDATE int$stg_createpo_all_fld a
         SET barunit =
                (SELECT c.grp_barunit
                   FROM invgrp c
                  WHERE a.grpcode = c.grpcode)
       WHERE a.userid = p_userid AND a.barunit IS NULL;

      -- END REV : 010
      g_mark := 'V008';

      -- Checking for CNAME1(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 1 but it is extinct',
                clock_timestamp()
           FROM int$stg_createpo a, invcat1 b
          WHERE     UPPER(a.cname1) = UPPER(b.cname)
                AND coalesce(b.ext, 'N') = 'Y'
                AND a.userid = p_userid;

      g_mark := 'V009';

      -- Checking for CNAME1(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-1',
                clock_timestamp()
           FROM int$stg_createpo a, hrdemp b, admprof c
          WHERE     a.userid = b.ecode
                AND b.profcode = c.profcode
                AND UPPER(a.cname1) NOT IN (SELECT UPPER(cname)
                                               FROM invcat1) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
                AND coalesce(c.lock_cat1, 'N') = 'Y'
                AND a.cname1 IS NOT NULL
                AND a.userid = p_userid;

      -- START REV : 020
      g_mark := 'V009.1';

      -- Checking for CNAME1(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'Multiple category-1 ('
                || a.cname1
                || ') found. Please marge the category-1 and proceed.',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.userid = p_userid
                AND UPPER(a.cname1) IN (SELECT x.cat1
                          FROM (  SELECT UPPER(a.cname1) cat1,
                                         COUNT(DISTINCT UPPER(a.cname1))
                                    FROM int$stg_createpo_all_fld a, invcat1 b
                                   WHERE     UPPER(a.cname1) = UPPER(b.cname)
                                         AND coalesce(b.ext, 'N') = 'N'
                                         AND a.cname1 IS NOT NULL
                                         AND a.userid = p_userid
                                GROUP BY UPPER(a.cname1)
                                  HAVING COUNT(DISTINCT UPPER(a.cname1)) >
                                            1) x);

      -- END REV : 020
      g_mark := 'V010';

      -- Checking for CNAME1(V010x)
      UPDATE int$stg_createpo_all_fld a
         SET ccode1 =
                (SELECT MIN(ccode)
                   FROM invcat1 b
                  WHERE UPPER(b.cname) = UPPER(a.cname1))
       WHERE cname1 IS NOT NULL AND a.userid = p_userid;

      g_mark := 'V011';

      -- Checking for CNAME2(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 2 but it is extinct',
                clock_timestamp()
           FROM int$stg_createpo a, invcat2 b
          WHERE     UPPER(a.cname2) = UPPER(b.cname)
                AND coalesce(b.ext, 'N') = 'Y'
                AND a.userid = p_userid;

      g_mark := 'V012';

      -- Checking for CNAME2(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-2',
                clock_timestamp()
           FROM int$stg_createpo a, hrdemp b, admprof c
          WHERE     a.userid = b.ecode
                AND b.profcode = c.profcode
                AND UPPER(a.cname2) NOT IN (SELECT UPPER(cname)
                                               FROM invcat2) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
                AND coalesce(c.lock_cat2, 'N') = 'Y'
                AND a.cname2 IS NOT NULL
                AND a.userid = p_userid;

      -- START REV : 020
      g_mark := 'V012.1';

      -- Checking for CNAME2(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'Multiple category-2 ('
                || a.cname2
                || ') found. Please marge the category-2 and proceed.',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.userid = p_userid
                AND UPPER(a.cname2) IN (SELECT x.cat2
                          FROM (  SELECT UPPER(a.cname2) cat2,
                                         COUNT(DISTINCT UPPER(a.cname2))
                                    FROM int$stg_createpo_all_fld a, invcat2 b
                                   WHERE     UPPER(a.cname2) = UPPER(b.cname)
                                         AND coalesce(b.ext, 'N') = 'N'
                                         AND a.cname2 IS NOT NULL
                                         AND a.userid = p_userid
                                GROUP BY UPPER(a.cname2)
                                  HAVING COUNT(DISTINCT UPPER(a.cname2)) >
                                            1) x);

      -- END REV : 020
      g_mark := 'V013';

      -- Checking for CNAME2(V010x)
      UPDATE int$stg_createpo_all_fld a
         SET ccode2 =
                (SELECT MIN(ccode)
                   FROM invcat2 b
                  WHERE UPPER(b.cname) = UPPER(a.cname2))
       WHERE cname2 IS NOT NULL AND a.userid = p_userid;

      g_mark := 'V014';

      -- Checking for CNAME3(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 3 but it is extinct',
                clock_timestamp()
           FROM int$stg_createpo a, invcat3 b
          WHERE     UPPER(a.cname3) = UPPER(b.cname)
                AND coalesce(b.ext, 'N') = 'Y'
                AND a.userid = p_userid;

      g_mark := 'V015';

      -- Checking for CNAME3(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-3',
                clock_timestamp()
           FROM int$stg_createpo a, hrdemp b, admprof c
          WHERE     a.userid = b.ecode
                AND b.profcode = c.profcode
                AND UPPER(a.cname3) NOT IN (SELECT UPPER(cname)
                                               FROM invcat3) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
                AND coalesce(c.lock_cat3, 'N') = 'Y'
                AND a.cname3 IS NOT NULL
                AND a.userid = p_userid;

      -- START REV : 020
      g_mark := 'V012.1';

      -- Checking for CNAME3(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'Multiple category-3 ('
                || a.cname3
                || ') found. Please marge the category-3 and proceed.',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.userid = p_userid
                AND UPPER(a.cname3) IN (SELECT x.cat3
                          FROM (  SELECT UPPER(a.cname3) cat3,
                                         COUNT(DISTINCT UPPER(a.cname3))
                                    FROM int$stg_createpo_all_fld a, invcat3 b
                                   WHERE     UPPER(a.cname3) = UPPER(b.cname)
                                         AND coalesce(b.ext, 'N') = 'N'
                                         AND a.cname3 IS NOT NULL
                                         AND a.userid = p_userid
                                GROUP BY UPPER(a.cname3)
                                  HAVING COUNT(DISTINCT UPPER(a.cname3)) >
                                            1) x);

      -- END REV : 020
      g_mark := 'V016';

      -- Checking for CNAME3(V010x)
      UPDATE int$stg_createpo_all_fld a
         SET ccode3 =
                (SELECT MIN(ccode)
                   FROM invcat3 b
                  WHERE UPPER(b.cname) = UPPER(a.cname3))
       WHERE cname3 IS NOT NULL AND a.userid = p_userid;

      g_mark := 'V017';

      -- Checking for CNAME4(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 4 but it is extinct',
                clock_timestamp()
           FROM int$stg_createpo a, invcat4 b
          WHERE     UPPER(a.cname4) = UPPER(b.cname)
                AND coalesce(b.ext, 'N') = 'Y'
                AND a.userid = p_userid;

      g_mark := 'V018';

      -- Checking for CNAME4(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-4',
                clock_timestamp()
           FROM int$stg_createpo a, hrdemp b, admprof c
          WHERE     a.userid = b.ecode
                AND b.profcode = c.profcode
                AND UPPER(a.cname4) NOT IN (SELECT UPPER(cname)
                                               FROM invcat4) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
                AND coalesce(c.lock_cat4, 'N') = 'Y'
                AND a.cname4 IS NOT NULL
                AND a.userid = p_userid;

      -- START REV : 020
      g_mark := 'V012.1';

      -- Checking for CNAME4(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'Multiple category-4 ('
                || a.cname4
                || ') found. Please marge the category-4 and proceed.',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.userid = p_userid
                AND UPPER(a.cname4) IN (SELECT x.cat4
                          FROM (  SELECT UPPER(a.cname4) cat4,
                                         COUNT(DISTINCT UPPER(a.cname4))
                                    FROM int$stg_createpo_all_fld a, invcat4 b
                                   WHERE     UPPER(a.cname4) = UPPER(b.cname)
                                         AND coalesce(b.ext, 'N') = 'N'
                                         AND a.cname4 IS NOT NULL
                                         AND a.userid = p_userid
                                GROUP BY UPPER(a.cname4)
                                  HAVING COUNT(DISTINCT UPPER(a.cname4)) >
                                            1) x);

      -- END REV : 020
      g_mark := 'V019';

      -- Checking for CNAME4(V010x)
      UPDATE int$stg_createpo_all_fld a
         SET ccode4 =
                (SELECT MIN(ccode)
                   FROM invcat4 b
                  WHERE UPPER(b.cname) = UPPER(a.cname4))
       WHERE cname4 IS NOT NULL AND a.userid = p_userid;

      g_mark := 'V020';

      -- Checking for CNAME5(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 5 but it is extinct',
                clock_timestamp()
           FROM int$stg_createpo a, invcat5 b
          WHERE     UPPER(a.cname5) = UPPER(b.cname)
                AND coalesce(b.ext, 'N') = 'Y'
                AND a.userid = p_userid;

      g_mark := 'V021';

      -- Checking for CNAME5(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-5',
                clock_timestamp()
           FROM int$stg_createpo a, hrdemp b, admprof c
          WHERE     a.userid = b.ecode
                AND b.profcode = c.profcode
                AND UPPER(a.cname5) NOT IN (SELECT UPPER(cname)
                                               FROM invcat5) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
                AND coalesce(c.lock_cat5, 'N') = 'Y'
                AND a.cname5 IS NOT NULL
                AND a.userid = p_userid;

      -- START REV : 020
      g_mark := 'V012.1';

      -- Checking for CNAME5(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'Multiple category-5 ('
                || a.cname5
                || ') found. Please marge the category-5 and proceed.',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.userid = p_userid
                AND UPPER(a.cname5) IN (SELECT x.cat5
                          FROM (  SELECT UPPER(a.cname5) cat5,
                                         COUNT(DISTINCT UPPER(a.cname5))
                                    FROM int$stg_createpo_all_fld a, invcat5 b
                                   WHERE     UPPER(a.cname5) = UPPER(b.cname)
                                         AND coalesce(b.ext, 'N') = 'N'
                                         AND a.cname5 IS NOT NULL
                                         AND a.userid = p_userid
                                GROUP BY UPPER(a.cname5)
                                  HAVING COUNT(DISTINCT UPPER(a.cname5)) >
                                            1) x);

      -- END REV : 020
      g_mark := 'V022';

      -- Checking for CNAME5(V010x)
      UPDATE int$stg_createpo_all_fld a
         SET ccode5 =
                (SELECT MIN(ccode)
                   FROM invcat5 b
                  WHERE UPPER(b.cname) = UPPER(a.cname5))
       WHERE cname5 IS NOT NULL AND a.userid = p_userid;

      g_mark := 'V023';

      -- Checking for CNAME6(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 6 but it is extinct',
                clock_timestamp()
           FROM int$stg_createpo a, invcat6 b
          WHERE     UPPER(a.cname6) = UPPER(b.cname)
                AND coalesce(b.ext, 'N') = 'Y'
                AND a.userid = p_userid;

      g_mark := 'V024';

      -- Checking for CNAME6(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-6',
                clock_timestamp()
           FROM int$stg_createpo a, hrdemp b, admprof c
          WHERE     a.userid = b.ecode
                AND b.profcode = c.profcode
                AND UPPER(a.cname6) NOT IN (SELECT UPPER(cname)
                                               FROM invcat6) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
                AND coalesce(c.lock_cat6, 'N') = 'Y'
                AND a.cname6 IS NOT NULL
                AND a.userid = p_userid;

      -- START REV : 020
      g_mark := 'V012.1';

      -- Checking for CNAME6(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'Multiple category-6 ('
                || a.cname6
                || ') found. Please marge the category-6 and proceed.',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.userid = p_userid
                AND UPPER(a.cname6) IN (SELECT x.cat6
                          FROM (  SELECT UPPER(a.cname6) cat6,
                                         COUNT(DISTINCT UPPER(a.cname6))
                                    FROM int$stg_createpo_all_fld a, invcat6 b
                                   WHERE     UPPER(a.cname6) = UPPER(b.cname)
                                         AND coalesce(b.ext, 'N') = 'N'
                                         AND a.cname6 IS NOT NULL
                                         AND a.userid = p_userid
                                GROUP BY UPPER(a.cname6)
                                  HAVING COUNT(DISTINCT UPPER(a.cname6)) >
                                            1) x);

      -- END REV : 020
      g_mark := 'V025';

      -- Checking for CNAME5(V010x)
      UPDATE int$stg_createpo_all_fld a
         SET ccode6 =
                (SELECT MIN(ccode)
                   FROM invcat6 b
                  WHERE UPPER(b.cname) = UPPER(a.cname6))
       WHERE cname6 IS NOT NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'At least one category should have value for item creation',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     a.userid = p_userid
                AND a.CNAME1 IS NULL
                AND a.CNAME2 IS NULL
                AND a.CNAME3 IS NULL
                AND a.CNAME4 IS NULL
                AND a.CNAME5 IS NULL
                AND a.CNAME6 IS NULL
                AND a.icode_barcode IS NULL;

      g_mark := 'V026';

      -- Checking for TAXNAME(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid / Extinct Tax Name',
                clock_timestamp()
           FROM int$stg_createpo a
LEFT OUTER JOIN  fintaxmain b ON (UPPER(a.tax_name) = UPPER(b.taxname))
WHERE (b.taxname IS NULL OR coalesce(b.ext, 'N') = 'Y') AND a.icode_barcode IS NULL AND a.tax_name IS NULL AND a.userid = p_userid;

      g_mark := 'V027';

      -- Checking for TAXNAME(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Tax Name is mandatory for Item Creation',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.icode IS NULL
                AND a.tax_name IS NULL
                AND a.userid = p_userid;

      g_mark := 'V027/a';

      -- Checking for TAXNAME(V010x)
      UPDATE int$stg_createpo_all_fld a
         SET taxcode =
                (SELECT taxcode
                   FROM fintaxmain b
                  WHERE UPPER(b.taxname) = UPPER(a.tax_name))
       WHERE a.tax_name IS NOT NULL AND a.userid = p_userid;

      g_mark := 'V028';

      -- Checking for NEGATIVE_STK_ALERT(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Negative Stock Alert Method',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(negative_stk_alert) NOT IN ('IGNORE',
                                                       'WARNING',
                                                       'STOP',
                                                       'PROFILE')
                AND a.negative_stk_alert IS NOT NULL
                AND a.userid = p_userid;

      g_mark := 'V029';

      -- Checking for NEGATIVE_STK_ALERT(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Nagetive Stock Alere method is mandatory for Item Creation',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.icode IS NULL
                AND a.negative_stk_alert IS NULL
                AND a.userid = p_userid;

      g_mark := 'V030';

      -- Checking for BARUNIT(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Bar Unit is mandatory for Item Creation',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE a.icode IS NULL AND a.barunit IS NULL AND a.userid = p_userid;

      -- Checking for BARUNIT
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Scan Unit, Scan unit can not be negative or zero',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE coalesce(a.barunit, 0) <= 0 AND a.userid = p_userid;

      g_mark := 'V031';

      -- Checking for STANDARD_RATE(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Standard Rate, Standard rate can not be negative or zero',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE coalesce(standard_rate, 0) < 0 AND a.userid = p_userid;

      g_mark := 'V032';

      -- Checking for RSP(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid RSP, RSP can not be negative or zero',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE coalesce(rsp, 0) < 0 AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                   'RSP for this item should be within the MRP range ('
                || b.mrprangefrom::text
                || ' and '
                || b.mrprangeto::text
                || ') defined in the article',
                clock_timestamp()
           FROM int$stg_createpo a, invarticle b
          WHERE     UPPER(a.article_name) = UPPER(b.name)
                AND coalesce(a.rsp, 0) NOT BETWEEN b.mrprangefrom
                                           AND b.mrprangeto
                AND a.userid = p_userid;

      g_mark := 'V033';

      -- Checking for LISTED_MRP(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid MRP, MRP can not be negative or zero',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE coalesce(listed_mrp, 0) < 0 AND a.userid = p_userid;

      g_mark := 'V034';

      -- Checking for WSP(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid WSP, WSP can not be negative or zero',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE coalesce(WSP, 0) < 0 AND a.userid = p_userid;

      g_mark := 'V035';

      -- Checking for UOM(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Unit of Measurement is mandatory for Item Creation',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE a.icode IS NULL AND a.uom IS NULL AND a.userid = p_userid;

      g_mark := 'V036';

      -- Checking for MATERIAL_TYPE(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Material Type',
                clock_timestamp()
           FROM int$stg_createpo a
          WHERE     UPPER(material_type) NOT IN ('FINISHED GOODS',
                        'SEMI FINISHED GOODS',
                        'RAW MATERIAL')
                AND a.material_type IS NOT NULL
                AND a.userid = p_userid;

      g_mark := 'V037';

      -- Checking for MATERIAL_TYPE(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Material Type is mandatory for Item Creation',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.icode IS NULL
                AND a.material_type IS NULL
                AND a.userid = p_userid;

      g_mark := 'V038';

      -- Checking for ITEM_VENDOR_ID(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'CREATEPO',
                p_userid,
                'Data Validation',
                'Invalid Item vendor / extinct',
                clock_timestamp()
           FROM int$stg_createpo a, finsl b
          WHERE     UPPER(item_vendor_id) = UPPER(b.slid)
                AND coalesce(ext, 'N') = 'Y'
                AND a.userid = p_userid;

      g_mark := 'V039';

      -- Checking for ITEM_VENDOR_ID(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Invalid SLID',
                clock_timestamp()
           FROM int$stg_createpo
          WHERE     UPPER(item_vendor_id) NOT IN (SELECT UPPER(slid)
                                                     FROM finsl
                                                    WHERE ext = 'N')
                AND userid = p_userid;

      -- ordqty checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Order qty value should be greater than or equeals to zero',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE a.ordqty <= 0 AND a.userid = p_userid;

      -- ordqty checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Valid Value should mutiplier of the BARUNIT of the item',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a, invitem b
          WHERE     a.icode = b.icode
                AND MOD(a.ordqty, b.barunit) <> 0
                AND a.userid = p_userid;

      /*UPDATE int$stg_createpo_all_fld a
         SET rate =
                coalesce(order_rate,
                     db_fun_item_rate(orddt,
                                       pcode,
                                       icode,
                                       'P',
                                       ou_admcmptax_code))
       WHERE a.icode IS NOT NULL AND a.userid = p_userid;*/
declare
            v_ou_admcmptax_code admou.admcmptax_code%type;
            v_cmpcode           admcmp.cmpcode%type;
      begin
            begin
                select  cmpcode
                into STRICT    v_cmpcode
                from    admcmp;
            exception
                when others then
                v_cmpcode := null;
            end;
            v_ou_admcmptax_code := null;
            begin
                select  psite_admcmptax_code
                into STRICT    v_ou_admcmptax_code
                from    admsite
                where   code = p_connect_site;
            exception
                when no_data_found then
                v_ou_admcmptax_code := null;
            end;
            update    int$stg_createpo_all_fld a
            set       rate =  coalesce(order_rate,
                                            db_fun_item_rate_web(   
                                                orddt,            --p_trandt , 
                                                v_cmpcode,        --p_cmp_code, 
                                                icode,            --p_icode, 
                                                'P',                --p_pctype, 
                                                v_ou_admcmptax_code,--p_admcmptax_code_site,
                                                0,                  --p_item_rate,
                                                p_connect_site      --p_site_code_owner
                                            ) 
                                )        
            where   a.icode is not null 
            and     a.userid = p_userid;
        end;

      UPDATE int$stg_createpo_all_fld a
         SET rate = coalesce(order_rate, standard_rate)
       WHERE a.icode IS NULL                                -- START REV : 002
                            AND a.icode_barcode IS NULL            -- new item
                                                        -- END REV : 002
             AND a.userid = p_userid;

      -- START REV : 011
      BEGIN
         SELECT DISTINCT PUR_ORDER_LIMIT_ALERT_METHOD
           INTO STRICT V_PUR_ORDER_LIMIT_ALERT_METHOD
           FROM ADMPROF P, HRDEMP U
          WHERE U.PROFCODE = P.PROFCODE AND U.ECODE = P_USERID;
      EXCEPTION
         WHEN no_data_found
         THEN
            NULL;
      END;

      IF V_PUR_ORDER_LIMIT_ALERT_METHOD IN ('S', 'W')
      THEN
         DECLARE
            V_THRSHOLD_VALUE   double precision := 0;
            V_AVL_ORDLIMIT     double precision := 0;
            V_CURR_DOC_AMT     double precision := 0;
            V_DOC_AMT          double precision := 0;
            V_PREV_ORD_AMT     double precision := 0;
            v_slname           varchar(200) := NULL;
         BEGIN
            FOR i
               IN (  SELECT /*  orddt, pcode, docno, agrate, trpcode, ord_rem, scheme_docno,
                             ycode, trunc(dtfr) dtfr, trunc(dtto) dtto, payterm, whether_consignment,
                             doccode, admou_code, mrchndsrcode, fintradegrp_code, admcurrency_code,
                             exrate, admsite_code, formcode, enable_lgt_track, purtermcode,
                             udfstring01, udfstring02, udfstring03, udfstring04, udfstring05,
                             udfstring06, udfstring07, udfstring08, udfstring09, udfstring10,
                             udfnum01, udfnum02, udfnum03, udfnum04, udfnum05, udfdate01, udfdate02,
                             udfdate03, udfdate04, udfdate05, agcode, site_shortname*/
                           PCODE, SUM(coalesce(ordqty, 0) * coalesce(rate, 0)) ordAMT
                       FROM int$stg_createpo_all_fld
                      WHERE userid = p_userid
                   GROUP BY /*orddt, pcode, docno, agrate, trpcode, ord_rem, scheme_docno,
                            ycode, trunc(dtfr), trunc(dtto), payterm, whether_consignment,
                            doccode, admou_code, mrchndsrcode, fintradegrp_code, admcurrency_code,
                            exrate, admsite_code, formcode, enable_lgt_track, purtermcode,
                            udfstring01, udfstring02, udfstring03, udfstring04, udfstring05,
                            udfstring06, udfstring07, udfstring08, udfstring09, udfstring10,
                            udfnum01, udfnum02, udfnum03, udfnum04, udfnum05, udfdate01, udfdate02,
                            udfdate03, udfdate04, udfdate05, agcode, site_shortname*/
                           pcode)
            LOOP
               BEGIN
                  V_THRSHOLD_VALUE := 0;
                  V_AVL_ORDLIMIT := 0;
                  V_CURR_DOC_AMT := 0;
                  V_DOC_AMT := 0;
                  V_PREV_ORD_AMT := 0;
                  v_slname := NULL;

                  BEGIN
                     SELECT PO_ORDER_LIMIT
                       INTO STRICT V_THRSHOLD_VALUE
                       FROM FINSL
                      WHERE SLCODE = I.PCODE;
                  EXCEPTION
                     WHEN no_data_found
                     THEN
                        V_THRSHOLD_VALUE := 0;
                  END;

                  BEGIN
                     SELECT SUM (
                                 D1.RATE
                               * (  coalesce(ORDQTY, 0)
                                  - coalesce(CNLQTY, 0)
                                  - coalesce(RCQTY, 0)))
                       INTO STRICT V_PREV_ORD_AMT
                       FROM PURORDDET D1, PURORDMAIN M, ADMSITE S
                      WHERE     M.ORDCODE = D1.ORDCODE
                            AND M.PCODE = I.PCODE
                            AND M.ADMSITE_CODE = S.CODE
                            AND S.SITETYPE <> 'MS-CO-OM-TS'
                            AND M.STAT IN ('P', 'N');
                  EXCEPTION
                     WHEN no_data_found
                     THEN
                        NULL;
                  END;

                  IF coalesce(V_THRSHOLD_VALUE, 0) > 0
                  THEN
                     V_AVL_ORDLIMIT :=
                        coalesce(V_THRSHOLD_VALUE, 0) - coalesce(V_PREV_ORD_AMT, 0);

                     V_DOC_AMT := I.ordAMT;
                  END IF;

                  IF coalesce(V_DOC_AMT, 0) > coalesce(V_AVL_ORDLIMIT, 0)
                  THEN
                     BEGIN
                        SELECT slname
                          INTO STRICT v_slname
                          FROM finsl
                         WHERE slcode = i.pcode;
                     EXCEPTION
                        WHEN no_data_found
                        THEN
                           NULL;
                     END;

                     INSERT INTO int$error_log(code,
                                                lineno,
                                                classname,
                                                userid,
                                                errortype,
                                                errordesc,
                                                createdon)
                        SELECT nextval('int$error_log_code'),
                               0,
                               'CREATEPO',
                               p_userid,
                               'Data Validation',
                                  'Vendor''s Order Limit exceeded for '
                               || v_slname
                               || ' . Order Creation Restricted.',
                               clock_timestamp()
;
                  END IF;
               EXCEPTION
                  WHEN no_data_found
                  THEN
                     NULL;
               END;
            END LOOP;
         END;
      END IF;

      ---Order Limit related checking
      -- END REV : 011
      -- Now check whether 0 rate is allowed through metadata
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Value of allow zero rate order should be YES / NO',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     UPPER(a.allow_zero_rate) NOT IN ('YES', 'NO')
                AND a.userid = p_userid;

      -- Now check whether 0 rate is allowed through metadata
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Item rate is zero but you set allow zero rate order to ''No''',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     coalesce(a.rate, 0) = 0
                AND UPPER(coalesce(a.allow_zero_rate, 'NO')) = 'NO'
                AND a.userid = p_userid;

      -- Ageing related checking
      DECLARE
         v_agename       varchar(100);
         v_ageing_dtfr   timestamp;
         v_ageing_dtto   timestamp;
      BEGIN
         FOR i
            IN (SELECT *
                  FROM int$stg_createpo_all_fld
                 WHERE     icode IS NULL
                       AND ageing_appl = 'Y'
                       AND userid = p_userid)
         LOOP
            BEGIN
               SELECT agename, dtfr, dtto
                 INTO STRICT v_agename, v_ageing_dtfr, v_ageing_dtto
                 FROM invageing
                WHERE i.orddt BETWEEN dtfr AND dtto;

               UPDATE int$stg_createpo_all_fld
                  SET ageing_dtfr = v_ageing_dtfr,
                      ageing_dtto = v_ageing_dtto
                WHERE lineno = i.lineno AND userid = p_userid;
            EXCEPTION
               WHEN no_data_found
               THEN
                  INSERT INTO int$error_log(code,
                                             lineno,
                                             classname,
                                             userid,
                                             errortype,
                                             errordesc,
                                             createdon)
                     SELECT nextval('int$error_log_code'),
                            i.lineno,
                            'CREATEPO',
                            p_userid,
                            'Data Validation',
                            'Ageing definition is not available. Unable to create item under ageing applicable department.',
                            clock_timestamp()
;
               WHEN too_many_rows
               THEN
                  INSERT INTO int$error_log(code,
                                             lineno,
                                             classname,
                                             userid,
                                             errortype,
                                             errordesc,
                                             createdon)
                     SELECT nextval('int$error_log_code'),
                            i.lineno,
                            'CREATEPO',
                            p_userid,
                            'Data Validation',
                            'Document date belongs to multiple Ageing definition. Unable to create item under ageing applicable department.',
                            clock_timestamp()
;
            END;
         END LOOP;
      END;

      --END IF;
      -- START REV : 019
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 createdon,
                                 errordesc)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                clock_timestamp(),
                   -- START REV : 023
                   --'Same order, item, rate with different item remarks, rsp, and order item due date not allowed in one document - '
                   'Same item, rate, docno and site shortname is not allowed in one document - '
                   -- END REV : 023
                || CHR(13)
                || 'Site short name='
                || a.site_shortname
                || ','
                || CHR(13)
                || 'docno='
                || a.docno
                || ','
                || CHR(13)
                || 'item ='
                || a.icode
                || ','
                || CHR(13)
                || 'Rate ='
                || a.rate::text
                || ','
                || CHR(13)
                || 'RSP ='
                || a.rsp::text
                || ','
                || CHR(13)
                || 'Item Remarks ='
                || a.order_item_rem
                || ','
                || CHR(13)
                || 'Item due date ='
                || a.order_item_due_date
                   dup_fld
           FROM int$stg_createpo_all_fld a
          WHERE     a.userid = p_userid
                -- start rev : 023
                and    a.icode is not null
                -- end rev : 023
                AND    a.site_shortname
                    || ','
                    || a.docno
                    || ','
                    || a.icode
                    || ','
                    || a.rate::text IN (SELECT x.combined_fld
                          FROM (  SELECT    m.site_shortname
                                         || ','
                                         || m.docno
                                         || ','
                                         || m.icode
                                         || ','
                                         || m.rate::text
                                            combined_fld,
                                         COUNT(
                                            DISTINCT    coalesce(m.rsp, 0)::text
                                                     || ','
                                                     || m.order_item_rem
                                                     || ','
                                                     || m.order_item_due_date)
                                    FROM int$stg_createpo_all_fld m
                                   WHERE m.userid = p_userid
                                GROUP BY    m.site_shortname
                                         || ','
                                         || m.docno
                                         || ','
                                         || m.icode
                                         || ','
                                         || m.rate::text
                                  HAVING COUNT(
                                            DISTINCT    coalesce(m.rsp, 0)::text
                                                     || ','
                                                     || m.order_item_rem
                                                     || ','
                                                     || m.order_item_due_date) >
                                            1) x);

      -- END REV : 019
      -- ************************ Data Validation End *************************************
      -- START REV : 012
      UPDATE int$stg_createpo_all_fld a
         SET SLCODE =
                (SELECT slcode
                   FROM finsl b
                  WHERE UPPER(b.slid) = UPPER(a.SLID))
       WHERE a.SLID IS NOT NULL AND a.userid = p_userid;

      UPDATE int$stg_createpo_all_fld a
         SET GLCODE =
                (SELECT GLCODE
                   FROM FINGL b
                  WHERE UPPER(b.GLNAME) = UPPER(a.GLNAME))
       WHERE a.GLNAME IS NOT NULL AND a.userid = p_userid;

      -- END REV : 012
      -- START REV : 001
      UPDATE int$stg_createpo_all_fld a
         SET(partycode, partyname, partyalias) =
                (SELECT slcode, slname, abbre
                   FROM finsl b
                  WHERE UPPER(b.slid) = UPPER(a.item_vendor_id))
       WHERE a.item_vendor_id IS NOT NULL AND a.userid = p_userid;

      -- END REV : 001
      -- START REV : 006
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'HSN Code is either extinct or not found.',
                clock_timestamp()
           FROM int$stg_createpo
          WHERE     UPPER(HSN_SAC_CODE) NOT IN (SELECT UPPER(HSN_SAC_CODE)
                          FROM INVHSNSACMAIN
                         WHERE APPL = 'G' AND coalesce(EXTINCT, 'N') = 'N')
                AND hsn_sac_code IS NOT NULL
                AND icode_barcode IS NULL            -- Need only for new item
                AND userid = p_userid;

      UPDATE int$stg_createpo_all_fld a
         SET invhsnsacmain_code =
                (SELECT n.code
                   FROM invhsnsacmain n
                  WHERE     UPPER(n.HSN_SAC_CODE) = UPPER(a.HSN_SAC_CODE)
                        AND coalesce(n.extinct, 'N') = 'N')
       WHERE     a.invhsnsacmain_code IS NULL
             AND a.icode IS NULL
             AND a.icode_barcode IS NULL            -- Need onl y for new item
             AND userid = p_userid;

      UPDATE int$stg_createpo_all_fld a
         SET invhsnsacmain_code =
                (SELECT coalesce(a.invhsnsacmain_code, m.invhsnsacmain_code)
                   FROM invgrp m, invhsnsacmain n
                  WHERE     m.invhsnsacmain_code = n.code
                        AND coalesce(n.extinct, 'N') = 'N'
                        AND m.grpcode = a.grpcode)
       WHERE     a.invhsnsacmain_code IS NULL
             AND a.icode IS NULL
             AND userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'HSN Code neither provided in excel nor in group master.',
                clock_timestamp()
           FROM int$stg_createpo_all_fld a
          WHERE     a.invhsnsacmain_code IS NULL
                AND a.icode IS NULL
                AND a.userid = p_userid;

      -- END REV : 006
      -- START REV : 007
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'CREATEPO',
                userid,
                'Data Validation',
                'Charge extra tax should be Yes / No',
                clock_timestamp()
           FROM int$stg_createpo_all_fld
          WHERE     UPPER(ISPRICE_EXCLUDES_TAX) NOT IN ('YES', 'NO')
                AND userid = p_userid;

      -- START REV : 028
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Item Management Mode should be Item wise, Batch wise, Serial wise.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  item_management_mode IS NOT NULL
         AND    UPPER(item_management_mode) NOT IN ('I', 'B', 'S')
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Price Management should be Item or Batch.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  price_management IS NOT NULL
         AND   UPPER(price_management) NOT IN ('I', 'B')
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Manage Expiry should be Yes or No.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE manage_expiry IS NOT NULL
         AND   UPPER(manage_expiry) NOT IN ('Y', 'N')
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Validity Mode should be Day, Month, Year or None.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE validity_mode IS NOT NULL
         AND   UPPER(validity_mode) NOT IN ('D', 'M', 'Y', 'N')
         AND   userid = p_userid;

      /*INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CREATEPO', userid, 'Data Validation', 'POS Batch Selection Mode should be Popup list of Batch/Serial.', SYSDATE
         FROM   int$stg_createpo_all_fld
         WHERE  ((UPPER (pos_batch_selection_mode) <> 'M') OR pos_batch_selection_mode IS NULL)
         AND    UPPER (item_management_mode) IN ('B', 'S')
         AND   userid = p_userid;*/
         
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Validity Period can not be negative.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  batch_validity_period < 0
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Length Validation', 'Validity Period Length can not greater than 12.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  LENGTH(validity_period::text) > 12
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Price Management cannot be Batch level, for Itemwise inventory managed item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  item_management_mode = 'I'
         AND    price_management = 'B'
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Expiry Management cannot be Yes, for Itemwise inventory managed item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  item_management_mode = 'I'
         AND    manage_expiry = 'Y'
         AND   userid = p_userid;

      /*INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CREATEPO', userid, 'Data Validation', 'POS Batch Selection cannot be Manual, for Itemwise inventory managed item.', SYSDATE
         FROM   int$stg_createpo_all_fld
         WHERE  item_management_mode = 'I'
         AND    pos_batch_selection_mode = 'M'
         AND   userid = p_userid;*/
         
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Validity Mode is not applicable for this item when Manage Expiry is No', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  manage_expiry = 'N'
         AND    validity_mode <> 'N'
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Validity period is not applicable when mode is None.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  validity_mode = 'N'
         AND    batch_validity_period is not null
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Expiry Date is not applicable for Batchwise inventory managed item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld
         WHERE  item_management_mode = 'B'
         AND    expiry_date IS NOT NULL
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Batch/serial details are not applicable for non-inventory item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld a, invitem i1
         WHERE (UPPER(a.icode_barcode) = UPPER(i1.barcode) or UPPER(a.icode_barcode) = UPPER(i1.icode))
         AND    i.item_management_mode IS NOT NULL
         AND    i1.item_management_mode <> 'I'
         AND    i1.noninventory = 'Y'
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Negative stock alert method should be STOP for serial managed item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld a
         WHERE  item_management_mode = 'S'
         AND    UPPER(negative_stk_alert) <> 'STOP'
         AND   userid = p_userid;
         
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Item Management Mode is not mapped or Batch/serial details are not applicable for this item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld a
         WHERE (item_management_mode = 'I' OR item_management_mode IS NULL)
         AND (
               manage_expiry IS NOT NULL
         --OR    pos_batch_selection_mode IS NOT NULL
         OR    batch_validity_period IS NOT NULL
         OR    validity_mode IS NOT NULL
         )
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Price Management Mode is not mapped for Batch/Serial items.', clock_timestamp()
         FROM   int$stg_createpo_all_fld a
         WHERE  item_management_mode IN ('B','S')
         AND   price_management IS NULL
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Expiry details are not applicable for serial managed item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld a
         WHERE  item_management_mode = 'S'
         AND    manage_expiry IS NOT NULL
         AND    batch_validity_period IS NOT NULL
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Expiry details are required only when expiry is managed for the item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld a
         WHERE  item_management_mode IN ('S','B')
         AND    manage_expiry = 'N'
         AND    batch_validity_period IS NOT NULL
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Expiry details are required when Manage Expiry is Yes for the item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld a
         WHERE  item_management_mode IN ('S','B')
         AND    manage_expiry = 'Y'
         AND    validity_mode <> 'N'
         AND    batch_validity_period IS NULL
         AND    userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CREATEPO', userid, 'Data Validation', 'Validity Mode are required when Manage Expiry is Yes for the item.', clock_timestamp()
         FROM   int$stg_createpo_all_fld a
         WHERE  item_management_mode IN ('S','B')
         AND    manage_expiry = 'Y'
         AND    validity_mode IS NULL
         AND    userid = p_userid;

      UPDATE int$stg_createpo_all_fld
      SET price_management = 'I',
          manage_expiry = 'N',
          --pos_batch_selection_mode = 'M',
          validity_mode = 'N',
          batch_validity_period  = NULL
      WHERE item_management_mode = 'I'
      AND userid = p_userid;

      UPDATE int$stg_createpo_all_fld
      SET   validity_mode = 'N',
            manage_expiry = 'N'
      WHERE item_management_mode = 'B'
      AND (price_management = 'I' OR price_management IS NULL)
      AND (manage_expiry = 'N' OR manage_expiry IS NULL)
      AND userid = p_userid;

      UPDATE int$stg_createpo_all_fld
      SET   validity_mode = 'N',
            manage_expiry = 'N'
      WHERE item_management_mode = 'B'
      AND price_management = 'B'
      AND (manage_expiry = 'N' OR manage_expiry IS NULL)
      AND userid = p_userid;

    UPDATE int$stg_createpo_all_fld
      SET manage_expiry = 'N',
          validity_mode = 'N'
      WHERE item_management_mode = 'S'
      AND userid = p_userid;

      -- END REV : 028
      UPDATE int$stg_createpo_all_fld
         SET isprice_excludes_tax =
                CASE
                   WHEN UPPER(coalesce(EXTRA_TAX, 'NO')) = 'YES' THEN 1
                   ELSE 0
                END
       WHERE UPPER(Extra_Tax) IN ('YES', 'NO') AND userid = p_userid;

      -- END REV : 007
      -- START REV : 017
      BEGIN
         SELECT NON_PRICE_CHART_ITEMS
           INTO STRICT V_NON_PRICE_CHART_ITEMS
           FROM HRDEMP H, ADMPROF P
          WHERE H.ECODE = P_USERID AND H.PROFCODE = P.PROFCODE;
      EXCEPTION
         WHEN no_data_found
         THEN
            V_NON_PRICE_CHART_ITEMS := 'I';
      END;

      IF coalesce(V_NON_PRICE_CHART_ITEMS, 'I') <> 'I'
      THEN
         FOR C1_LOOP IN (SELECT X.ICODE,
                                X.ORDDT,
                                X.PCODE,
                                X.ICODE_BARCODE
                           FROM INT$STG_CREATEPO_ALL_FLD X
                          WHERE X.USERID = P_USERID AND X.ICODE IS NOT NULL)
         LOOP
            V_RATE := 0;
            V_PASS_FLAG := 'Y';
            V_ITEM_CODE := C1_LOOP.ICODE_BARCODE;

            BEGIN
               SELECT P.RATE
                 INTO STRICT V_RATE
                 FROM PUR_PRICE_CHART P
                WHERE     P.PCODE = C1_LOOP.PCODE
                      AND P.ICODE = C1_LOOP.ICODE
                      AND P.CODE =
                             (SELECT MAX(P1.CODE)
                                FROM PUR_PRICE_CHART P1
                               WHERE     P1.PCODE = C1_LOOP.PCODE
                                     AND P1.ICODE = C1_LOOP.ICODE
                                     AND P1.EXTINCT = 'N'
                                     AND P1.EFFECTIVE_DATE <= C1_LOOP.ORDDT);
            EXCEPTION
               WHEN no_data_found
               THEN
                  V_PASS_FLAG := 'N';
                  EXIT;
            END;
         END LOOP;

         IF V_PASS_FLAG = 'N'
         THEN
            INSERT INTO INT$ERROR_LOG(CODE,
                                       LINENO,
                                       CLASSNAME,
                                       USERID,
                                       ERRORTYPE,
                                       ERRORDESC,
                                       CREATEDON)
               SELECT nextval('int$error_log_code'),
                      0,
                      'CREATEPO',
                      USERID,
                      'Data Validation',
                         'Item ['
                      || V_ITEM_CODE
                      || '] without price chart, unable to create PO.',
                      clock_timestamp()
                 FROM INT$STG_CREATEPO_ALL_FLD
                WHERE     UPPER(ICODE_BARCODE) = UPPER(V_ITEM_CODE)
                      AND USERID = P_USERID;
         END IF;
      END IF;

      -- END REV : 017
      --COMMIT;

      -- Check whether records are valid or not
      BEGIN
         SELECT 'S'
           INTO STRICT v_status

          WHERE EXISTS (SELECT 'S'
                      FROM int$error_log
                     WHERE userid = p_userid);

         RETURN('0');
      EXCEPTION
         WHEN no_data_found
         THEN
            RETURN('1');
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
              VALUES (nextval('int$error_log_code'),
                      0,
                      --'V' || 'CREATEPO',
					  'CREATEPO',
                      p_userid,
                      errcode,
                      errmsg,
                      clock_timestamp());

         --COMMIT;
         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

