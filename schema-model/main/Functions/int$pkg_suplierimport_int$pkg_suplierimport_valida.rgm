function "main"."int$pkg_suplierimport_int$pkg_suplierimport_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      v_status   			char(1);
      errmsg     			varchar(200);
      errcode    			text;
	 -- i						record;
	  v_table_lgtappl		type_rec_int$pkg_suplierimport_lgtappl[];
	  v_table_oulgtappl 	type_rec_int$pkg_suplierimport_outlgtappl[];
	  v_table_tds_app		type_rec_int$pkg_suplierimport_tds_app[];
	  v_table_crv			type_rec_int$pkg_suplierimport_crv[];
	  v_table_cda			type_rec_int$pkg_suplierimport_cda[];
	  v_table_glname		type_rec_int$pkg_suplierimport_glname[];
	  v_code				bigint;
	  
BEGIN

			BEGIN
			v_code := 0;
			LOOP 
				--SELECT ARRAY_REMOVE(v_table_lgtappl);
				v_table_lgtappl := '{}';
				SELECT ARRAY_AGG(t)
					STRICT INTO v_table_lgtappl
					FROM
					(
							SELECT 	M.SLCODE,
									M.ctid V_CTID,
									CASE WHEN I.LGT_APPL='Y' THEN 'YES' 
										 WHEN I.LGT_APPL='N' THEN 'NO' 
									END  V_LGT_APPL
							FROM   FINSL I,int$stg_SUPLIERIMPORT M
							WHERE  I.SLCODE = M.SLCODE
							AND   M.LGT_APPL IS NULL
							AND   M.SLCODE IS NOT NULL
							AND   M.SLCODE > v_code
							ORDER BY M.SLCODE ASC
							LIMIT 100
					) t;

					EXIT WHEN ARRAY_LOWER(v_table_lgtappl,1) IS NULL;

					FOR i IN ARRAY_LOWER(v_table_lgtappl, 1)..ARRAY_UPPER(v_table_lgtappl, 1)
					LOOP
							UPDATE int$stg_SUPLIERIMPORT I
								 SET LGT_APPL = v_table_lgtappl[var].V_LGT_APPL
							WHERE CTID = v_table_lgtappl[var].V_CTID;
							v_code := v_table_lgtappl[var].SLCODE;
					END LOOP;
				END LOOP;

			END;

            BEGIN
			v_code := 0;
			LOOP 
				--SELECT ARRAY_REMOVE(v_table_oulgtappl);
				v_table_oulgtappl := '{}';
				SELECT ARRAY_AGG(t)
					STRICT INTO v_table_oulgtappl
					FROM
					(
						SELECT 	M.SLCODE,
								M.CTID V_CTID,
								CASE WHEN I.OUT_LGT_APPL='Y' THEN 'YES' 
									 WHEN I.OUT_LGT_APPL='N' THEN 'NO'
								END  V_OUT_LGT_APPL
                		FROM   FINSL I,int$stg_SUPLIERIMPORT M
                		WHERE  I.SLCODE = M.SLCODE
                		AND    M.OUT_LGT_APPL IS NULL
                		AND   M.SLCODE IS NOT NULL
						AND   M.SLCODE > v_code
						ORDER BY M.SLCODE ASC
						LIMIT 100
					)t;

					EXIT WHEN ARRAY_LOWER(v_table_oulgtappl,1) IS NULL;

					FOR i IN ARRAY_LOWER(v_table_oulgtappl, 1)..ARRAY_UPPER(v_table_oulgtappl, 1)
					LOOP
						UPDATE int$stg_suplierimport I
                        	SET  OUT_LGT_APPL  = v_table_oulgtappl[var].V_OUT_LGT_APPL
                        WHERE	CTID = v_table_oulgtappl[var].V_CTID;
						v_code := v_table_oulgtappl[var].SLCODE;
                	END LOOP;
				END LOOP;
            END;

			BEGIN
			v_code := 0;
			LOOP 
				--SELECT ARRAY_REMOVE(v_table_tds_app);
				v_table_tds_app := '{}';
				SELECT ARRAY_AGG(t)
					STRICT INTO v_table_tds_app
					FROM
					(
						SELECT 	M.SLCODE,
								M.CTID V_CTID,
								CASE WHEN I.TDS_APP='Y' THEN 'YES' 
									 WHEN I.TDS_APP='N' THEN 'NO' 
								END  V_TDS_APP
                		FROM   FINSL I,int$stg_SUPLIERIMPORT M
                		WHERE  I.SLCODE = M.SLCODE
                		AND    M.TDS_APP IS NULL
                		AND    M.SLCODE IS NOT NULL
						AND    M.SLCODE > v_code
						ORDER BY M.SLCODE ASC
						LIMIT 100
					)t;

					EXIT WHEN ARRAY_LOWER(v_table_tds_app,1) IS NULL;

					FOR i IN ARRAY_LOWER(v_table_tds_app, 1)..ARRAY_UPPER(v_table_tds_app, 1)
					LOOP
					UPDATE int$stg_SUPLIERIMPORT I
                        SET      TDS_APP      = v_table_tds_app[var].V_TDS_APP
                       WHERE    CTID         = v_table_tds_app[var].V_CTID;
					   v_code := v_table_tds_app[var].SLCODE;
                	END LOOP;
                END LOOP;

             END;

            BEGIN
			v_code := 0;
			LOOP 
				--SELECT ARRAY_REMOVE(v_table_crv);
				v_table_crv := '{}';
				SELECT ARRAY_AGG(t)
					STRICT INTO v_table_tds_app
					FROM
					(
						SELECT M.SLCODE,
							   M.CTID V_CTID,
							   CREDIT_VERIFICATION_RULE as V_CREDIT_VERIFICATION_RULE
                		FROM   FINSL I,int$stg_SUPLIERIMPORT M
                		WHERE  I.SLCODE = M.SLCODE
                		AND    M.CREDIT_VERIFICATION_RULE IS NULL
                		AND    M.SLCODE IS NOT NULL
						AND    M.SLCODE > v_code
						ORDER BY M.SLCODE ASC
						LIMIT 100
					) t;

            		EXIT WHEN ARRAY_LOWER(v_table_crv,1) IS NULL;

					FOR i IN ARRAY_LOWER(v_table_crv, 1)..ARRAY_UPPER(v_table_crv, 1)
					LOOP
					UPDATE int$stg_SUPLIERIMPORT I
                        SET CREDIT_VERIFICATION_RULE = v_table_crv[var].V_CREDIT_VERIFICATION_RULE
                    WHERE    CTID = v_table_crv[var].V_CTID;
					v_code := v_table_crv[var].SLCODE;
                	END LOOP;
                END LOOP;

            END;

			BEGIN
			v_code := 0;
			LOOP 
				--SELECT ARRAY_REMOVE(v_table_cda);
				v_table_cda := '{}';
				SELECT ARRAY_AGG(t)
					STRICT INTO v_table_cda
					FROM
					(
						SELECT  M.SLCODE,
								m.ctid V_CTID,
                            	CASE WHEN i.cash_discount_applicable='Y' THEN 'YES' 
									 WHEN i.cash_discount_applicable='N' THEN 'NO' 
								END  v_cash_discount_applicable,
                            -- start rev : 014
                            	i.cash_discount_percentage as v_cash_discount_percentage,
                            	i.cash_discount_period as v_cash_discount_period
                            -- end rev : 014
                    	FROM    finsl i,int$stg_suplierimport m
                    	WHERE   i.slcode = m.slcode
                    	AND     m.cash_discount_applicable is null
                    	AND     m.slcode is not null
						AND     M.SLCODE > v_code
						ORDER BY M.SLCODE ASC
						LIMIT 100
					) t;

            		EXIT WHEN ARRAY_LOWER(v_table_cda,1) IS NULL;

					FOR i IN ARRAY_LOWER(v_table_cda, 1)..ARRAY_UPPER(v_table_cda, 1)
					LOOP
					UPDATE  int$stg_suplierimport i
                    SET     cash_discount_applicable = v_table_cda.v_cash_discount_applicable,
                            cash_discount_percentage = coalesce(cash_discount_percentage, v_table_cda[var].v_cash_discount_percentage),
                            cash_discount_period     = coalesce(cash_discount_period, v_table_cda[var].v_cash_discount_period)
                    WHERE   CTID  = v_table_cda.V_CTID;
					v_code := v_table_cda[var].SLCODE;
                	END LOOP;
                END LOOP;

            END;

         --- FOR CREATION
            UPDATE int$stg_SUPLIERIMPORT I
            SET    LGT_APPL =   'NO'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    LGT_APPL IS NULL;

            UPDATE int$stg_SUPLIERIMPORT I
            SET    OUT_LGT_APPL =   'NO'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    OUT_LGT_APPL IS NULL;

            UPDATE int$stg_SUPLIERIMPORT I
            SET    TDS_APP =   'NO'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    TDS_APP IS NULL;

            UPDATE int$stg_SUPLIERIMPORT I
            SET    CREDIT_VERIFICATION_RULE =   'N'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    CREDIT_VERIFICATION_RULE IS  NULL;

            UPDATE int$stg_SUPLIERIMPORT I
            SET    CASH_DISCOUNT_APPLICABLE =   'NO'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    CASH_DISCOUNT_APPLICABLE IS NULL;

            UPDATE int$stg_SUPLIERIMPORT I
            SET    ADMCURRENCY_NAME =   'Rupees'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    ADMCURRENCY_NAME IS NULL;
         ---- END OF FOR CREATION
   -- END REV : 002
       --slcode Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Specified SL Code not available  ', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN finsl b ON
		   (UPPER(a.slcode) = UPPER(b.slcode))
	WHERE b.slname IS NULL 
	AND a.slcode IS NOT NULL 
	AND a.userid = p_userid;

      --slcode Validation

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), a.lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Same SLCODE available more than one time.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a,
                (SELECT   a.slcode, COUNT(1)
                     FROM int$stg_SUPLIERIMPORT a
                    WHERE a.slcode is not null
                      AND a.userid = p_userid
                 GROUP BY a.slcode
                   HAVING COUNT(1) > 1) b
          WHERE a.slcode = b.slcode
          and   a.slcode is not null
          AND a.userid = p_userid;

     -- START REV : 007
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), a.lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Vendor''s Order Capacity Can not be negative.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(PO_ORDER_LIMIT,0) < 0
          AND a.userid = p_userid;

     -- END REV : 007
      --slid Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), a.lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Same SLID available more than one time.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a,
                (SELECT   a.slID, COUNT(1)
                     FROM int$stg_SUPLIERIMPORT a
                    WHERE a.slID is not null
                      AND a.userid = p_userid
                 GROUP BY a.slID
                   HAVING COUNT(1) > 1) b
          WHERE a.slID = b.slID
          and   a.slID is not null
          AND a.userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'SLID already exists.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a, finsl b
          WHERE UPPER(a.slid) = UPPER(b.slid)
            AND A.SLID IS NOT NULL
            AND ( a.slcode IS NULL OR (a.slcode IS NOT NULL AND A.SLCODE <> B.SLCODE ))
           -- AND A.SLCODE <> B.SLCODE
            AND a.userid = p_userid;

      --CLASSNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Class Name / Extinct Class Name', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN admcls b ON 
		   (UPPER(a.class_name) = UPPER(b.clsname))
			WHERE (   b.clsname IS NULL
                 OR (UPPER(b.clstype) NOT IN ('S','T','J','A'))
                 OR B.EXT = 'Y'
                ) AND a.userid = p_userid;

      --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid GL Name ', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN fingl b
 		ON (UPPER(a.gl_name) = UPPER(b.glname))
WHERE (b.glname IS NULL
                OR (b.glname IS NOT NULL AND b.srctype <>  'R')
                OR (b.glname IS NOT NULL AND b.EXT = 'Y')
              ) AND A.SLCODE IS NULL AND a.userid = p_userid;

      --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'GL Name Should be not null for record insertion.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.gl_name) IS NULL
          AND A.SLCODE IS NULL
          AND a.userid = p_userid;

      --Admcurrency Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Currency name.', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN admcurrency b 
		   ON (UPPER(a.admcurrency_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL OR coalesce(b.isextinct, 0) = 1) AND a.admcurrency_name IS NOT NULL  -- REV : 002
  AND a.userid = p_userid;

      --ext Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'New record can not be Extinct record.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (a.slcode IS NULL AND UPPER(a.ext) = 'YES')
            AND a.userid = p_userid;

      --ext Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Extinct option.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.ext) NOT IN ('YES','NO')
            AND a.userid = p_userid;

      --BCITY Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Invalid City name, not available in Ginesys City Master ',
                clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN admcity b
 ON (UPPER(a.bctname) = UPPER(b.ctname))
WHERE b.ctname IS NULL AND a.bctname IS NOT NULL AND a.userid = p_userid;

      --BFAX2 Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Mobile No. is mandatory for new record',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE BFX2 IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Mobile No. should only contain digits',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE BFX2 IS NOT NULL
         -- AND ( INSTR(BFX2,'+') IN (0,1) OR MOD(TO_NUMBER(SUBSTR(BFX2,1)),1) = 0 )
            AND  LENGTH(REPLACE(translate(BFX2,'0123456789',' '),' ',''))  > 0
          --  AND A.SLCODE IS NULL
            AND a.userid = p_userid;

      --EMAIL Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Busines Email.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (position('@' in bemail) = 0 OR position('.' in bemail) = 0)
            AND a.bemail IS NOT NULL
            AND a.userid = p_userid;

      --bEMAIL2 Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Business Email2.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (position('@' in bemail2) = 0 OR position('.' in bemail2) = 0)
            AND bemail2 IS NOT NULL
            AND a.userid = p_userid;

      --BCP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Contact Person is mandatory for new record.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE A.BCP IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;
----  SHIPPING
      --SCITY Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Invalid City name, not available in Ginesys City Master ',
                clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN admcity b
  ON (UPPER(a.Sctname) = UPPER(b.ctname))
WHERE b.ctname IS NULL AND a.Sctname IS NOT NULL AND a.userid = p_userid;

      --SFAX2 Validation

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Mobile No. should only contain digits',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE SFX2 IS NOT NULL
         -- AND ( INSTR(BFX2,'+') IN (0,1) OR MOD(TO_NUMBER(SUBSTR(BFX2,1)),1) = 0 )
           -- AND MOD(TO_NUMBER(SUBSTR(SFX2,1)),1) <> 0
           AND  LENGTH(REPLACE(translate(sFX2,'0123456789',' '),' ',''))  > 0
          --  AND A.SLCODE IS NULL
            AND a.userid = p_userid;

      --EMAIL Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Shipping Email1.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (position('@' in Semail) = 0 OR position('.' in Semail) = 0)
            AND a.Semail IS NOT NULL
            AND a.userid = p_userid;

      --bEMAIL2 Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Shipping Email2.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (position('@' in Semail2) = 0 OR position('.' in Semail2) = 0)
            AND Semail2 IS NOT NULL
            AND a.userid = p_userid;

      --COMPANYTYPE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Company Type.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.companytype) NOT IN ('PROPRIETORSHIP', 'PARTNERSHIP', 'PRIVATE LIMITED',
                    'LIMITED', 'HUF', 'CO-OPERATIVE', 'OTHERS')
          AND   a.companytype IS NOT NULL  -- REV : 002
          AND   a.userid = p_userid;

      --INDUSTRYTYPE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Industry Type.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.industrytype) NOT IN ('SMALL SCALE', 'LARGE SCALE', 'GOVERNMENT', 'CONTRACTOR',
                    'OTHERS')
          AND   a.industrytype IS NOT NULL   -- REV : 002
            AND a.userid = p_userid;

      --PAN Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'PAN No. is mandatory for record.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE A.PAN IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;

      --lstno Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'LST No. is mandatory for record For insertion', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE A.LSTNO IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;

      --Cstno Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'CST No. is mandatory for record for new record insertion', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE A.CSTNO IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), a.lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Vendor''s Order Capacity Can not be negative.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(PO_ORDER_LIMIT,0) < 0
          AND a.userid = p_userid;

      --DEFAULT_MARKUP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'MRP Default Markup ca not be negative.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(DEFAULT_MARKUP,0) < 0
            AND a.userid = p_userid;

      --ROUND_OFF_MARKUP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'MRP Roundoff Markup ca not be negative.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(ROUND_OFF_MARKUP,0) < 0
            AND a.userid = p_userid;

      --LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid RSP Limit', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a."LIMIT") NOT IN ('UPPER', 'ROUND', 'LOWER')
          AND a."LIMIT" IS NOT NULL  -- REV : 002
          AND a.userid = p_userid;

      --DEFAULT_MARKUP_wsp Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'WSP Default Markup ca not be negative.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(DEFAULT_MARKUP_WSP,0) < 0
            AND a.userid = p_userid;

      --ROUND_OFF_MARKUP_WSP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'WSP Roundoff Markup ca not be negative.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(ROUND_OFF_MARKUP_WSP,0) < 0
            AND a.userid = p_userid;

      --LIMIT_WSP
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid WSP Limit', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(LIMIT_WSP) NOT IN ('UPPER', 'ROUND', 'LOWER')
          AND   LIMIT_WSP IS NOT NULL  -- REV : 002
            AND a.userid = p_userid;

      --ADMCMPTAX Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Tax Region.', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN admcmptax b
ON (UPPER(a.admcmptax_name) = UPPER(b.NAME))
WHERE (B.NAME IS NULL OR coalesce(b.ext, 'N') = 'Y') AND a.admcmptax_name IS NOT NULL AND a.userid = p_userid;

      --Purchase TRADEGRP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase Trade Group.', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN fintradegrp b
ON (UPPER(a.fintradegrp_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL OR coalesce(b.ext, 'N') = 'Y') AND a.fintradegrp_name IS NOT NULL AND a.userid = p_userid;

      --Purchase Term Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase term.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a

         WHERE  (   (    UPPER(a.fintradegrp_name) IS NULL
                     AND UPPER(a.purtermmain_name) IS NOT NULL
                    )
                 OR (    UPPER(a.fintradegrp_name) IS NOT NULL
                     AND UPPER(a.purtermmain_name) IS NULL
                    )
                )
            AND a.userid = p_userid;

      --Purchase Term Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase term.', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN purtermmain b
 ON (UPPER(a.purtermmain_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL OR coalesce(b.ext, 'N') = 'Y') AND UPPER(a.purtermmain_name) IS NOT NULL AND UPPER(a.fintradegrp_name) IS NOT NULL AND a.userid = p_userid;

      --Purchase Term Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase term.', clock_timestamp()
           FROM ( SELECT   B1.CODE FINTRADEGRP_CODE  ,a1.fintradegrp_name fintradegrp_name,purtermmain_name,LINENO,USERID
                   FROM    int$stg_SUPLIERIMPORT A1,fintradegrp b1
                   WHERE   UPPER(a1.fintradegrp_name) = UPPER(B1.NAME)
                   AND     B1.EXT = 'N'
                   AND     a1.userid = p_userid
                 ) a LEFT OUTER JOIN
		   		( SELECT FINTRADEGRP_CODE ,a1.purtermmain_name TERMNAME
                   FROM    int$stg_SUPLIERIMPORT A1,purtermmain b1
                   WHERE   UPPER(a1.purtermmain_name) = UPPER(b1.NAME)
                   AND     B1.EXT = 'N'
                   AND     a1.userid = p_userid
                 ) b ON (UPPER(a.purtermmain_name) = UPPER(b.TERMNAME))
WHERE  --AND UPPER (a.fintradegrp_name) = UPPER (t.NAME)
   a.FINTRADEGRP_CODE IS NULL AND UPPER(a.purtermmain_name) IS NOT NULL AND UPPER(a.fintradegrp_name) IS NOT NULL AND a.userid = p_userid;

      -- PURFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase Form Name.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
         WHERE  fintradegrp_name IS NOT NULL
            AND purform_name IS NULL
            AND a.userid = p_userid;

      -- PURFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase Form Name.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a

         WHERE (fintradegrp_name = 'LOCAL' AND purform_name <> 'None')
            AND purform_name IS NOT NULL
            AND a.userid = p_userid;

      -- PURFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase Form Name.', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN finform b
 ON (UPPER(a.purform_name) = UPPER(b.formname))
WHERE (b.formname IS NULL OR coalesce(b.ext, 'N') = 'Y') AND purform_name IS NOT NULL AND a.userid = p_userid;

      --WHETHER_CONSIGNMENT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Consignment Purchase', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(whether_consignment) NOT IN ('YES', 'NO')
          AND   whether_consignment IS NOT NULL -- REV : 002
            AND a.userid = p_userid;

   --Price Type
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Procurement Price Type', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE trim(both UPPER(pricetype)) NOT IN ('BASIC RATE','EFFECTIVE RATE', 'MRP', 'WSP', 'RSP', 'STANDARD RATE')
            AND  pricetype IS NOT NULL -- REV : 002
            AND a.userid = p_userid;

     --MARKUP_SELLING_PRICE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Price Details : Discount', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE LENGTH((RTRIM(MARKUP_SELLING_PRICE,0) - trunc(MARKUP_SELLING_PRICE))::TEXT)::INTEGER - 1 > 3
          AND   coalesce(MARKUP_SELLING_PRICE,0) <> 0
            AND a.userid = p_userid;

     --MARKUP_SELLING_ROUND_OFF
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Price Details : Round off Markup', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE    coalesce(MARKUP_SELLING_ROUND_OFF,0) <> 0
          AND (  coalesce(MARKUP_SELLING_ROUND_OFF,0) <=0 OR coalesce(MARKUP_SELLING_ROUND_OFF,0) >= 100 )
            AND a.userid = p_userid;

      --MARKUP_SELLING_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Markup selling limit.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.markup_selling_limit) NOT IN ('UPPER', 'ROUND', 'LOWER')
            AND   a.markup_selling_limit IS NOT NULL  -- REV : 002
            AND a.userid = p_userid;

      -- pur_price_chart_appl Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Price chart applicable.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(pur_price_chart_appl) NOT IN ('YES', 'NO')
          AND   pur_price_chart_appl IS NOT NULL  -- REV : 002
            AND a.userid = p_userid;

      --TDS app Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid TDS Applicable / Invalid TDSSRC name.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (   (a.tdssrc_name IS NULL AND UPPER(a.tds_app) = 'YES')
                 OR (a.tdssrc_name IS NOT NULL AND UPPER(a.tds_app) = 'NO')
                )
          AND  SLCODE IS NULL
            AND a.userid = p_userid;

      --TDS app Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid TDS Applicable.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.tds_app) NOT IN ('YES','NO')
          AND  SLCODE IS NULL
          AND   tds_app IS NOT NULL  -- REV : 002
            AND a.userid = p_userid;

      --TDS SRC Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid TDS Source Name.', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN fintdssrc b
 ON (UPPER(a.tdssrc_name) = UPPER(b.tdssrcname))
WHERE b.tdssrcname IS NULL AND UPPER(a.tds_app) = 'YES' AND a.tdssrc_name IS NOT NULL AND a.userid = p_userid;

      --TDS SRC Validation
    -- START REV : 002
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid TDS Source Name.', clock_timestamp()
           FROM int$stg_suplierimport a
LEFT OUTER JOIN finsl sl ON (a.slCode = sl.slcode)
WHERE (( (a.tdssrc_name IS NOT NULL OR SL.tdssrccode IS NOT NULL ) AND UPPER(a.tds_app) = 'NO' )
                 OR
                 ( (a.tdssrc_name IS  NULL  and SL.tdssrccode IS NULL  ) AND UPPER(a.tds_app) = 'YES' )
                 ) AND A.SLCODE IS NOT NULL AND a.userid = p_userid;
     -- END REV : 002
      --CASH_DISCOUNT_APPLICABLE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Cash Discount Applicable.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.cash_discount_applicable) NOT IN ('YES', 'NO')
            AND   cash_discount_applicable IS NOT NULL  -- REV : 002
            AND a.userid = p_userid;

      --Cash Discount percentage Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Invalid Cash Discount %.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (   (    UPPER(a.cash_discount_applicable) = 'NO'
                     AND a.cash_discount_percentage IS NOT NULL
                    )
                 OR (    UPPER(a.cash_discount_applicable) = 'YES'
                     AND a.cash_discount_percentage IS NULL
                    )
                )
            AND   SLCODE IS NULL -- REV : 003
            AND a.userid = p_userid;

      -- START REV : 009
        INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Invalid Cash Discount %.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (
                    (
                        UPPER(a.cash_discount_applicable) = 'NO'
                        AND
                        a.cash_discount_percentage IS NOT NULL
                    )
                    OR (
                        UPPER(a.cash_discount_applicable) = 'YES'
                        AND
                        a.cash_discount_percentage IS NULL
                    )
                )
            AND  A.SLCODE IS NOT NULL
            AND a.userid = p_userid;
        -- END REV : 009
      --Cash Discount percentage Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Invalid Cash Discount %.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(cash_discount_percentage,0) <> 0
          AND ( coalesce(cash_discount_percentage,0) <= 0 OR coalesce(cash_discount_percentage,0) >= 100)
            AND a.userid = p_userid;

      --Cash Discount period Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Cash Discount Period.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (   (    UPPER(a.cash_discount_applicable) = 'NO'
                     AND a.cash_discount_period IS NOT NULL
                    )
                 OR (    UPPER(a.cash_discount_applicable) = 'YES'
                     AND a.cash_discount_period IS NULL
                    )
                )
            AND SLCODE IS NULL -- REV : 002
            AND a.userid = p_userid;

      -- START REV : 009
       INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Cash Discount Period.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (   (
                        UPPER(a.cash_discount_applicable) = 'NO'
                        AND
                        a.cash_discount_period IS NOT NULL
                    )
                    OR (
                        UPPER(a.cash_discount_applicable) = 'YES'
                        AND
                        a.cash_discount_period IS NULL
                    )
                )
            AND A.SLCODE IS NOT NULL
            AND a.userid = p_userid;
       -- END REV : 009
      --Cash Discount period Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Cash Discount Period.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(cash_discount_period ,0) <> 0
          AND   coalesce(cash_discount_period ,0) > 999
            AND a.userid = p_userid;

      --PUR_DELIVERY_BUFFER_DAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Valid Buffer days should be within 0 to 999.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(PUR_DELIVERY_BUFFER_DAYS ,0) <> 0
          AND (coalesce(PUR_DELIVERY_BUFFER_DAYS ,0) <0  OR coalesce(PUR_DELIVERY_BUFFER_DAYS ,0) > 999 )
            AND a.userid = p_userid;

      --PUR_DUEDAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Purchase Due Days should be within 1 to 999.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (coalesce(PUR_DUEDAYS,0) < 1  OR coalesce(PUR_DUEDAYS ,0) > 999 )
          AND   PUR_DUEDAYS IS NOT NULL  -- REV : 003
            AND a.userid = p_userid;

      --CRDAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Credit Days can not be negative.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(CRDAYS,0) < 0
            AND a.userid = p_userid;

      --CRname Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Credit Rating', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN salcreditrating b
  ON (upper(a.cr_name) = upper(b.crname))
WHERE (b.crname IS NULL OR b.ext = 'Y') AND A.CR_NAME IS NOT NULL AND a.userid = p_userid;
     -- START REV : 001
      --CRamt
     /* INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Credit Amount can not be negative.', SYSDATE
           FROM int$stg_SUPLIERIMPORT a
          WHERE NVL(CRAMT,0) < 0
            AND a.userid = p_userid;*/
     -- END REV : 001
      --due dt basis
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Due Date basis (Invoice Term).',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.due_date_basis) NOT IN ('ENTRY DATE', 'DOCUMENT DATE')
            AND   due_date_basis IS NOT NULL  -- REV : 002
            AND a.userid = p_userid;

      --intrate
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Interest Rate can not be negative.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE coalesce(INTRATE,0) < 0
            AND a.userid = p_userid;

      --AGENT ID  Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Agent ID / Extinct Agent  ', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN (SELECT SLID
                 FROM  finsl b,ADMCLS CS
                 WHERE B.CLSCODE = CS.CLSCODE
                 AND   CS.CLSTYPE = 'A'
                 AND   CS.EXT = 'N'
                 AND   B.EXT = 'N'
                ) b ON (UPPER(a.agent_id) = UPPER(b.slid))
WHERE b.slid IS NULL AND a.agent_id IS NOT NULL AND a.userid = p_userid;

      --AGRATE Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Agent Rate should be Null.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE ( a.agent_id IS NULL AND coalesce(AGRATE,0) <> 0)
            AND a.userid = p_userid;

      --AGRATE Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Agent Rate.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE ( a.agent_id IS NOT NULL AND ( coalesce(AGRATE,0) <  0  
											  OR coalesce(AGRATE,0) >=100  
											  or right(to_char(coalesce(AGRATE,0),'9999.000'),1)::integer> 0)) ----substr(to_char(coalesce(AGRATE,0),'9999.000'),-1,1) > 0))
          AND coalesce(AGRATE,0) <>  0        			  
          AND a.userid = p_userid;

      --Allow jobber stock point
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation',
                'Invalid Allow Manufaturing Unit Stock point selection.',
                clock_timestamp()
           FROM int$stg_suplierimport a,
                admcls  b
          WHERE UPPER(a.class_name) = UPPER(b.clsname)
          AND  ((b.clstype = 'J'
                  AND UPPER(a.allow_jobber_stockpoint) NOT IN ('YES','NO')
                  AND a.allow_jobber_stockpoint IS NOT NULL  -- REV : 002
                 )
                OR (b.clstype <> 'J'
                         AND UPPER(a.allow_jobber_stockpoint) IN ('YES')
                        )
                )
            AND a.userid = p_userid;

      ---prd_max_days Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Production Maximum Overdue Days.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE ( coalesce(prd_max_days,0) <  0 OR coalesce(prd_max_days,0) > 999  )
          AND   coalesce(prd_max_days,0) <>  0
            AND a.userid = p_userid;

      --Invalid Production overdue Action
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Production overdue Action.',
                clock_timestamp()
           FROM int$stg_suplierimport a
          WHERE UPPER(a.prd_overdue_action) NOT IN ('RESTRICT ORDER', 'NO RESTRICTION')
            AND   prd_overdue_action IS NOT NULL  -- REV : 002
            AND a.userid = p_userid;

-- purchase
      --PURCHASE_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase Ledger Name', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN fingl b
 ON (UPPER(a.PURCHASE_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' ) --AND UPPER (a.saletype) = 'CONSIGNMENT'
  AND a.PURCHASE_GLNAME IS NOT NULL AND a.userid = p_userid;

    --purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Purchase Subledger SLID should be null as Purchase Ledger Name not provided.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE a.PURCHASE_SLID IS NOT NULL
            AND a.PURCHASE_GLNAME IS NULL
            AND a.userid = p_userid;

      --Purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', ' Purchase Ledger Name of the Purchase Sub-ledger  SLID is not matching with given Purchase Ledger Name / Subledger not applicable for the Purchase Ledger Name / Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.PURCHASE_SLID , 
					 a1.PURCHASE_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_SUPLIERIMPORT a1,
                        fingl b1
                  where UPPER(a1.PURCHASE_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a LEFT OUTER JOIN
				(SELECT a1.PURCHASE_SLID  SLID, a1.PURCHASE_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_SUPLIERIMPORT a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.PURCHASE_SLID) = UPPER(s.slid)
                    AND a1.PURCHASE_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
					ON (UPPER(a.PURCHASE_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.PURCHASE_GLNAME) IS NOT NULL AND a.PURCHASE_SLID IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase Sub-Ledger ', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a, fingl b
          WHERE UPPER(a.PURCHASE_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.PURCHASE_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.PURCHASE_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

-- PURCHASE RETURN
      --PURCHASE_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase Return Ledger Name', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN fingl b
 ON (UPPER(a.PURCHASE_RETURN_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' ) --AND UPPER (a.saletype) = 'CONSIGNMENT'
  AND a.PURCHASE_RETURN_GLNAME IS NOT NULL AND a.userid = p_userid;

    --purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Purchase Return Subledger SLID should be null as Purchase Return Ledger Name not provided.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE a.PURCHASE_RETURN_SLID IS NOT NULL
            AND a.PURCHASE_RETURN_GLNAME IS NULL
            AND a.userid = p_userid;

      --Purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', ' Purchase Return Ledger Name of the Purchase Sub-ledger  SLID is not matching with given Purchase Ledger Name / Subledger not applicable for the Purchase Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.PURCHASE_RETURN_SLID , a1.PURCHASE_RETURN_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_SUPLIERIMPORT a1,
                        fingl b1
                  where UPPER(a1.PURCHASE_RETURN_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a LEFT OUTER JOIN
		   (SELECT a1.PURCHASE_RETURN_SLID  SLID, a1.PURCHASE_RETURN_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_SUPLIERIMPORT a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.PURCHASE_RETURN_SLID) = UPPER(s.slid)
                    AND a1.PURCHASE_RETURN_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
					ON (UPPER(a.PURCHASE_RETURN_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.PURCHASE_RETURN_GLNAME) IS NOT NULL AND a.PURCHASE_RETURN_SLID IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Purchase Return Sub-Ledger ', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a, fingl b
          WHERE UPPER(a.PURCHASE_RETURN_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.PURCHASE_RETURN_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.PURCHASE_RETURN_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

      --TRP ID  Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Transporter ID / Extinct Transporter', clock_timestamp()
           FROM int$stg_suplierimport a LEFT OUTER JOIN
		   (SELECT SLID
                 FROM  finsl b,ADMCLS CS
                 WHERE B.CLSCODE = CS.CLSCODE
                 AND   CS.CLSTYPE = 'T'
                 AND   CS.EXT = 'N'
                 AND   B.EXT = 'N'
                ) b 
 ON (UPPER(a.TRPID) = UPPER(b.slid))
WHERE b.slid IS NULL AND a.TRPID IS NOT NULL AND a.userid = p_userid;

      --LGT APPL Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Goods Inward Logistics.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.lgt_appl) NOT IN ('YES', 'NO')
          AND   lgt_appl IS NOT NULL  -- REV : 002
                AND a.userid = p_userid;

      --PERMIT_APPL
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Permit Applicable.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (( UPPER(a.permit_appl) NOT IN ('YES', 'NO') AND a.permit_appl IS NOT NULL) -- REV : 002
                 or (
                 UPPER(a.lgt_appl) = 'NO'
                 AND upper(permit_appl)  = 'YES'
                 )
                )
            --AND   permit_appl IS NOT NULL  -- REV : 002
            AND a.userid = p_userid;

      --OUT_LGT_APPL
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Out Logistics Applicable.',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.out_lgt_appl) NOT IN ('YES', 'NO')
          AND   out_lgt_appl  IS NOT NULL -- REV : 002
            AND a.userid = p_userid;

      --OUT_PERMIT_APPL
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Out Permit Applicable.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (( UPPER(a.OUT_permit_appl) NOT IN ('YES', 'NO') AND a.OUT_permit_appl IS NOT NULL) -- REV : 002
                 or (
                 UPPER(a.OUT_lgt_appl) = 'NO'
                 AND upper(OUT_PERMIT_APPL)  = 'YES'
                 )
                )
            AND a.userid = p_userid;

      --GATEIN_APPL
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Gate entry Applicable.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.gatein_appl) NOT IN ('YES', 'NO')
          AND   gatein_appl IS NOT NULL -- REV : 002
            AND a.userid = p_userid;

      -- Shipment Tracking Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Shipment Tracking Applicable',
                clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE ( (UPPER(shipment_tracking_appl) = 'YES' AND lgt_appl = 'NO')
                 OR ( UPPER(a.shipment_tracking_appl) NOT IN ('YES', 'NO') AND shipment_tracking_appl IS NOT NULL)
                )
            AND a.userid = p_userid;

      -- Invalid Bale wise LR Quantity
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Data Validation', 'Invalid Bale wise LR Quantity', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE (
                    (UPPER(bale_wise_lrqty) = 'YES' AND UPPER(lgt_appl) = 'NO')
                   OR ( UPPER(a.bale_wise_lrqty) NOT IN ('YES', 'NO')
                     AND    bale_wise_lrqty IS NOT NULL -- REV : 002
                   )
                )
            AND a.userid = p_userid;

      --TAXGRPNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                -- start rev : 013
                -- 'Data Validation', 'Invalid Currency name.', SYSDATE
                'Data Validation', 'Invalid Tax Name.', clock_timestamp()
                -- end rev : 013
           FROM int$stg_suplierimport a LEFT OUTER JOIN fintaxmain b
 ON (UPPER(a.TAXGRPNAME) = UPPER(b.TAXNAME))
WHERE (b.TAXNAME IS NULL OR coalesce(b.EXT,'N') ='Y' ) AND a.TAXGRPNAME IS NOT NULL AND a.userid = p_userid;

-- START REV : 001
      --CREDIT_VERIFICATION_RULE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Credit Data Validation', 'Invalid value. Allowed values are L, O, B, N.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE UPPER(a.CREDIT_VERIFICATION_RULE) NOT IN ('L','B','N','O')
            AND   CREDIT_VERIFICATION_RULE IS NOT NULL
            AND a.userid = p_userid;

       --CREDIT_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Credit Data Validation', 'Allowed credit limit is between 0 - 999999999999.99', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE ( coalesce(A.CREDIT_LIMIT,0) < 0 OR coalesce(A.CREDIT_LIMIT,0) > 999999999999.99 )
            AND a.userid = p_userid;

       --CREDIT_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Mandatory Validation', 'Credit Limit is required if credit verification rule applies on credit limit.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE A.CREDIT_LIMIT IS NULL
          AND UPPER(a.CREDIT_VERIFICATION_RULE) IN ('L','B')
            AND a.userid = p_userid;

       --CREDIT_TOLERANCE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Credit Data Validation', 'Allowed credit limit tolerance % is between 0.01 - 100.00.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE ( coalesce(A.CREDIT_LIMIT_TOLERANCE,0) < .01 OR coalesce(A.CREDIT_LIMIT_TOLERANCE,0) > 100 )
          AND    A.CREDIT_LIMIT_TOLERANCE IS NOT NULL
            AND a.userid = p_userid;

       --MAX_CREDIT_OVERDUE_DAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Credit Data Validation', 'Allowed Max. overdue days is between 0 - 9999.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE ( coalesce(A.MAX_CREDIT_OVERDUE_DAYS,0) < 0 OR coalesce(A.MAX_CREDIT_OVERDUE_DAYS,0) > 9999 )
          AND   A.MAX_CREDIT_OVERDUE_DAYS IS NOT NULL
            AND a.userid = p_userid;

       --MAX_CREDIT_OVERDUE_DAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Mandatory Validation', 'Max. Overdue Days is required if credit verification rule applies on Overdue.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE A.MAX_CREDIT_OVERDUE_DAYS IS NULL
          AND UPPER(a.CREDIT_VERIFICATION_RULE) IN ('O','B')
            AND a.userid = p_userid;

       --CREDIT_OVERDUE_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Credit Data Validation', 'Allowed overdue limit is between 0 - 999999999.99', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE ( coalesce(A.CREDIT_OVERDUE_LIMIT,0) < 0 OR coalesce(A.CREDIT_OVERDUE_LIMIT,0) > 999999999.99 )
            AND a.userid = p_userid;

       --CREDIT_OVERDUE_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid,
                'Mandatory Validation', 'Overdue Amount is required if credit verification rule applies on Overdue.', clock_timestamp()
           FROM int$stg_SUPLIERIMPORT a
          WHERE A.CREDIT_OVERDUE_LIMIT IS NULL
          AND UPPER(a.CREDIT_VERIFICATION_RULE) IN ('O','B')
            AND a.userid = p_userid;

			BEGIN
			v_code := 0;
			LOOP 
				--SELECT ARRAY_REMOVE(v_table_glname);
				v_table_glname := '{}';
				SELECT ARRAY_AGG(t)
					STRICT INTO v_table_glname
					FROM
					(
						SELECT  A.SLCODE,
								A.CTID      V_CTID,
                    			GL.GLNAME   V_GLNAME
            			FROM    int$stg_SUPLIERIMPORT  A,
                    			FINSL               SL,
                    			FINGL               GL
            			WHERE   A.USERID = P_USERID
            			AND     A.SLCODE = SL.SLCODE
            			AND     SL.GLCODE= GL.GLCODE
            			AND     A.SLCODE IS NOT NULL
						AND     A.SLCODE > v_code
						ORDER BY A.SLCODE ASC
						LIMIT 100
					) t;

					EXIT WHEN ARRAY_LOWER(v_table_glname,1) IS NULL;

					FOR i IN ARRAY_LOWER(v_table_glname, 1)..ARRAY_UPPER(v_table_glname, 1)
					LOOP
						UPDATE  int$stg_SUPLIERIMPORT B
                			SET     B.GL_NAME = v_table_glname[var].V_GLNAME
                		WHERE       B.CTID = v_table_glname[var].V_CTID;
						v_code := v_table_glname[var].SLCODE;
						END LOOP;
            	END LOOP;
      		END;
      -- END REV : 002
    -- start rev : 005
    -- GST category validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
    SELECT  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'Invalid GST Category', clock_timestamp()
    FROM int$stg_suplierimport a 
LEFT OUTER JOIN (
                SELECT  upper(gc.name) cat_name
                from    admgstcategory gc
            ) gst_cat ON upper(a.gst_category) = upper(gst_cat.cat_name)
WHERE a.gst_category is not null and gst_cat.cat_name is null and a.userid = p_userid;

    -- GST Identification No. length validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
    SELECT  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'GST Identification No. should have exactly 15 characters', clock_timestamp()
    from    int$stg_suplierimport a
    where   a.gst_identification_no is not null
    and     length(a.gst_identification_no) <> 15
    and     a.userid = p_userid;

    -- GST Identification No. masking validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
    SELECT  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'GST Identification No. is invalid as per Government prescribed format.', clock_timestamp()
    from    int$stg_suplierimport a
    where   a.gst_identification_no is not null
    and     db_fun_check_gstin_no(a.gst_identification_no) = 'F'
    and     a.userid = p_userid;

    -- GST Identification No. state code validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
    SELECT  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'Unable to determine state as per inputed GST Identification No., State code is invalid.', clock_timestamp()
    FROM int$stg_suplierimport a LEFT OUTER JOIN admgststate gs
 ON (substr(a.gst_identification_no,1,2)) = gs.code
WHERE a.gst_identification_no is not null  and gs.code is null and a.userid = p_userid;

    -- GST Identification date validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
    SELECT  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'GST Reg. date is not in valid format.', clock_timestamp()
    from    int$stg_suplierimport   a
    where   a.gst_registration_date is not null
    and (
                (to_char(a.gst_registration_date,'yyyy'))::numeric  < 4
                or
                (to_char(a.gst_registration_date,'yyyymmdd'))::numeric  < 8
            )
    and     a.userid = p_userid;

    -- GST Identification date validation
    insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
    SELECT  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'GST Reg. Date cannot be provided without providing GST Identification No.', clock_timestamp()
    from    int$stg_suplierimport   a
    where   a.gst_registration_date is not null
    and     a.gst_identification_no is null
    and     a.userid = p_userid;
    -- end rev : 005
    -- Start Rev : 016
    insert into int$error_log
    (code, lineno, classname, userid, errortype, errordesc,createdon)
    select  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'Transporter ID should be of exact 15 digits', current_date
    from    int$stg_suplierimport   a
    where   a.transporter_id is not null
    and     LENGTH(a.transporter_id) <> 15
    and     a.userid = p_userid;
    
    insert into int$error_log
    (code, lineno, classname, userid, errortype, errordesc,createdon)
    select  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'First 2 digits of Transporter Id must be numeric', current_date
    from    int$stg_suplierimport   a
    where   a.transporter_id is not null
    and     length(translate(substr(a.transporter_id,1,2), ' +-.0123456789', ' ')) >0
    and     a.userid = p_userid;
    
    insert into int$error_log
    (code, lineno, classname, userid, errortype, errordesc,createdon)
    select  nextval('int$error_log_code'), lineno, 'SUPLIERIMPORT', userid, 'Data Validation', 'Transporter Id should be null for TDS Class', current_date
    from    int$stg_suplierimport   a
    where a.transporter_id is not null
    and   a.class_name = 'TDS';
    -- End Rev : 016

      -- Check whether records are valid or not
      BEGIN
         SELECT 'S'
           INTO STRICT v_status

          WHERE EXISTS (SELECT 'S'
                          FROM int$error_log
                         WHERE userid = p_userid);

         RETURN('0');
      EXCEPTION
         WHEN no_data_found
         THEN
            RETURN('1');
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code, lineno, classname, userid,
                      errortype, errordesc, createdon
                     )
              VALUES (nextval('int$error_log_code'), 0, 'SUPLIERIMPORT', p_userid,
                      errcode, errmsg, clock_timestamp()
                     );

         --COMMIT;
         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

function "main"."int$pkg_suplierimport_int$pkg_suplierimport_validate(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE
	-- Change this to reflect the dblink connection string
	-- v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
    v_srvname       name;
    v_connname      text;
    v_connstr       text;
    v_conn_result   text;
    v_query         text;

	v_ret	text;
BEGIN
	v_srvname := 'foreign_pgbase';
    v_connname := replace(uuid_generate_v4()::text,'-','');
    v_connstr  := v_srvname;
    
    --Open the connection  
    SELECT dblink_connect(v_connname,v_connstr) 
    INTO v_conn_result;

	v_query := 'SELECT * FROM int$pkg_suplierimport_int$pkg_suplierimport_validate_atx ( ' || quote_nullable(p_userid::text) || '::bigint,' || quote_nullable(p_connect_site::text) || '::bigint,' || quote_nullable(p_logging_date::text) || '::timestamp without time zone,' || quote_nullable(p_connect_ou::text) || '::bigint )';
	SELECT * INTO v_ret FROM dblink(v_connname, v_query) AS p (ret text);
	RETURN v_ret;
	EXCEPTION 
   WHEN OTHERS THEN
        SELECT dblink_disconnect(v_connname) 
        INTO v_conn_result;
		--RETURN v_ret;
END;
"""
  returnType = text
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

