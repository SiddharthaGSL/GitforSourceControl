function "main"."int$pkg_sitegstupdate_int$pkg_sitegstupdate_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      v_status   char(1);
      errmsg     varchar(200);
      errcode    bigint;
BEGIN
      -- Either Site code or Site shortname should be provided.
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'Site Validation',
                'Either Site code or Site short name should be provided.',
                clock_timestamp()
           FROM int$stg_SITEGSTUPDATE a
          WHERE     a.SITECODE IS NULL
                AND a.SHORTNAME IS NULL
                AND a.userid = p_userid;

      -- Both site code and short name shouldn't be provided.
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'Site Validation',
                'Both Site code and Site short name not allowed.',
                clock_timestamp()
           FROM int$stg_SITEGSTUPDATE a
          WHERE     a.SITECODE IS NOT NULL
                AND a.SHORTNAME IS NOT NULL
                AND a.userid = p_userid;

      -- Multiple sites found for this short name, unable to proceed
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'SITEGSTUPDATE',
                A.USERID,
                'Site Validation',
                'Multiple sites found for this short name, unable to proceed.',
                clock_timestamp()
           FROM int$stg_SITEGSTUPDATE a,
                (  SELECT lineno, UPPER(b.shrtname), COUNT(1)
                     FROM int$stg_SITEGSTUPDATE a, admsite b
                    WHERE     UPPER(a.shortname) = UPPER(b.shrtname)
                          AND a.userid = p_userid
                          AND A.shortname IS NOT NULL
                 GROUP BY lineno, UPPER(b.shrtname)
                   HAVING COUNT(1) > 1) b
          WHERE     A.shortname IS NOT NULL
                AND a.lineno = b.lineno
                AND a.userid = p_userid;

      -- Site Code should be valid
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'Site Validation',
                'Site not found or is extinct.',
                clock_timestamp()
           FROM int$stg_sitegstupdate a LEFT OUTER JOIN admsite b 
		   ON (UPPER(a.SITECODE) = UPPER(B.CODE))
WHERE (B.CODE IS NULL OR B.EXT = 'Y') AND a.SITECODE IS NOT NULL AND a.userid = p_userid;

      -- Short name should be valid
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'Site Validation',
                'Site not found or is extinct.',
                clock_timestamp()
           FROM int$stg_sitegstupdate a LEFT OUTER JOIN admsite s
		   ON (UPPER(a.SHORTNAME) = UPPER(s.SHRTNAME))
WHERE (s.CODE IS NULL OR s.ext = 'Y') AND a.SHORTNAME IS NOT NULL AND a.userid = p_userid;

      --Updating staging data
      UPDATE int$stg_SITEGSTUPDATE
         SET SHORTNAME = UPPER(SHORTNAME),
             GST_IDENTIFICATION_NO = UPPER(GST_IDENTIFICATION_NO)
       WHERE userid = p_userid;

      UPDATE int$stg_SITEGSTUPDATE s
         SET SITECODE =
                (SELECT a.CODE
                   FROM ADMSITE a
                  WHERE UPPER(a.shrtname) = UPPER(s.shortname))
       WHERE UPPER(s.shortname) IS NOT NULL AND userid = p_userid;

      --Same site more than once in excel
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'SITEGSTUPDATE',
                userid,
                'Site Validation',
                'Same site specified more than once in the excel.',
                clock_timestamp()
           FROM int$stg_SITEGSTUPDATE a,
                (  SELECT a.SITECODE, COUNT(1)
                     FROM int$stg_SITEGSTUPDATE a
                    WHERE a.SITECODE IS NOT NULL AND a.userid = p_userid
                 GROUP BY a.SITECODE
                   HAVING COUNT(1) > 1) b
          WHERE     a.SITECODE = b.SITECODE
                AND a.SITECODE IS NOT NULL
                AND a.userid = p_userid;

      -- GST Identification No. validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'GSTIN Validation',
                'GST Identification No. either doesn''t exist or is extinct.',
                clock_timestamp()
           FROM int$stg_sitegstupdate a LEFT OUTER JOIN admgstin sg
		   		ON (UPPER(a.GST_IDENTIFICATION_NO) = UPPER(sg.gstin_no))
		   		INNER JOIN admsite s ON a.SITECODE = s.code
			WHERE s.sitetype IN ('MS-OO-CM', 'OS-OO-CM', 'MS-CO-CM')  AND (   sg.gstin_no IS NULL
                     OR sg.extinct = 'Y'
                     OR sg.admou_code <> s.admou_code) AND a.SITECODE IS NOT NULL AND a.userid = p_userid;

      -- GST Identification No. length validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'GSTIN Validation',
                'GST Identification No. should have exactly 15 characters.',
                clock_timestamp()
           FROM int$stg_SITEGSTUPDATE a
          WHERE     a.gst_identification_no IS NOT NULL
                AND LENGTH(a.gst_identification_no) <> 15
                AND a.userid = p_userid;

      -- GST Identification No. masking validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'GSTIN Validation',
                'GST Identification No. is invalid as per Government prescribed format.',
                clock_timestamp()
           FROM int$stg_SITEGSTUPDATE a
          WHERE     a.gst_identification_no IS NOT NULL
                AND db_fun_check_gstin_no(a.gst_identification_no) = 'F'
                AND a.userid = p_userid;

      -- GST Identification No. state code validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'GSTIN Validation',
                'State code is invalid.',
                clock_timestamp()
           FROM int$stg_sitegstupdate a
				LEFT OUTER JOIN admgststate gs ON (SUBSTR(a.gst_identification_no, 1, 2) = gs.code)
				WHERE a.gst_identification_no IS NOT NULL  AND gs.code IS NULL AND a.userid = p_userid;

      -- GST Identification date validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'GSTIN Validation',
                'GST Reg. date is not in valid format.',
                clock_timestamp()
           FROM int$stg_SITEGSTUPDATE a
          WHERE     a.gst_registration_date IS NOT NULL
                AND (   (TO_CHAR(a.gst_registration_date, 'yyyy'))::numeric  <
                           4
                     OR (TO_CHAR(a.gst_registration_date, 'yyyymmdd'))::numeric  < 8)
                AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'SITEGSTUPDATE',
                userid,
                'Data Validation',
                'Site is tagged as a PPOB in selected GSTIN, please change the mapping to allow saving',
                clock_timestamp()
           FROM int$stg_SITEGSTUPDATE a,
                (SELECT DISTINCT PPOB, GSTIN_NO
                   FROM admgstin) b,
                admsite               s
          WHERE     a.sitecode IS NOT NULL
                AND a.sitecode = s.code
                --AND s.sitetype ='OS-OO-CM'
                AND UPPER(a.gst_identification_no) <> UPPER(b.gstin_no)
                AND a.gst_identification_no IS NOT NULL
                AND a.sitecode = b.PPOB
                AND b.PPOB IS NOT NULL;

      -- Check whether records are valid or not
      BEGIN
         SELECT 'S'
           INTO STRICT v_status
           
          WHERE EXISTS (SELECT 'S'
                      FROM int$error_log
                     WHERE userid = p_userid);

         RETURN('0');
      EXCEPTION
         WHEN no_data_found
         THEN
            RETURN('1');
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
              VALUES (nextval('int$error_log_code'),
                      0,
                      'SITEGSTUPDATE',
                      p_userid,
                      errcode,
                      errmsg,
                      clock_timestamp());

         --COMMIT;

         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

function "main"."int$pkg_sitegstupdate_int$pkg_sitegstupdate_validate(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

 
DECLARE
	-- Change this to reflect the dblink connection string
    --v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
    v_srvname       name;
    v_connname      text;
    v_connstr       text;
    v_conn_result   text;
    v_query         text;

	v_ret	char;
BEGIN

    v_srvname := 'foreign_pgbase';
    v_connname := replace(uuid_generate_v4()::text,'-','');
    v_connstr  := v_srvname;
    
    --Open the connection  
    SELECT dblink_connect(v_connname,v_connstr) 
    INTO v_conn_result;
	
	v_query := 'SELECT * FROM int$pkg_sitegstupdate_int$pkg_sitegstupdate_validate_atx ( ' || quote_nullable(p_userid::text) || '::bigint,' || quote_nullable(p_connect_site::text) || '::bigint,' || quote_nullable(p_logging_date::text) || '::timestamp without time zone,' || quote_nullable(p_connect_ou::text) || '::bigint )';
	SELECT * INTO v_ret FROM dblink(v_connname, v_query) AS p (ret text);


    SELECT dblink_disconnect(v_connname) 
    INTO v_conn_result;
	
	RETURN v_ret;
EXCEPTION 
   WHEN OTHERS THEN
        SELECT dblink_disconnect(v_connname) 
        INTO v_conn_result;

END;
"""
  returnType = text
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

