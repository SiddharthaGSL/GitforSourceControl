function "main"."trigger_fct_t_invmiscdet()" {
  text = """

DECLARE
   V_TYPE           varchar(100);
   V_DETAIL_CODE    INVSTOCK.DETAIL_CODE%TYPE;
   V_ENTCODE        INVSTOCK.ENTCODE%TYPE;
   V_ENTNO          INVSTOCK.ENTNO%TYPE;
   V_ENTDT          INVSTOCK.ENTDT%TYPE;
   V_ENTTYPE        INVSTOCK.ENTTYPE%TYPE;
   V_LOCCODE        INVSTOCK.LOCCODE%TYPE;
   V_YCODE          INVSTOCK.YCODE%TYPE;
   V_NEW_ICODE      INVSTOCK.ICODE%TYPE;
   V_OLD_ICODE      INVSTOCK.ICODE%TYPE;
   V_NEW_QTY        INVSTOCK.QTY%TYPE;
   V_OLD_QTY        INVSTOCK.QTY%TYPE;
   V_NEW_RATE       INVSTOCK.RATE%TYPE;
   V_OLD_RATE       INVSTOCK.RATE%TYPE;
   V_REFPCODE       INVSTOCK.REFPCODE%TYPE;
   V_REFLOCCODE     INVSTOCK.REFLOCCODE%TYPE;
   V_REFCMPCODE     INVSTOCK.REFCMPCODE%TYPE;
   V_REFGLCODE      INVSTOCK.REFGLCODE%TYPE;
   V_REFDEPTCODE    INVSTOCK.REFDEPTCODE%TYPE;
   V_REFPRCODE      INVSTOCK.REFPRCODE%TYPE;
   V_REFDOCNO       INVSTOCK.REFDOCNO%TYPE;
   V_REFPKGCODE     INVSTOCK.REFPKGCODE%TYPE;
   V_REFDCCODE      INVSTOCK.REFDCCODE%TYPE;
   V_OTHER_RATE     INVSTOCK.COSTRATE%TYPE;
   -- START REV : 002
   V_ADMSITE_CODE   INVSTOCK.ADMSITE_CODE%TYPE;
   -- END REV : 002
   -- START REV : 003
   V_AUTH_ECODE     INVGRCMAIN.AUTH_ECODE%TYPE;
   V_PSITE_STKPT_CODE  INVSTOCK.PSITE_STOCKPOINT_CODE%TYPE;
   -- END REV : 003
   -- START REV : 004
   V_COSTRATE       INVSTOCK.COSTRATE%TYPE;
   -- END REV : 004
BEGIN
/*******************************************************************************************************************
  No.            Date          Author                  Description
  ---------   ----------    ----------------------  ------------------------------------------------------------------
  REV : 005   07/03/2022    ANINDYA                 (TFS ID : BATCH SERIAL) Introduction of Batch Serial Id in Inventory Posting
*******************************************************************************************************************/
    IF TG_OP = 'INSERT' THEN
       V_TYPE := 'INSERTING';
    ELSIF TG_OP = 'UPDATE' THEN
       V_TYPE := 'UPDATING';
    ELSIF TG_OP = 'DELETE' THEN
       V_TYPE := 'DELETING';
    END IF;
    -- START REV : 005
   /*
   IF INSERTING THEN
      V_TYPE := 'INSERTING';

      IF :NEW.REQDETCODE IS NOT NULL THEN
         UPDATE INVREQDET
         SET ISQTY = NVL(ISQTY, 0) + NVL(:NEW.QTY, 0)
         WHERE  REQDETCODE = :NEW.REQDETCODE;
      END IF;
   END IF;

   IF UPDATING THEN
      V_TYPE := 'UPDATING';

      IF :OLD.REQDETCODE = :NEW.REQDETCODE THEN
         UPDATE INVREQDET
         SET ISQTY = (NVL(ISQTY, 0) - NVL(:OLD.QTY, 0)) + NVL(:NEW.QTY, 0)
         WHERE  REQDETCODE = :NEW.REQDETCODE;
      ELSE
         IF :OLD.REQDETCODE IS NOT NULL THEN
            UPDATE INVREQDET
            SET ISQTY = NVL(ISQTY, 0) - NVL(:OLD.QTY, 0)
            WHERE  REQDETCODE = :OLD.REQDETCODE;
         END IF;

         IF :NEW.REQDETCODE IS NOT NULL THEN
            UPDATE INVREQDET
            SET ISQTY = NVL(ISQTY, 0) + NVL(:NEW.QTY, 0)
            WHERE  REQDETCODE = :NEW.REQDETCODE;
         END IF;
      END IF;
   END IF;

   IF DELETING THEN
      V_TYPE := 'DELETING';

      IF :OLD.REQDETCODE IS NOT NULL THEN
         UPDATE INVREQDET
         SET ISQTY = NVL(ISQTY, 0) - NVL(:OLD.QTY, 0)
         WHERE  REQDETCODE = :OLD.REQDETCODE;
      END IF;
   END IF;
    */
    -- END REV : 005
   -- STOCK AND COSTING REFLECTION
   SELECT MISCCODE ENTCODE
         ,MISCNO ENTNO
         ,MISCDT ENTDT
         ,'MIS' ENTTYPE
         ,LOCCODE LOCCODE
         ,YCODE YCODE
         ,0 NEW_RATE
         ,0 OLD_RATE
         ,NULL REFPCODE
         ,NULL REFLOCCODE
         ,NULL REFCMPCODE
         ,NULL REFGLCODE
         ,DEPTCODE REFDEPTCODE
         ,NULL REFPRCODE
         ,REFNO REFDOCNO
         ,NULL REFPKGCODE
         -- START REV : 002
         ,ADMSITE_CODE
         -- END REV : 002
         -- START REV : 003
         ,AUTH_ECODE
         ,PSITE_STOCKPOINT_CODE
         -- END REV : 003
   INTO STRICT   V_ENTCODE
         ,V_ENTNO
         ,V_ENTDT
         ,V_ENTTYPE
         ,V_LOCCODE
         ,V_YCODE
         ,V_NEW_RATE
         ,V_OLD_RATE
         ,V_REFPCODE
         ,V_REFLOCCODE
         ,V_REFCMPCODE
         ,V_REFGLCODE
         ,V_REFDEPTCODE
         ,V_REFPRCODE
         ,V_REFDOCNO
         ,V_REFPKGCODE
         -- START REV : 002
         ,V_ADMSITE_CODE
         -- END REV : 002
         -- START REV : 003
         ,V_AUTH_ECODE
         ,V_PSITE_STKPT_CODE
         -- END REV : 003
   FROM   INVMISCMAIN
   WHERE  MISCCODE = coalesce(NEW.MISCCODE, OLD.MISCCODE);

   V_DETAIL_CODE := coalesce(NEW.MISCDETCODE, OLD.MISCDETCODE);
   V_NEW_ICODE := NEW.ICODE;
   V_OLD_ICODE := OLD.ICODE;
   V_NEW_QTY := NEW.QTY;
   V_OLD_QTY := OLD.QTY;
   -- START ISSUE 1225
   V_NEW_RATE := NEW.RATE;
   V_OLD_RATE := OLD.RATE;

   -- START REV : 004
   V_COSTRATE := coalesce(NEW.COSTRATE, OLD.COSTRATE);
   -- END REV : 004
   -- STOCK AND COSTING REFLECTION
   -- START REV : 002
   <<END_POSTING>>
   BEGIN
   IF  V_PSITE_STKPT_CODE IS NOT NULL AND V_AUTH_ECODE IS NULL THEN
	EXIT END_POSTING;
	END IF;
	CALL DB_PKG_STOCK$REFLECT(V_DETAIL_CODE
                       ,V_TYPE
                       ,V_ENTCODE
                       ,V_ENTNO
                       ,V_ENTDT
                       ,V_ENTTYPE
                       ,V_LOCCODE
                       ,V_YCODE
                       ,V_NEW_ICODE
                       ,V_OLD_ICODE
                       ,V_NEW_QTY
                       ,V_OLD_QTY
                       ,V_NEW_RATE
                       ,V_OLD_RATE
                       ,V_REFPCODE
                       ,V_REFLOCCODE
                       ,V_REFCMPCODE
                       ,V_REFGLCODE
                       ,V_REFDEPTCODE
                       ,V_REFPRCODE
                       ,V_REFDOCNO
                       ,V_REFPKGCODE
                       ,V_REFDCCODE
                       ,V_OTHER_RATE
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,V_ADMSITE_CODE
                       -- START REV : 003
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,V_PSITE_STKPT_CODE
                       -- END REV : 003
                       -- START REV : 004
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,V_COSTRATE
                       -- END REV : 004
                       -- START REV : 005
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,NULL
                       ,coalesce(NEW.INVBATCH_SERIAL_CODE, OLD.INVBATCH_SERIAL_CODE)
                       -- END REV : 005
                       );
		END;

   -- END REV : 002
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

END
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

