function "main"."int$pkg_docadj_int$pkg_docadj_process_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      errmsg       varchar(500);
      vsession     varchar(100);
      vdetailtbl   varchar(1000);
      vdetailrec   varchar(500);
      errcode      bigint;
      vcount       bigint;
      v_ycode      bigint;
BEGIN
      DECLARE
         C_ADJ CURSOR FOR
              SELECT DERIVED_MAINDOC_POSTCODE, DERIVED_MAINDOC_ENTDT
                FROM int$stg_docadj a
               WHERE a.userid = p_userid
            GROUP BY DERIVED_MAINDOC_POSTCODE, DERIVED_MAINDOC_ENTDT;
      BEGIN
         FOR maindoc IN C_ADJ
         LOOP
            SELECT ycode
              INTO STRICT v_ycode
              FROM admyear
             WHERE     dtfr <= maindoc.DERIVED_MAINDOC_ENTDT
                   AND dtto >= maindoc.DERIVED_MAINDOC_ENTDT;

            INSERT INTO FINTAG(POSTCODE1,
                                ENTCODE1,
                                ENTTYPE1,
                                POSTCODE2,
                                ENTCODE2,
                                ENTTYPE2,
                                SLCODE,
                                AMOUNT,
                                YCODE,
                                ECODE,
                                TIME)
               SELECT a.DERIVED_MAINDOC_POSTCODE,
                      a.DERIVED_MAINDOC_ENTCODE,
                      a.DERIVED_MAINDOC_ENTTYPE,
                      a.DERIVED_ADJDOC_POSTCODE,
                      a.DERIVED_ADJDOC_ENTCODE,
                      a.DERIVED_ADJDOC_ENTTYPE,
                      a.DERIVED_SLCODE,
                      a.ADJAMT,
                      v_ycode,
                      p_userid,
                      clock_timestamp()
                 FROM int$stg_DOCADJ a
                WHERE     a.USERID = p_userid
                      AND a.DERIVED_MAINDOC_POSTCODE =
                             maindoc.DERIVED_MAINDOC_POSTCODE;
         END LOOP;
      END;

      -- log to be added in history table
      SELECT nextval('int$error_log_code') INTO STRICT vsession;

      vdetailtbl :=
            'create table ginarchive.docadj_'
         || vsession
         || ' as select distinct MAIN_DOC_SCHEME_NO from int$stg_docadj where userid ='
         || p_userid::text;

      EXECUTE vdetailtbl;

      vdetailrec := 'select count(1) from ginarchive.docadj_' || vsession::text;

      EXECUTE vdetailrec INTO STRICT vcount;

      INSERT INTO int$history(code,
                               importedby,
                               importedon,
                               classname,
                               summary,
                               history_detail_tablename,
                               history_detail_row_count)
           VALUES (nextval('int$history_code'),
                   p_userid,
                   clock_timestamp(),
                   'DOCADJ',
                   vcount::TEXT || ' documents adjusted successfully.',
                   'ginarchive.docadj_' || vsession,
                   vcount);

      RETURN('1');
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         -- error log for oracle internal error
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
              VALUES (nextval('int$error_log_code'),
                      0,
                      'DOCADJ',
                      p_userid,
                      errcode,
                      errmsg,
                      clock_timestamp());

         --COMMIT;
         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

