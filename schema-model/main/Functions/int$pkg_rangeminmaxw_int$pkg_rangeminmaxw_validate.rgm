function "main"."int$pkg_rangeminmaxw_int$pkg_rangeminmaxw_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

        v_status    char(1);
        errmsg      varchar(200);
        errcode     text;
BEGIN
        -- site short name length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Data Length Validation','Site Short Name length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   length(site_shortname) > 500
        and     site_shortname is not null
        and     userid = p_userid;

        -- assortmant name length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Data Length Validation','Assortment Name length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   length(assrt_name) > 500
        and     assrt_name is not null
        and     userid = p_userid;

        -- assortmant code length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Data Length Validation','Assortment Code length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   length(assort_code :: text) > 12
        and     assort_code is not null
        and     userid = p_userid;

        -- repln type code length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Data Length Validation','Repln Type length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   length(repln_type) > 10
        and     repln_type is not null
        and     userid = p_userid;

        -- repln shrt name code length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Data Length Validation','Repln Short Name length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   length(repln_shrt_name) > 500
        and     repln_shrt_name is not null
        and     userid = p_userid;

        -- max qty code length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Data Length Validation','Max Qty length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   length(max_qty :: text) > 22
        and     coalesce(max_qty,0) > 0
        and     userid = p_userid;

        -- min qty code length
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Data Length Validation','Max Qty length is higher than it''s defined data length.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   length(min_qty :: text) > 22
        and     coalesce(min_qty,0) > 0
        and     userid = p_userid;

        -- site_shortname code is mandatory
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Mandatory Validation','Site Shortname is mandatory.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   site_shortname is null
        and     userid = p_userid;

        -- assortment code is mandatory
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Mandatory Validation','Assortment Code is mandatory.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   assort_code is null
        and     userid = p_userid;

        -- repln_type is mandatory
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Mandatory Validation','Repln Type is mandatory.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   repln_type is null
        and     userid = p_userid;

        -- repln_shrt_name is mandatory
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Mandatory Validation','Repln Shrot Name is mandatory.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   repln_shrt_name is null
        and     userid = p_userid;

        -- site_shortname doesn't exist.
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Site Short Name Data Validation','Invalid Site Short Name.',clock_timestamp()
        FROM int$stg_rangeminmaxw s
LEFT OUTER JOIN (
                    SELECT  upper(shrtname)   shrtname
                    from    admsite
                    where   sitetype <> 'US-CO-CM'
                ) st ON (upper(s.site_shortname) = st.shrtname)
WHERE st.shrtname is null and s.site_shortname is not null and s.userid = p_userid;

        -- assortment name doesn't exist.
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Assortment Name Data Validation','Invalid Assortment Name.',clock_timestamp()
        FROM int$stg_rangeminmaxw s
LEFT OUTER JOIN (
                    SELECT  upper(display_name)   assrt_name
                    from    pln_assrt
                ) pa ON (upper(s.assrt_name) = pa.assrt_name)
WHERE pa.assrt_name is null and s.assrt_name is not null and s.userid = p_userid;

        -- assortment code doesn't exist.
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Assortment Code Data Validation','Invalid Assortment Code.',clock_timestamp()
        FROM int$stg_rangeminmaxw s
LEFT OUTER JOIN (
                    SELECT  code   assrt_code
                    from    pln_assrt
                ) pa ON (s.assort_code = pa.assrt_code)
WHERE pa.assrt_code is null and s.assort_code is not null and s.userid = p_userid;

        -- replenish type doesn't exist.
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Replenish Type Data Validation','Invalid Replenish Type.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   upper(repln_type) not in ('TRANSFER','PROCURE','PRODUCE')
        and     s.userid = p_userid;

        -- (-)ve max qty
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Max qty Data Validation','Invalid Max Qty.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   max_qty < 0
        and     s.userid = p_userid;

        -- (-)ve min qty
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Min qty Data Validation','Invalid Min Qty.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   min_qty < 0
        and     s.userid = p_userid;

        -- both max and min qty null
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Row Validation','Min qty or Max Qty of the Site Assortment Combination should be greater than or equal to zero.',clock_timestamp()
        from    int$stg_rangeminmaxw s
        where   min_qty is null
        and     max_qty is null
        and     s.userid = p_userid;

        -- unique chk
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Row Validation','Duplicate Record for same Site and Assortment Combination.',clock_timestamp()
        from    int$stg_rangeminmaxw s

		where (s.site_shortname,s.assort_code) in
		-- end rev : 001
                                        (
                                            SELECT  assrt_name,assort_code
                                            from (
                                                    -- start rev : 001
													--select  s1.assrt_name,s1.assort_code,row_number() over (partition by s1.assrt_name,s1.assort_code order by s1.assrt_name) rec_cnt
													select  s1.site_shortname,s1.assort_code,row_number() over (partition by s1.site_shortname,s1.assort_code order by s1.site_shortname) rec_cnt
													-- end rev : 001
                                                    from    int$stg_rangeminmaxw s1
                                                    where   s1.userid = p_userid
                                                    and     s1.assrt_name is not null
                                                    and     s1.assort_code is not null
                                                ) alias6
                                            where   rec_cnt > 1
                                        )
        and     s.userid = p_userid;

        -- invalid replanish source
        -- case I
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Replenishing Source Data Validation','Invalid Replenishing Source.',clock_timestamp()
        FROM int$stg_rangeminmaxw s
LEFT OUTER JOIN (
                    SELECT  upper(shrtname)   shrtname
                    from    admsite
                    where   sitetype = 'OS-OO-CM'
                ) st ON (upper(s.repln_shrt_name) = st.shrtname)
WHERE st.shrtname is null and s.repln_shrt_name is not null and upper(s.repln_type) = 'TRANSFER' and s.userid = p_userid;

        -- case II
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Replenishing Source Data Validation','Invalid Replenishing Source.',clock_timestamp()
        FROM int$stg_rangeminmaxw s
LEFT OUTER JOIN (
                    SELECT  upper(f.slid)   shrtname
                    from    finsl   f,
                            admcls  c
                    where   f.clscode = c.clscode
                    and     c.clstype = 'S'
                ) sl ON (upper(s.repln_shrt_name) = sl.shrtname)
WHERE sl.shrtname is null and s.repln_shrt_name is not null and upper(s.repln_type) = 'PROCURE' and s.userid = p_userid;

        -- case III
        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'RANGEMINMAXW', userid, 'Replenishing Source Data Validation','Invalid Replenishing Source.',clock_timestamp()
        FROM int$stg_rangeminmaxw s
LEFT OUTER JOIN (
                    SELECT  upper(f.slid)   shrtname
                    from    finsl   f,
                            admcls  c
                    where   f.clscode = c.clscode
                    and     c.clstype = 'J'
                ) sl ON (upper(s.repln_shrt_name) = sl.shrtname)
WHERE sl.shrtname is null and s.repln_shrt_name is not null and upper(s.repln_type) = 'PRODUCE' and s.userid = p_userid;

        --COMMIT;

        -- check whether records are valid or not
        begin
            select  'S'
            into STRICT    v_status

            where   exists (
                            SELECT  'S'
                            from    int$error_log
                            where   userid = p_userid
                            );
            return('0');
        exception
            when no_data_found then
            return('1');
        end;
    exception
        when others then
            errcode := SQLSTATE;
            errmsg := sqlerrm;

            insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
            values (nextval('int$error_log_code'), 0, 'RANGEMINMAXW', p_userid, errcode, errmsg, clock_timestamp());
            --COMMIT;

            return('0');
    end;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

function "main"."int$pkg_rangeminmaxw_int$pkg_rangeminmaxw_validate(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

 
DECLARE
	 -- Change this to reflect the dblink connection string
    --v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
    v_srvname       name;
    v_connname      text;
    v_connstr       text;
    v_conn_result   text;
    v_query         text;

    v_ret    text;
BEGIN
	v_srvname := 'foreign_pgbase';
    v_connname := replace(uuid_generate_v4()::text,'-','');
    v_connstr  := v_srvname;
    
    --Open the connection  
    SELECT dblink_connect(v_connname,v_connstr) 
    INTO v_conn_result;
	
	v_query := 'SELECT * FROM int$pkg_rangeminmaxw_int$pkg_rangeminmaxw_validate_atx ( ' || quote_nullable(p_userid::text) || '::bigint,' || quote_nullable(p_connect_site::text) || '::bigint,' || quote_nullable(p_logging_date::text) || '::timestamp without time zone,' || quote_nullable(p_connect_ou::text) || '::bigint )';
	SELECT * INTO v_ret FROM dblink(v_connname, v_query) AS p (ret text);

	
	SELECT dblink_disconnect(v_connname) 
    INTO v_conn_result;
	
	RETURN v_ret;
EXCEPTION 
   WHEN OTHERS THEN
        SELECT dblink_disconnect(v_connname) 
        INTO v_conn_result;

END;
"""
  returnType = text
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

