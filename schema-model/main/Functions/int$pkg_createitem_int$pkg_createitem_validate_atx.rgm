function "main"."int$pkg_createitem_int$pkg_createitem_validate_atx(bigint, bigint, timestamp without time zone, bigint, text)" {
  text = """

DECLARE

      v_status              char(1);
      errmsg                varchar(200);
      errcode               text;
      g_mark                varchar(100);
      v_allowitemediting    admprof.allow_item_editing%TYPE;
BEGIN
      DELETE FROM int$stg_createitem_all_fld
      WHERE userid = p_userid;

      INSERT INTO int$stg_createitem_all_fld(icode_barcode, oem_barcode, article_name, item_name, item_rem,
                     cname1, cname2, cname3, cname4, cname5, cname6, desc1, desc2,
                     desc3, desc4, desc5, desc6, num1, num2, num3, item_shrtname,
                     taxname, negative_stk_alert, barunit, standard_rate, rsp,
                     listed_mrp, wsp, uom, material_type, item_vendor_id,
                     udfstring01, udfstring02, udfstring03, udfstring04, udfstring05,
                     udfstring06, udfstring07, udfstring08, udfstring09, udfstring10,
                     udfnum01, udfnum02, udfnum03, udfnum04, udfnum05,
                     udfdate01, udfdate02, udfdate03, udfdate04, udfdate05,
                     HSN_SAC_CODE, INVHSNSACMAIN_CODE,
                     Extra_Tax,
                     GLCODE,
                     SLID,
                     GST_ITC_APPL,
                     GLNAME,
                     Quantity,
                     Rate,
                     expiry_date, lineno, userid,
                     transaction_quantity
                     ,UPDATE_MASTER
                     ,ITEM_MANAGEMENT_MODE
                     ,PRICE_MANAGEMENT        
                     ,MANAGE_EXPIRY
                     ,VALIDITY_MODE
                     ,VALIDITY_PERIOD          
                     ,POS_BATCH_SELECTION_MODE
                     ,BATCH_SERIAL_NO
                     ,BATCH_STANDARD_RATE
                     ,BATCH_WSP
                     ,BATCH_RSP
                     ,BATCH_MRP
                     ,BATCH_MFG_DATE
                     ,BATCH_VALID_UPTO
                     )
         SELECT icode_barcode, oem_barcode, article_name, item_name, item_rem,
                NULLIF(cname1,'') cname1, NULLIF(cname2,'') cname2, NULLIF(cname3,'') cname3, 
				NULLIF(cname4,'') cname4, NULLIF(cname5,'') cname5, NULLIF(cname6,'') cname6, desc1, desc2,
                desc3, desc4, desc5, desc6, num1, num2, num3, item_shrtname,
                taxname, negative_stk_alert, barunit, standard_rate, rsp,
                listed_mrp, wsp, uom, material_type, item_vendor_id,
                udfstring01, udfstring02, udfstring03, udfstring04, udfstring05,
                udfstring06, udfstring07, udfstring08, udfstring09, udfstring10,
                udfnum01, udfnum02, udfnum03, udfnum04, udfnum05,
                udfdate01, udfdate02, udfdate03, udfdate04, udfdate05,
                UPPER(HSN_SAC_CODE), INVHSNSACMAIN_CODE,
                UPPER(Extra_Tax),
                 GLCODE,
                 SLID,
                 CASE WHEN upper(GST_ITC_APPL)='INPUT APPLICABLE' THEN 'IP' WHEN upper(GST_ITC_APPL)='CAPITAL GOODS' THEN 'CP' WHEN upper(GST_ITC_APPL)='NOT APPLICABLE' THEN 'NO'  ELSE NULL END  GST_ITC_APPL,
                 GLNAME,
                 Quantity,
                 Rate,
                expiry_date, lineno, userid, transaction_quantity
                ,coalesce(UPDATE_MASTER,'NO')
                ,CASE WHEN UPPER(ITEM_MANAGEMENT_MODE) = 'ITEM WISE' THEN 'I'
                      WHEN UPPER(ITEM_MANAGEMENT_MODE) = 'SERIAL WISE' THEN 'S'
                      WHEN UPPER(ITEM_MANAGEMENT_MODE) = 'BATCH WISE' THEN 'B'
                      WHEN UPPER(ITEM_MANAGEMENT_MODE) IS NULL THEN NULL
                      ELSE 'X'
                 END ITEM_MANAGEMENT_MODE
                ,CASE WHEN UPPER(PRICE_MANAGEMENT) = 'ITEM LEVEL' THEN 'I'
                      WHEN UPPER(PRICE_MANAGEMENT) = 'BATCH/SERIAL LEVEL' THEN 'B'
                      WHEN UPPER(PRICE_MANAGEMENT) IS NULL THEN NULL
                      ELSE 'X'
                END PRICE_MANAGEMENT   
                ,CASE WHEN UPPER(MANAGE_EXPIRY) = 'NO' THEN 'N'
                      WHEN UPPER(MANAGE_EXPIRY) = 'YES' THEN 'Y'
                      WHEN UPPER(MANAGE_EXPIRY) IS NULL THEN NULL
                      ELSE 'X'
                 END MANAGE_EXPIRY
                ,CASE WHEN UPPER(VALIDITY_MODE) = 'DAY' THEN 'D'
                      WHEN UPPER(VALIDITY_MODE) = 'MONTH' THEN 'M'
                      WHEN UPPER(VALIDITY_MODE) = 'YEAR' THEN 'Y'
                      WHEN UPPER(VALIDITY_MODE) = 'NONE' THEN 'N'
                      WHEN UPPER(VALIDITY_MODE) IS NULL THEN NULL
                      ELSE 'X'
                 END VALIDITY_MODE
                ,VALIDITY_PERIOD 
                ,'M' POS_BATCH_SELECTION_MODE
                ,BATCH_SERIAL_NO
                ,BATCH_STANDARD_RATE
                ,BATCH_WSP
                ,BATCH_RSP
                ,BATCH_MRP
                ,BATCH_MFG_DATE
                ,BATCH_VALID_UPTO
         FROM int$stg_createitem
         WHERE userid = p_userid;

      
      -- ************************ Length checking Start *****************************************
      IF 1 = 1
      THEN
         -- ICODE_BARCODE length
         INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Icode_Barcode length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.icode_barcode) > 25
            AND   a.userid = p_userid;

         -- OEM_BARCODE length
         INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'OEM_Barcode length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.oem_barcode) > 50
            AND   a.userid = p_userid;

         -- OEM_BARCODE Existence check
         INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Item already exist with same OEM Barcode',
                   clock_timestamp()
            FROM int$stg_createitem a, invitem i
            WHERE UPPER(i.barcode) = UPPER(a.oem_barcode)
            AND   a.icode_barcode IS NULL
            AND   a.oem_barcode IS NOT NULL
            AND   a.userid = p_userid;

         -- ARTICLE_NAME length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Article name length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.article_name) > 100
            AND   a.userid = p_userid;

         -- ITEM_NAME length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Item name length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.item_name) > 100
            AND   a.userid = p_userid;

         -- ITEM_REM length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Item rem length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.item_rem) > 500
            AND   a.userid = p_userid;

         -- CNAME1 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'CName1 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.cname1) > 100
            AND   a.userid = p_userid;

         -- CNAME2 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'CName2 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.cname2) > 100
            AND   a.userid = p_userid;

         -- CNAME3 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'CName3 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.cname3) > 100
            AND   a.userid = p_userid;

         -- CNAME4 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'CName4 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.cname4) > 100
            AND   a.userid = p_userid;

         -- CNAME5 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'CName5 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.cname5) > 100
            AND   a.userid = p_userid;

         -- CNAME6 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'CName6 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.cname6) > 100
            AND   a.userid = p_userid;

         -- DESC1 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Desc1 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.desc1) > 500
            AND   a.userid = p_userid;

         -- DESC2 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Desc2 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.desc2) > 500
            AND   a.userid = p_userid;

         -- DESC3 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Desc3 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.desc3) > 500
            AND   a.userid = p_userid;

         -- DESC4 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Desc4 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.desc4) > 500
            AND   a.userid = p_userid;

         -- DESC5 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Desc5 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.desc5) > 500
            AND   a.userid = p_userid;

         -- DESC6 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Desc6 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.desc6) > 500
            AND   a.userid = p_userid;

         -- num1 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Num1 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.num1::TEXT) > 20
            AND   a.userid = p_userid;

         -- num2 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Num2 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.num2::TEXT) > 20
            AND   a.userid = p_userid;

         -- num3 length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Num3 length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.num3::TEXT) > 20
            AND   a.userid = p_userid;

         -- ITEM_SHRTNAME length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Item shortname length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.item_shrtname) > 25
            AND   a.userid = p_userid;

         -- TAXNAME length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Tax name length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.taxname) > 100
            AND   a.userid = p_userid;

         -- NEGATIVE_STK_ALERT length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Negative stock alert length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.negative_stk_alert) > 10
            AND   a.userid = p_userid;

         -- BARUNIT length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Scan unit length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.barunit::TEXT) > 20
            AND   a.userid = p_userid;

         -- STANDARD_RATE length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Standard Rate length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.standard_rate::TEXT) > 20
            AND   a.userid = p_userid;

         -- RSP length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'RSP length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.rsp::TEXT) > 20
            AND   a.userid = p_userid;

         -- WSP length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'WSP length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.wsp::TEXT) > 20
            AND   a.userid = p_userid;

         -- UOM length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'UOM length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.uom) > 100
            AND   a.userid = p_userid;

         -- MATERIAL_TYPE length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Material type length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.material_type) > 25
            AND   a.userid = p_userid;

         -- ITEM_VENDOR_ID length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Item vendor id length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.item_vendor_id) > 25
            AND   a.userid = p_userid;

         -- ITEM_VENDOR_ID length
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   lineno,
                   p_classname,
                   userid,
                   'Length Validation',
                   'Item vendor id length is higher than it''s defined data length.',
                   clock_timestamp()
            FROM int$stg_createitem a
            WHERE LENGTH(a.item_vendor_id) > 25
            AND   a.userid = p_userid;

      END IF;

      -- ************************ Length checking End *****************************************
      -- ************************ Mandatory checking Start ************************************
      IF 1 = 1
      THEN
         NULL;
      END IF;

      -- ************************ Mandatory checking End ************************************
      -- ************************ Data Validation Start *************************************
        -- START REV : 009
        INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'),
        lineno,
        p_classname,
        userid,
        'Data validation',
        'GST Applicability should be in( ''INPUT APPLICABLE'',''CAPITAL GOODS'',''NOT APPLICABLE'')',
        clock_timestamp()
        FROM int$stg_createitem a
        WHERE upper(GST_ITC_APPL) NOT IN ('INPUT APPLICABLE','CAPITAL GOODS','NOT APPLICABLE')
        AND   GST_ITC_APPL IS NOT NULL
        AND   a.userid = p_userid;

        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, p_classname, p_userid, 'Data Validation',
                'Invalid Ledger Name ('||a.GLNAME||')', clock_timestamp()
        from    int$stg_createitem  a
        where   not exists (
                                SELECT  null
                                FROM 	FINGL
                                WHERE 	FINGL.EXT = 'N'
                                AND     upper(FINGL.GLNAME) = upper(a.GLNAME)
                                AND	     SRCTYPE   = 'G'
                           )
        and     a.glname is not null
        and     a.userid = p_userid;

        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, p_classname, p_userid, 'Data Validation',
                'Sub-Ledger Can not be null for given ledger', clock_timestamp()
        from    int$stg_createitem  a
        where    exists (
                                SELECT  null
                                FROM 	FINGL
                                WHERE 	FINGL.EXT = 'N'
                                AND     upper(FINGL.GLNAME) = upper(a.GLNAME)
                                AND	    SLAPP   = 'Y'
                           )
        and     a.slid is null
        AND     a.GLNAME IS NOT NULL
        and     a.userid = p_userid;

        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, p_classname, p_userid, 'Data Validation',
                'Sub-Ledger should be null for given ledger', clock_timestamp()
        from    int$stg_createitem  a
        where    exists (
                                SELECT  null
                                FROM 	FINGL
                                WHERE 	FINGL.EXT = 'N'
                                AND     upper(FINGL.GLNAME) = upper(a.GLNAME)
                                AND	    coalesce(SLAPP,'N')   = 'N'
                           )
        and     a.slid is NOT null
        AND     a.GLNAME IS NOT NULL
        and     a.userid = p_userid;

        insert  into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT  nextval('int$error_log_code'), lineno, p_classname, p_userid, 'Data Validation',
                'Invalid Sub-Ledger ('||a.slid||')', clock_timestamp()
        from    int$stg_createitem  a
        where   not exists (
                                SELECT   null
                                FROM     FINSL,FINGL, FINSL_GL FGL
                                where    upper(FINSL.slid) = upper(a.slid)
                                AND      FINGL.GLCODE = FGL.GLCODE
                                AND      FGL.SLCODE   = FINSL.SLCODE
                                AND      FGL.EXT      = 'N'
                                AND      FINSL.EXT      = 'N'
                                AND      FINGL.GLCODE =  ( SELECT GLCODE
                                                           FROM   FINGL
                                                           WHERE  UPPER(GLNAME) = UPPER(A.GLNAME)
                                                          )
                           )
        and     a.slid is not null
        and     a.userid = p_userid;

        -- END REV : 009
      g_mark := 'V001';

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'it is Extinct Item',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE a.lineno IN
                  (SELECT coalesce(a.lineno, 0) lineno
                   FROM int$stg_createitem a, invitem i
                   WHERE ((UPPER(a.icode_barcode) = i.icode) OR (UPPER(a.icode_barcode) = i.barcode))
                   AND   coalesce(i.ext, 'N') = 'Y'
                   AND   a.userid = p_userid)
         AND (icode_barcode IS NOT NULL)
         AND   a.userid = p_userid;

      g_mark := 'V002';

      -- Checking for ICODE_BARCODE(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'OEM_BARCODE and ICODE can not be provided simulteneously for same record',
                clock_timestamp()
         FROM int$stg_createitem a, invitem i
         WHERE ((UPPER(a.icode_barcode) = i.icode) OR (UPPER(a.icode_barcode) = i.barcode))
         AND   coalesce(i.ext, 'N') <> 'N'
         AND   a.oem_barcode IS NOT NULL
         AND   a.userid = p_userid;

        -- START REV : 028
        insert into int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), 0, p_classname, p_userid, 'Data Validation', dup_fld, clock_timestamp()
        from (
                    SELECT distinct 'Duplicate OEM_BARCODE found in sheet - '||upper(a.OEM_BARCODE) dup_fld
                    from   int$stg_createitem a
                    where  a.userid = p_userid
                    and    upper(a.OEM_BARCODE) in (
                                        select x.OEM_BARCODE
                                        from (
                                                    select upper(OEM_BARCODE) oem_barcode, count(*)
                                                    from   int$stg_createitem m
                                                    where  m.userid = p_userid
                                                    group by upper(OEM_BARCODE), batch_serial_no
                                                    having count(*) > 1
                                               ) x
                                    )
                ) alias11;

          --Checking for OEM_BARCODE
          INSERT INTO int$error_log(code,
                                     lineno,
                                     classname,
                                     userid,
                                     errortype,
                                     errordesc,
                                     createdon)
             SELECT nextval('int$error_log_code'),
                    a.lineno,
                    p_classname,
                    p_userid,
                    'Data Validation',
                    'OEM BARCODE already exist in Item Master.',
                    clock_timestamp()
             FROM int$stg_createitem a, invitem i
             WHERE UPPER(a.oem_barcode) = UPPER(i.barcode)
             AND   a.oem_barcode IS NOT NULL
             AND   a.userid = p_userid;

      g_mark := 'V003';

      UPDATE int$stg_createitem_all_fld a
      SET icode = (SELECT icode
                   FROM invitem b
                   WHERE ( (UPPER(b.icode) = UPPER(a.icode_barcode))
                   OR (UPPER(b.barcode) = UPPER(a.icode_barcode))))
      WHERE a.icode_barcode IS NOT NULL
      AND   a.userid = p_userid;

      g_mark := 'V005';

      -- Checking for ARTICLE_NAME(1)
      -- Checking for ARTICLE_NAME(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid / Extinct Article Name',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE UPPER(a.article_name) NOT IN (SELECT UPPER(name)
                                              FROM invarticle
                                              WHERE coalesce(ext, 'N') = 'N')
         AND   a.userid = p_userid;

      IF NOT FOUND
      THEN
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
            SELECT nextval('int$error_log_code'),
                   a.lineno,
                   p_classname,
                   p_userid,
                   'Data Validation',
                   'Invalid / Extinct Article Name',
                   clock_timestamp()
            FROM int$stg_createitem a, invarticle b
            WHERE UPPER(a.article_name) = UPPER(b.name)
            AND   coalesce(b.ext, 'N') = 'Y'
            AND   a.userid = p_userid;
      END IF;

      g_mark := 'V006';

      -- Checking for ARTICLE_NAME(3)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Article Name need to provide',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE a.article_name IS NULL
         AND   a.icode_barcode IS NULL
         AND   a.userid = p_userid;

      g_mark := 'V007';

      IF p_classname = 'GRC_ALT_ITEM'
      THEN
          INSERT INTO int$error_log(code,
                                     lineno,
                                     classname,
                                     userid,
                                     errortype,
                                     errordesc,
                                     createdon)
             SELECT nextval('int$error_log_code'),
                    a.lineno,
                    p_classname,
                    p_userid,
                    'Data Validation',
                    'Item Article not matching with Order Article',
                    clock_timestamp()
             FROM int$stg_createitem a, invitem i,invarticle ar
             WHERE (upper(a.icode_barcode) = upper(i.icode) OR upper(a.ICODE_BARCODE) = upper(i.barcode))
             AND   i.INVARTICLE_CODE = ar.code
             AND   UPPER(a.article_name) <> UPPER(ar.name)
             AND   a.icode_barcode IS NOT NULL
             AND   a.userid = p_userid;
        END IF;

      -- Checking for ARTICLE_NAME(5)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Item creation is not allowed from transaction module',
                clock_timestamp()
         FROM int$stg_createitem a, hrdemp b, admprof c
         WHERE a.userid = b.ecode
         AND   b.profcode = c.profcode
         AND   a.icode_barcode IS NULL
         AND   coalesce(c.create_new_itemcode, 'N') = 'N'
         AND   a.article_name IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V003';

      UPDATE int$stg_createitem_all_fld a
      SET(article_code,
           grpcode,
           ageing_appl,
           costing_method) = (SELECT b.code,
                                     c.grpcode,
                                     c.ageing_appl,
                                     c.costing_method
                              FROM invarticle b, invgrp c
                              WHERE b.grpcode = c.grpcode
                              AND   UPPER(b.name) = UPPER(a.article_name))
      WHERE a.article_name IS NOT NULL
      AND   a.userid = p_userid;

      g_mark := 'V008';

      -- Checking for CNAME1(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Category1 is mandatory field as it is defined as Mandatory in respective article.',
                clock_timestamp()
         FROM int$stg_createitem a , invarticle c
         WHERE a.article_name IS NOT NULL
         AND   UPPER(a.article_name) = UPPER(c.name)
         AND   c.VARIANT_CAT1   = 'Y'
         AND   a.cname1 IS NULL
         AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 1 but it is extinct',
                clock_timestamp()
         FROM int$stg_createitem a, invcat1 b
         WHERE UPPER(a.cname1) = UPPER(b.cname)
         AND   coalesce(b.ext, 'N') = 'Y'
         AND   a.userid = p_userid;

      g_mark := 'V009';

      -- Checking for CNAME1(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-1',
                clock_timestamp()
         FROM int$stg_createitem a, hrdemp b, admprof c
         WHERE a.userid = b.ecode
         AND   b.profcode = c.profcode
         AND   UPPER(a.cname1) NOT IN (SELECT UPPER(cname)
                                        FROM invcat1) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
         AND   coalesce(c.lock_cat1, 'N') = 'Y'
         AND   a.cname1 IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V009.1';

      -- Checking for CNAME1(2)
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), 0, p_classname, p_userid, 'Data Validation',
               'Multiple category-1 ('||a.cname1||') found. Please marge the category-1 and proceed.', clock_timestamp()
        from   int$stg_createitem a
        where  a.userid = p_userid
        and    upper(a.cname1) in (
                            SELECT x.cat1
                            from (
                                        select upper(a.cname1) cat1, count(distinct upper(a.cname1))
                                        from   int$stg_createitem a, invcat1 b
                                        where  upper(a.cname1) = upper(b.cname)
                                        and    coalesce(b.ext,'N') = 'N'
                                        and    a.cname1 is not null
                                        and    a.userid = p_userid
                                        group by upper(a.cname1)
                                        having count(distinct upper(a.cname1)) > 1
                                   ) x
                        );

      g_mark := 'V010';

      -- Checking for CNAME1(V010x)
      UPDATE int$stg_createitem_all_fld a
      SET ccode1 = (SELECT min(ccode)
                    FROM invcat1 b
                    WHERE UPPER(b.cname) = UPPER(a.cname1))
      WHERE cname1 IS NOT NULL
      AND   a.userid = p_userid;

      g_mark := 'V011';

      -- Checking for CNAME2(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Category2 is mandatory field as it is defined as Mandatory in respective article.',
                clock_timestamp()
         FROM int$stg_createitem a , invarticle c
         WHERE a.article_name IS NOT NULL
         AND   UPPER(a.article_name) = UPPER(c.name)
         AND   c.VARIANT_CAT2   = 'Y'
         AND   a.cname2 IS NULL
         AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 2 but it is extinct',
                clock_timestamp()
         FROM int$stg_createitem a, invcat2 b
         WHERE UPPER(a.cname2) = UPPER(b.cname)
         AND   coalesce(b.ext, 'N') = 'Y'
         AND   a.userid = p_userid;

      g_mark := 'V012';

      -- Checking for CNAME2(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-2',
                clock_timestamp()
         FROM int$stg_createitem a, hrdemp b, admprof c
         WHERE a.userid = b.ecode
         AND   b.profcode = c.profcode
         AND   UPPER(a.cname2) NOT IN (SELECT UPPER(cname)
                                        FROM invcat2) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
         AND   coalesce(c.lock_cat2, 'N') = 'Y'
         AND   a.cname2 IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V012.1';

      -- Checking for CNAME2(2)
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), 0, p_classname, p_userid, 'Data Validation',
               'Multiple category-2 ('||a.cname2||') found. Please marge the category-2 and proceed.', clock_timestamp()
        from   int$stg_createitem a
        where  a.userid = p_userid
        and    upper(a.cname2) in (
                            SELECT x.cat2
                            from (
                                        select upper(a.cname2) cat2, count(distinct upper(a.cname2))
                                        from   int$stg_createitem a, invcat2 b
                                        where  upper(a.cname2) = upper(b.cname)
                                        and    coalesce(b.ext,'N') = 'N'
                                        and    a.cname2 is not null
                                        and    a.userid = p_userid
                                        group by upper(a.cname2)
                                        having count(distinct upper(a.cname2)) > 1
                                   ) x
                        );

      g_mark := 'V013';

      -- Checking for CNAME2(V010x)
      UPDATE int$stg_createitem_all_fld a
      SET ccode2 = (SELECT min(ccode)
                    FROM invcat2 b
                    WHERE UPPER(b.cname) = UPPER(a.cname2))
      WHERE cname2 IS NOT NULL
      AND   a.userid = p_userid;

      g_mark := 'V014';

      -- Checking for CNAME3(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Category3 is mandatory field as it is defined as Mandatory in respective article.',
                clock_timestamp()
         FROM int$stg_createitem a , invarticle c
         WHERE a.article_name IS NOT NULL
         AND   UPPER(a.article_name) = UPPER(c.name)
         AND   c.VARIANT_CAT3   = 'Y'
         AND   a.cname3 IS NULL
         AND   a.userid = p_userid;
         -- end rev : 031
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 3 but it is extinct',
                clock_timestamp()
         FROM int$stg_createitem a, invcat3 b
         WHERE UPPER(a.cname3) = UPPER(b.cname)
         AND   coalesce(b.ext, 'N') = 'Y'
         AND   a.userid = p_userid;

      g_mark := 'V015';

      -- Checking for CNAME3(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-3',
                clock_timestamp()
         FROM int$stg_createitem a, hrdemp b, admprof c
         WHERE a.userid = b.ecode
         AND   b.profcode = c.profcode
         AND   UPPER(a.cname3) NOT IN (SELECT UPPER(cname)
                                        FROM invcat3) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
         AND   coalesce(c.lock_cat3, 'N') = 'Y'
         AND   a.cname3 IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V015.1';

      -- Checking for CNAME3(3)
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), 0, p_classname, p_userid, 'Data Validation',
               'Multiple category-3 ('||a.cname3||') found. Please marge the category-3 and proceed.', clock_timestamp()
        from   int$stg_createitem a
        where  a.userid = p_userid
        and    upper(a.cname3) in (
                            SELECT x.cat3
                            from (
                                        select upper(a.cname3) cat3, count(distinct upper(a.cname3))
                                        from   int$stg_createitem a, invcat3 b
                                        where  upper(a.cname3) = upper(b.cname)
                                        and    coalesce(b.ext,'N') = 'N'
                                        and    a.cname3 is not null
                                        and    a.userid = p_userid
                                        group by upper(a.cname3)
                                        having count(distinct upper(a.cname3)) > 1
                                   ) x
                        );

      g_mark := 'V016';

      -- Checking for CNAME3(V010x)
      UPDATE int$stg_createitem_all_fld a
      SET ccode3 = (SELECT min(ccode)
                    FROM invcat3 b
                    WHERE UPPER(b.cname) = UPPER(a.cname3))
      WHERE cname3 IS NOT NULL
      AND   a.userid = p_userid;

      g_mark := 'V017';

      -- Checking for CNAME4(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Category4 is mandatory field as it is defined as Mandatory in respective article.',
                clock_timestamp()
         FROM int$stg_createitem a , invarticle c
         WHERE a.article_name IS NOT NULL
         AND   UPPER(a.article_name) = UPPER(c.name)
         AND   c.VARIANT_CAT4   = 'Y'
         AND   a.cname4 IS NULL
         AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 4 but it is extinct',
                clock_timestamp()
         FROM int$stg_createitem a, invcat4 b
         WHERE UPPER(a.cname4) = UPPER(b.cname)
         AND   coalesce(b.ext, 'N') = 'Y'
         AND   a.userid = p_userid;

      g_mark := 'V018';

      -- Checking for CNAME4(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-4',
                clock_timestamp()
         FROM int$stg_createitem a, hrdemp b, admprof c
         WHERE a.userid = b.ecode
         AND   b.profcode = c.profcode
         AND   UPPER(a.cname4) NOT IN (SELECT UPPER(cname)
                                        FROM invcat4) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
         AND   coalesce(c.lock_cat4, 'N') = 'Y'
         AND   a.cname4 IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V018.1';

      -- Checking for CNAME4(4)
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), 0, p_classname, p_userid, 'Data Validation',
               'Multiple category-4 ('||a.cname4||') found. Please marge the category-4 and proceed.', clock_timestamp()
        from   int$stg_createitem a
        where  a.userid = p_userid
        and    upper(a.cname4) in (
                            SELECT x.cat4
                            from (
                                        select upper(a.cname4) cat4, count(distinct upper(a.cname4))
                                        from   int$stg_createitem a, invcat4 b
                                        where  upper(a.cname4) = upper(b.cname)
                                        and    coalesce(b.ext,'N') = 'N'
                                        and    a.cname4 is not null
                                        and    a.userid = p_userid
                                        group by upper(a.cname4)
                                        having count(distinct upper(a.cname4)) > 1
                                   ) x
                        );

      g_mark := 'V019';

      -- Checking for CNAME4(V010x)
      UPDATE int$stg_createitem_all_fld a
      SET ccode4 = (SELECT min(ccode)
                    FROM invcat4 b
                    WHERE UPPER(b.cname) = UPPER(a.cname4))
      WHERE cname4 IS NOT NULL
      AND   a.userid = p_userid;

      g_mark := 'V020';

      -- Checking for CNAME5(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Category5 is mandatory field as it is defined as Mandatory in respective article.',
                clock_timestamp()
         FROM int$stg_createitem a , invarticle c
         WHERE a.article_name IS NOT NULL
         AND   UPPER(a.article_name) = UPPER(c.name)
         AND   c.VARIANT_CAT5   = 'Y'
         AND   a.cname5 IS NULL
         AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 5 but it is extinct',
                clock_timestamp()
         FROM int$stg_createitem a, invcat5 b
         WHERE UPPER(a.cname5) = UPPER(b.cname)
         AND   coalesce(b.ext, 'N') = 'Y'
         AND   a.userid = p_userid;

      g_mark := 'V021';

      -- Checking for CNAME5(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-5',
                clock_timestamp()
         FROM int$stg_createitem a, hrdemp b, admprof c
         WHERE a.userid = b.ecode
         AND   b.profcode = c.profcode
         AND   UPPER(a.cname5) NOT IN (SELECT UPPER(cname)
                                        FROM invcat5) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
         AND   coalesce(c.lock_cat5, 'N') = 'Y'
         AND   a.cname5 IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V021.1';

      -- Checking for CNAME5(5)
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), 0, p_classname, p_userid, 'Data Validation',
               'Multiple category-5 ('||a.cname5||') found. Please marge the category-5 and proceed.', clock_timestamp()
        from   int$stg_createitem a
        where  a.userid = p_userid
        and    upper(a.cname5) in (
                            SELECT x.cat5
                            from (
                                        select upper(a.cname5) cat5, count(distinct upper(a.cname5))
                                        from   int$stg_createitem a, invcat5 b
                                        where  upper(a.cname5) = upper(b.cname)
                                        and    coalesce(b.ext,'N') = 'N'
                                        and    a.cname5 is not null
                                        and    a.userid = p_userid
                                        group by upper(a.cname5)
                                        having count(distinct upper(a.cname5)) > 1
                                   ) x
                        );

      g_mark := 'V022';

      -- Checking for CNAME5(V010x)
      UPDATE int$stg_createitem_all_fld a
      SET ccode5 = (SELECT min(ccode)
                    FROM invcat5 b
                    WHERE UPPER(b.cname) = UPPER(a.cname5))
      WHERE cname5 IS NOT NULL
      AND   a.userid = p_userid;

      g_mark := 'V023';

      -- Checking for CNAME6(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'It is available in the Category Master - 6 but it is extinct',
                clock_timestamp()
         FROM int$stg_createitem a, invcat6 b
         WHERE UPPER(a.cname6) = UPPER(b.cname)
         AND   coalesce(b.ext, 'N') = 'Y'
         AND   a.userid = p_userid;

      g_mark := 'V024';

      -- Checking for CNAME6(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'User do not have required permission to create category-6',
                clock_timestamp()
         FROM int$stg_createitem a, hrdemp b, admprof c
         WHERE a.userid = b.ecode
         AND   b.profcode = c.profcode
         AND   UPPER(a.cname6) NOT IN (SELECT UPPER(cname)
                                        FROM invcat6) -- where  nvl(ext,'N') = 'N' AS NAME IS UNIQUE
         AND   coalesce(c.lock_cat6, 'N') = 'Y'
         AND   a.cname6 IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V024.1';

      -- Checking for CNAME6(6)
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), 0, p_classname, p_userid, 'Data Validation',
               'Multiple category-6 ('||a.cname6||') found. Please marge the category-6 and proceed.', clock_timestamp()
        from   int$stg_createitem a
        where  a.userid = p_userid
        and    upper(a.cname6) in (
                            SELECT x.cat6
                            from (
                                        select upper(a.cname6) cat6, count(distinct upper(a.cname6))
                                        from   int$stg_createitem a, invcat6 b
                                        where  upper(a.cname6) = upper(b.cname)
                                        and    coalesce(b.ext,'N') = 'N'
                                        and    a.cname6 is not null
                                        and    a.userid = p_userid
                                        group by upper(a.cname6)
                                        having count(distinct upper(a.cname6)) > 1
                                   ) x
                        );

      g_mark := 'V025';

      -- Checking for CNAME5(V010x)
      UPDATE int$stg_createitem_all_fld a
      SET ccode6 = (SELECT min(ccode)
                    FROM invcat6 b
                    WHERE UPPER(b.cname) = UPPER(a.cname6))
      WHERE cname6 IS NOT NULL
      AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Category6 is mandatory field as it is defined as Mandatory in respective article.',
                clock_timestamp()
         FROM int$stg_createitem a , invarticle c
         WHERE a.article_name IS NOT NULL
         AND   UPPER(a.article_name) = UPPER(c.name)
         AND   c.VARIANT_CAT6   = 'Y'
         AND   a.cname6 IS NULL
         AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'At least one category should have value for item creation',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE a.userid = p_userid
         AND    (
                      (  ( a.lineno NOT IN
                                  (SELECT coalesce(a.lineno, 0) lineno
                                   FROM int$stg_createitem a, invitem i
                                   WHERE ((UPPER(a.icode_barcode) = UPPER(i.icode)) OR (UPPER(a.icode_barcode) = UPPER(i.barcode)))
                                   AND   a.userid = p_userid)
                          )
                         AND (icode_barcode IS NOT NULL)
                       )
                       OR (icode_barcode IS NULL)
                )
         AND   a.CNAME1 IS NULL
         AND   a.CNAME2 IS NULL
         AND   a.CNAME3 IS NULL
         AND   a.CNAME4 IS NULL
         AND   a.CNAME5 IS NULL
         AND   a.CNAME6 IS NULL;

      g_mark := 'V026';

      -- Checking for TAXNAME(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid / Extinct Tax Name',
                clock_timestamp()
         FROM int$stg_createitem a
LEFT OUTER JOIN fintaxmain b ON (UPPER(a.taxname) = UPPER(b.taxname))
WHERE (b.taxname IS NULL
         OR     coalesce(b.ext, 'N') = 'Y') AND a.icode_barcode IS NULL AND a.taxname IS NULL AND a.userid = p_userid;

      g_mark := 'V027';

      -- Checking for TAXNAME(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Tax Name is mandatory for Item Creation',
                clock_timestamp()
         FROM int$stg_createitem_all_fld a
         WHERE a.icode IS NULL
         AND   a.taxname IS NULL
         AND   a.userid = p_userid;

      g_mark := 'V027/a';

      -- Checking for TAXNAME(V010x)
      UPDATE int$stg_createitem_all_fld a
      SET taxcode = (SELECT taxcode
                     FROM fintaxmain b
                     WHERE UPPER(b.taxname) = UPPER(a.taxname))
      WHERE a.taxname IS NOT NULL
      AND   a.userid = p_userid;

      g_mark := 'V028';

      -- Checking for NEGATIVE_STK_ALERT(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid Negative Stock Alert Method',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE UPPER(negative_stk_alert) NOT IN ('IGNORE',
                                                  'WARNING',
                                                  'STOP',
                                                  'PROFILE')
         AND   a.negative_stk_alert IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V029';

      -- Checking for NEGATIVE_STK_ALERT(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Negative Stock Alert method is mandatory for Item Creation',
                clock_timestamp()
         FROM int$stg_createitem_all_fld a
         WHERE a.icode IS NULL
         AND   a.negative_stk_alert IS NULL
         AND   a.userid = p_userid;

      g_mark := 'V030';

      -- Checking for BARUNIT(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Bar Unit is mandatory for Item Creation',
                clock_timestamp()
         FROM int$stg_createitem_all_fld a
         WHERE a.icode IS NULL
         AND   a.barunit IS NULL
         AND   a.userid = p_userid;

      -- Checking for BARUNIT
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid Scan Unit, Scan unit can not be negative or zero',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE coalesce(a.barunit,0) <= 0
         AND a.icode_barcode is null
         AND   a.userid = p_userid;

      g_mark := 'V031';

      -- Checking for STANDARD_RATE(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid Standard Rate, Standard rate can not be negative or zero',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE coalesce(standard_rate, 0) < 0
         AND   a.userid = p_userid;

      g_mark := 'V032';

      -- Checking for RSP(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid RSP, RSP can not be negative or zero',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE coalesce(rsp, 0) < 0
         AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                   'RSP for this item should be within the RSP range ('
                || b.mrprangefrom::text
                || ' and '
                || b.mrprangeto::text
                || ') defined in the Article.',
                clock_timestamp()
         FROM int$stg_createitem a, invarticle b
         WHERE UPPER(a.article_name) = UPPER(b.name)
         AND   coalesce(a.rsp, 0) NOT BETWEEN b.mrprangefrom AND b.mrprangeto
         AND   a.userid = p_userid;

      g_mark := 'V033';

      -- Checking for LISTED_MRP(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid MRP, MRP can not be negative or zero',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE coalesce(listed_mrp, 0) < 0
         AND   a.userid = p_userid;

      g_mark := 'V034';

      -- Checking for WSP(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid WSP, WSP can not be negative or zero',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE coalesce(WSP, 0) < 0
         AND   a.userid = p_userid;

      g_mark := 'V035';

      -- Checking for UOM(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Unit of Measurement is mandatory for Item Creation',
                clock_timestamp()
         FROM int$stg_createitem_all_fld a
         WHERE a.icode IS NULL
         AND   a.uom IS NULL
         AND   a.userid = p_userid;

      g_mark := 'V036';

      -- Checking for MATERIAL_TYPE(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid Material Type',
                clock_timestamp()
         FROM int$stg_createitem a
         WHERE UPPER(material_type) NOT IN ('FINISHED GOODS', 'SEMI FINISHED GOODS', 'RAW MATERIAL')
         AND   a.material_type IS NOT NULL
         AND   a.userid = p_userid;

      g_mark := 'V037';

      -- Checking for MATERIAL_TYPE(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Material Type is mandatory for Item Creation',
                clock_timestamp()
         FROM int$stg_createitem_all_fld a
         WHERE a.icode IS NULL
         AND   a.material_type IS NULL
         AND   a.userid = p_userid;

      g_mark := 'V038';

      -- Checking for ITEM_VENDOR_ID(1)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Invalid Item vendor / extinct',
                clock_timestamp()
         FROM int$stg_createitem a, finsl b
         WHERE UPPER(item_vendor_id) = UPPER(b.slid)
         AND   coalesce(ext, 'N') = 'Y'
         AND   a.userid = p_userid;

      g_mark := 'V039';

      -- Checking for ITEM_VENDOR_ID(2)
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                p_classname,
                userid,
                'Data Validation',
                'Invalid Vendor Id',
                clock_timestamp()
         FROM int$stg_createitem
         WHERE UPPER(item_vendor_id) NOT IN (SELECT UPPER(slid)
                                              FROM finsl
                                              WHERE ext = 'N')
         AND   userid = p_userid;

      g_mark := 'V040';

      -- Checking for Ageing defined or not
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                p_classname,
                p_userid,
                'Data Validation',
                'Ageing definition is not available. Unable to create item under ageing applicable department.',
                clock_timestamp()
         from int$stg_createitem_all_fld a
         where a.grpcode is not null
         and   a.ageing_appl = 'Y'
         and   a.userid      = p_userid
         and   0 =  (
                        SELECT  coalesce(count(1),0)
                        from    invageing ag
                        where   p_logging_date between dtfr and dtto
                    );

        g_mark := 'V041';

          -- -- Checking for multi Ageing defined
          INSERT INTO int$error_log(code,
                                     lineno,
                                     classname,
                                     userid,
                                     errortype,
                                     errordesc,
                                     createdon)
             SELECT nextval('int$error_log_code'),
                    a.lineno,
                    p_classname,
                    p_userid,
                    'Data Validation',
                    'Document date belongs to multiple Ageing definition. Unable to create item under ageing applicable department.',
                    clock_timestamp()
             from int$stg_createitem_all_fld a
             where a.grpcode is not null
             and   a.ageing_appl = 'Y'
             and   a.userid      = p_userid
             and   1 >  (
                            SELECT  coalesce(count(1),0)
                            from    invageing ag
                            where   p_logging_date between dtfr and dtto
                        );

            -- Checking for Edit Item required in transaction entry
            SELECT allow_item_editing INTO STRICT v_allowitemediting
            FROM admprof
            WHERE profcode = (SELECT profcode
                              from   hrdemp
                              where  ecode = p_userid);

            INSERT INTO int$error_log(code,
                                     lineno,
                                     classname,
                                     userid,
                                     errortype,
                                     errordesc,
                                     createdon)
             SELECT nextval('int$error_log_code'),
                    a.lineno,
                    p_classname,
                    p_userid,
                    'Data Validation',
                    'Item modification is not allowed from transaction module.',
                    clock_timestamp()
             from int$stg_createitem_all_fld a, invitem i
             where p_classname = 'CREATEITEM_TRANS'
             and (UPPER(a.icode_barcode) = coalesce(UPPER(i.barcode), 'x') OR UPPER(a.icode_barcode) = UPPER(i.icode))
             and   v_allowitemediting = 'N'
             and   a.userid      = p_userid
             and   a.ICODE_BARCODE IS NOT NULL;

             INSERT INTO int$error_log(code,
                                     lineno,
                                     classname,
                                     userid,
                                     errortype,
                                     errordesc,
                                     createdon)
             SELECT nextval('int$error_log_code'),
                    a.lineno,
                    p_classname,
                    p_userid,
                    'Data Validation',
                    'Item Price modification is not allowed from transaction module.',
                    clock_timestamp()
             from int$stg_createitem_all_fld a, invitem i
             where p_classname = 'CREATEITEM_TRANS'
             and (UPPER(a.icode_barcode) = coalesce(UPPER(i.barcode), 'x') OR UPPER(a.icode_barcode) = UPPER(i.icode))
             and   v_allowitemediting = 'R'
             and   (
                   (a.wsp IS NOT NULL and a.wsp <> coalesce(i.wsp,0))
                    OR (a.rsp IS NOT NULL and a.rsp <> coalesce(i.mrp,0))
                    OR (a.listed_mrp IS NOT NULL and a.listed_mrp <> coalesce(i.listed_mrp,0))
                    )
             and   a.userid      = p_userid
             and   a.ICODE_BARCODE IS NOT NULL;

           g_mark := 'V042';

           IF p_classname = 'CREATEITEM_SERIAL'
           THEN
               INSERT INTO int$error_log(code,
                                        lineno,
                                        classname,
                                        userid,
                                        errortype,
                                        errordesc,
                                        createdon)
                SELECT nextval('int$error_log_code'),
                       lineno,
                       p_classname,
                       userid,
                       'Data Validation',
                       'Quantity provided for the item should be in multiple of scan unit.',
                       clock_timestamp()
                FROM int$stg_createitem a
                WHERE MOD(coalesce(TRANSACTION_QUANTITY,0) , coalesce(BARUNIT,1)) <> 0
                AND   a.userid = p_userid;
            END IF;

      UPDATE int$stg_createitem_all_fld 
      SET(partycode, partyname, partyalias) = (SELECT slcode,
                                                       slname || ' : ' || slid,
                                                       abbre
                                                FROM finsl b
                                                WHERE UPPER(b.slid) =
                                                         UPPER(item_vendor_id))
      WHERE item_vendor_id IS NOT NULL
      AND   userid = p_userid;

      UPDATE int$stg_createitem_all_fld a
      SET SLCODE = ( SELECT slcode
                        FROM finsl b
                        WHERE UPPER(b.slid) =
                        UPPER(a.SLID)
                     )
      WHERE SLID IS NOT NULL
      AND   userid = p_userid;

      UPDATE int$stg_createitem_all_fld a
      SET GLCODE = ( SELECT GLCODE
                        FROM FINGL b
                        WHERE UPPER(b.GLNAME) =
                        UPPER(a.GLNAME)
                     )
      WHERE GLNAME IS NOT NULL
      AND   userid = p_userid;

           g_mark := 'V042.1';
		   
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'HSN Code is either extinct or not found.', clock_timestamp()
         FROM   int$stg_createitem
         WHERE  UPPER(HSN_SAC_CODE) NOT IN (SELECT UPPER(HSN_SAC_CODE)
                                             FROM   INVHSNSACMAIN
                                             WHERE  APPL = 'G'
                                             AND    coalesce(EXTINCT,'N') = 'N')
         AND   userid = p_userid;

      update int$stg_createitem_all_fld
      set    invhsnsacmain_code = (SELECT DISTINCT n.code
                                     from   invhsnsacmain n, 
								   			int$stg_createitem_all_fld a
                                     where  UPPER(n.HSN_SAC_CODE) = UPPER(a.HSN_SAC_CODE)
                                     and    coalesce(n.extinct,'N') = 'N'
								     and    userid = p_userid)
      where  userid = p_userid
      and    invhsnsacmain_code is null;
	  
           g_mark := 'V042.2';
		   
      update int$stg_createitem_all_fld a
      set    invhsnsacmain_code = (SELECT coalesce(a.invhsnsacmain_code, m.invhsnsacmain_code)
                                     from   invgrp m, invhsnsacmain n
                                     where  m.invhsnsacmain_code = n.code
                                     and    coalesce(n.extinct,'N') = 'N'
                                     and    m.grpcode = a.grpcode)
      where  invhsnsacmain_code is null
      and    userid = p_userid;

      update int$stg_createitem_all_fld a
      set    invhsnsacmain_code = (SELECT coalesce(a.invhsnsacmain_code, m.invhsnsacmain_code)
                                     from   invgrp m, invhsnsacmain n
                                     where  m.invhsnsacmain_code = n.code
                                     and    coalesce(n.extinct,'N') = 'N'
                                     and    m.grpcode = a.grpcode)
      where  invhsnsacmain_code is null
      and    upper(a.UPDATE_MASTER) = 'NO'
      and    userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'HSN Code neither provided in excel nor in group master.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a
         WHERE  invhsnsacmain_code is null
         and    icode is null
         AND    userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Charge extra tax should be Yes / No.', clock_timestamp()
         FROM   int$stg_createitem
         WHERE  UPPER(extra_tax) NOT IN ('YES','NO')
         AND   userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
        SELECT nextval('int$error_log_code'), 0, p_classname, p_userid, 'Data Validation', dup_fld, clock_timestamp()
        FROM (
                    SELECT DISTINCT 'Duplicate OEM_BARCODE found in sheet with Item and Batch Combination - '||upper(a.OEM_BARCODE) dup_fld
                    FROM   int$stg_createitem_all_fld a
                    WHERE  a.userid = p_userid
                    AND    UPPER(a.OEM_BARCODE) in (
                                        SELECT x.OEM_BARCODE
                                        FROM (
                                                    SELECT UPPER(OEM_BARCODE) oem_barcode
                                                    FROM   int$stg_createitem_all_fld m
                                                    WHERE  m.userid = p_userid
                                                    AND    m.item_management_mode ='I'
                                                    
UNION All

                                                    SELECT UPPER(OEM_BARCODE) oem_barcode
                                                    FROM   int$stg_createitem_all_fld m
                                                    WHERE  m.userid = p_userid
                                                    AND    m.item_management_mode in ('B','S')
                                                    GROUP BY UPPER(OEM_BARCODE)
                                               ) x
						                                        GROUP BY x.OEM_BARCODE
                                        HAVING COUNT(*) > 1
                                    )
                ) alias12;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Item Management Mode should be Item wise, Batch wise, Serial wise.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  item_management_mode IS NOT NULL
         AND    UPPER(item_management_mode) NOT IN ('I', 'B', 'S')
         AND    userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Price Management should be Item Level or Batch/Serial Level.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  price_management IS NOT NULL
         AND    UPPER(price_management) NOT IN ('I', 'B')
         AND    userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Manage Expiry should be Yes or No.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  manage_expiry IS NOT NULL
         AND    UPPER(manage_expiry) NOT IN ('Y', 'N')
         AND    userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Validity Mode should be Day, Month, Year or None.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  validity_mode IS NOT NULL
         AND    UPPER(validity_mode) NOT IN ('D', 'M', 'Y', 'N')
         AND    userid = p_userid;

         
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', --'Item Management Mode is not mapped. 
         'Batch/serial details are not applicable for this item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a
         WHERE  (item_management_mode = 'I' OR item_management_mode IS NULL)
         AND
         (manage_expiry IS NOT NULL
         OR    validity_period IS NOT NULL
         OR    validity_mode IS NOT NULL
         )
         AND   userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Validity Period can not be negative.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  validity_period < 0
         AND   userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Length Validation', 'Validity Period can not greater than 12.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  LENGTH(validity_period::TEXT) > 12
         AND   userid = p_userid;

      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Price Management cannot be Batch level, for Itemwise inventory managed item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  item_management_mode = 'I'
         AND    price_management = 'B'
         AND   userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Expiry Management cannot be Yes, for Itemwise inventory managed item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  item_management_mode = 'I'
         AND    manage_expiry = 'Y'
         AND   userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Validity Mode is not applicable for this item when Manage Expiry is No', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  manage_expiry = 'N'
         AND    validity_mode <> 'N'
         AND   userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Validity period is not applicable when mode is None.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  validity_mode = 'N'
         AND    validity_period is not null
         AND   userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Expiry Date is not applicable for Batchwise inventory managed item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld
         WHERE  item_management_mode = 'B'
         AND    expiry_date IS NOT NULL
         AND    userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Batch/serial details are not applicable for non-inventory item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a, invitem i
         WHERE  (a.icode_barcode = i.barcode or a.icode_barcode = i.icode)
         AND    i.item_management_mode IS NOT NULL
         AND    i.item_management_mode <> 'I'
         AND    i.noninventory = 'Y'
         AND   userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Negative stock alert method should be STOP for serial managed item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a
         WHERE  item_management_mode = 'S'
         AND    UPPER(negative_stk_alert) <> 'STOP'
         AND   userid = p_userid; 
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Price Management Mode is not mapped for Batch/Serial items.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a
         WHERE  item_management_mode IN ('B','S')
         AND   price_management IS NULL
         AND   userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Expiry details are not applicable for serial managed item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a
         WHERE  item_management_mode = 'S'
         AND    (manage_expiry IS NOT NULL AND (validity_mode IS NOT NULL OR validity_period IS NOT NULL))
         AND   userid = p_userid;

      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Expiry details are required only when expiry is managed for the item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a
         WHERE  item_management_mode = 'B'
         AND    manage_expiry = 'N'
         AND    (validity_mode IS NOT NULL OR validity_period IS NOT NULL)
         AND   userid = p_userid;

      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Expiry details are required when Manage Expiry is Yes for the item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a
         WHERE  item_management_mode = 'B'
         AND    manage_expiry = 'Y'
         AND    validity_mode <> 'N'
         AND    validity_period IS NULL
         AND    userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Validity Mode are required when Manage Expiry is Yes for the item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a
         WHERE  item_management_mode = 'B'
         AND    manage_expiry = 'Y'
         AND    validity_mode IS NULL
         AND    userid = p_userid;
         
      INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Modification of scan unit is not allowed for serial managed item.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a, invitem i
         WHERE  ((UPPER (a.icode_barcode) = i.icode) OR (UPPER (a.icode_barcode) = i.barcode))
         AND    a.item_management_mode = 'S'
         AND    a.barunit <> i.barunit
         AND    userid = p_userid;
         
      /*INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation', 'Inventory entry exist for this item. Modification of inventory tracking mode is not allowed.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a, invitem i
         WHERE  ((UPPER (a.icode_barcode) = i.icode) OR (UPPER (a.icode_barcode) = i.barcode))
         AND    a.item_management_mode <> i.item_management_mode
         AND    userid = p_userid;*/
		 
         INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT NEXTVAL('int$error_log_code'), lineno, p_classname, userid, 'Data Validation',
                'Inventory Management mode is not allowed to change once the transaction has been done.', clock_timestamp()
         FROM   int$stg_createitem_all_fld a, invitem i
         WHERE  ((UPPER(a.icode_barcode) = i.icode) OR (UPPER(a.icode_barcode) = i.barcode))
         AND    a.item_management_mode <> i.item_management_mode
         AND    exists (
                        SELECT  null
                        from    invstock_onhand t2
                        where   t2.icode = i.icode
                    )
         AND    userid = p_userid;
         
      UPDATE int$stg_createitem_all_fld
      SET price_management = 'I',
          manage_expiry = 'N',
          validity_mode = 'N',
          validity_period = NULL
      WHERE item_management_mode = 'I'
      AND userid = p_userid;
	  
      UPDATE int$stg_createitem_all_fld
      SET item_management_mode = 'I',
          price_management = 'I',
          manage_expiry = 'N',
          validity_mode = 'N',
          validity_period = NULL
      WHERE item_management_mode IS NULL
      -- Start Rev : 042
      and COALESCE(update_master,'NO') = 'NO'
      -- End rev : 042
      AND userid = p_userid;
      
      UPDATE int$stg_createitem_all_fld
      SET   validity_mode = 'N',
            manage_expiry = 'N'
      WHERE item_management_mode = 'B'
      AND (price_management = 'I' OR price_management IS NULL)
      AND (manage_expiry = 'N' OR manage_expiry IS NULL)
      AND userid = p_userid;

      UPDATE int$stg_createitem_all_fld
      SET   validity_mode = 'N',
            manage_expiry = 'N'
      WHERE item_management_mode = 'B'
      AND price_management = 'B'
      AND (manage_expiry = 'N' OR manage_expiry IS NULL)
      AND userid = p_userid;
      
    UPDATE int$stg_createitem_all_fld
      SET manage_expiry = 'N',
          validity_mode = 'N'
      WHERE item_management_mode = 'S'
      AND userid = p_userid;
         

      --COMMIT;

      BEGIN
           select  'S'
            into STRICT    v_status
            
            where   exists (
                            SELECT  'S'
                            from    int$error_log
                            where   userid = p_userid
                            );
            return('0');
        exception
            when no_data_found then
            return('1');

      END;
   EXCEPTION
      WHEN OTHERS THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;
         
         --ROLLBACK;
         INSERT INTO int$error_log (code, lineno, classname, userid, errortype, errordesc, createdon)
         VALUES (NEXTVAL('int$error_log_code'), 0, p_classname, p_userid, errcode, errmsg || ',' || COALESCE(g_mark,''), CURRENT_DATE);

         --COMMIT;

         RETURN ('0');

END;
"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

    {
      name = p_classname
      type = text
      mode = IN
      default = 'CREATEITEM'::text
    }

  >
  language = plpgsql
}

