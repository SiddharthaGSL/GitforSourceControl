function "main"."t_psite_grt_aud$psite_grt()" {
  text = """

DECLARE
    V_RECORD_OLD AUD_PSITE_GRT%ROWTYPE;
	V_RECORD_NEW AUD_PSITE_GRT%ROWTYPE;
    V_SID DOUBLE PRECISION;
    V_TRNID CHARACTER VARYING(50);
    V_ACTION CHARACTER VARYING(10);
    I RECORD;    
	V_AUDIT_USER CHARACTER VARYING (100);
	V_LOGINUSER  CHARACTER VARYING (100);
	V_PROGRAM    CHARACTER VARYING (100);
	V_REC_COUNT  BIGINT; 
   
BEGIN
       SELECT current_setting('audit.AUDIT_USER', true) INTO V_AUDIT_USER;
	   IF NULLIF(V_AUDIT_USER,'') IS NOT NULL THEN  
		   BEGIN
				SELECT FULLNAME
				INTO   STRICT V_LOGINUSER
				FROM   APPUSER
				WHERE  ID =  substring (V_AUDIT_USER,8,position(';' in V_AUDIT_USER)-8)::NUMERIC; 
		   EXCEPTION
				WHEN no_data_found
				THEN
					V_LOGINUSER := 'System';
			END;			
		ELSE
			V_LOGINUSER := 'SYSTEM';
		END IF;
	   
	   select application_name
	   INTO   V_PROGRAM
	   from pg_stat_activity where pid = pg_backend_pid();

       V_ACTION:=TG_OP;
	   
       SELECT TXID_CURRENT() INTO V_TRNID;
       
        IF TG_OP = 'INSERT' OR  TG_OP = 'UPDATE' THEN 
	   
           V_RECORD_NEW.ACTION := V_ACTION;
           V_RECORD_NEW.ACTION_SUBTYPE := 'NEW';
           V_RECORD_NEW.TRANSACTION_ID := V_TRNID::TEXT;		   
		   V_RECORD_NEW.code := NEW.code;
            V_RECORD_NEW.slcode := NEW.slcode;
            V_RECORD_NEW.admsite_code := NEW.admsite_code;
            V_RECORD_NEW.admou_code := NEW.admou_code;
            V_RECORD_NEW.docno := NEW.docno;
            V_RECORD_NEW.docdt := NEW.docdt;
            V_RECORD_NEW.store_loccode := NEW.store_loccode;
            V_RECORD_NEW.psite_intransit_loccode := NEW.psite_intransit_loccode;
            V_RECORD_NEW.reason := NEW.reason;
            V_RECORD_NEW.remarks := NEW.remarks;
            V_RECORD_NEW.basicamt := NEW.basicamt;
            V_RECORD_NEW.grsamt := NEW.grsamt;
            V_RECORD_NEW.netamt := NEW.netamt;
            V_RECORD_NEW.issecondary := NEW.issecondary;
            V_RECORD_NEW.ycode := NEW.ycode;
            V_RECORD_NEW.doc := NEW.doc;
            V_RECORD_NEW.isincluded := NEW.isincluded;
            V_RECORD_NEW.repln_admou_code := NEW.repln_admou_code;
            V_RECORD_NEW.transferout_glcode := NEW.transferout_glcode;
            V_RECORD_NEW.transferout_slcode := NEW.transferout_slcode;
            V_RECORD_NEW.transit_glcode := NEW.transit_glcode;
            V_RECORD_NEW.transit_slcode := NEW.transit_slcode;
            V_RECORD_NEW.repln_admsite_code := NEW.repln_admsite_code;
            V_RECORD_NEW.psite_stockpoint_code := NEW.psite_stockpoint_code;
            V_RECORD_NEW.formapplicable := NEW.formapplicable;
            V_RECORD_NEW.fintradegrp_code := NEW.fintradegrp_code;
            V_RECORD_NEW.return_rate_basis := NEW.return_rate_basis;
            V_RECORD_NEW.return_pricelist_code := NEW.return_pricelist_code;
            V_RECORD_NEW.pricetype := NEW.pricetype;
            V_RECORD_NEW.discountmode := NEW.discountmode;
            V_RECORD_NEW.includetaxindiscount := NEW.includetaxindiscount;
            V_RECORD_NEW.discountbasis := NEW.discountbasis;
            V_RECORD_NEW.discountfactor := NEW.discountfactor;
            V_RECORD_NEW.multiplesof := NEW.multiplesof;
            V_RECORD_NEW.roundlimit := NEW.roundlimit;
            V_RECORD_NEW.tax_rate_basis := NEW.tax_rate_basis;
            V_RECORD_NEW.owner_gstin_no := NEW.owner_gstin_no;
            V_RECORD_NEW.owner_gstin_state_code := NEW.owner_gstin_state_code;
            V_RECORD_NEW.cp_gstin_no := NEW.cp_gstin_no;
            V_RECORD_NEW.cp_gstin_state_code := NEW.cp_gstin_state_code;
            V_RECORD_NEW.gstdocno := NEW.gstdocno;
            V_RECORD_NEW.gstdocseq := NEW.gstdocseq;
            V_RECORD_NEW.psite_docscheme_code := NEW.psite_docscheme_code;
            V_RECORD_NEW.terminalid := NEW.terminalid;
            V_RECORD_NEW.ewaybillno := NEW.ewaybillno;
            V_RECORD_NEW.ewaybillgeneratedon := NEW.ewaybillgeneratedon;
            V_RECORD_NEW.ewaybillvalidupto := NEW.ewaybillvalidupto;
            V_RECORD_NEW.main_gl_amt := NEW.main_gl_amt;
            V_RECORD_NEW.udfstring1 := NEW.udfstring1;
            V_RECORD_NEW.udfstring2 := NEW.udfstring2;
            V_RECORD_NEW.udfstring3 := NEW.udfstring3;
            V_RECORD_NEW.udfstring4 := NEW.udfstring4;
            V_RECORD_NEW.udfstring5 := NEW.udfstring5;
            V_RECORD_NEW.udfstring6 := NEW.udfstring6;
            V_RECORD_NEW.udfstring7 := NEW.udfstring7;
            V_RECORD_NEW.udfstring8 := NEW.udfstring8;
            V_RECORD_NEW.udfstring9 := NEW.udfstring9;
            V_RECORD_NEW.udfstring10 := NEW.udfstring10;
            V_RECORD_NEW.udfnum01 := NEW.udfnum01;
            V_RECORD_NEW.udfnum02 := NEW.udfnum02;
            V_RECORD_NEW.udfnum03 := NEW.udfnum03;
            V_RECORD_NEW.udfnum04 := NEW.udfnum04;
            V_RECORD_NEW.udfnum05 := NEW.udfnum05;
            V_RECORD_NEW.udfdate01 := NEW.udfdate01;
            V_RECORD_NEW.udfdate02 := NEW.udfdate02;
            V_RECORD_NEW.udfdate03 := NEW.udfdate03;
            V_RECORD_NEW.udfdate04 := NEW.udfdate04;
            V_RECORD_NEW.udfdate05 := NEW.udfdate05;
            V_RECORD_NEW.createdon := NEW.createdon;
            V_RECORD_NEW.createdby := NEW.createdby;
            V_RECORD_NEW.lastmodifiedon := NEW.lastmodifiedon;
            V_RECORD_NEW.lastmodifiedby := NEW.lastmodifiedby;
            V_RECORD_NEW.closedon := NEW.closedon;
            V_RECORD_NEW.closedby := NEW.closedby;
            V_RECORD_NEW.intgrefid := NEW.intgrefid;
            V_RECORD_NEW.intg_docscheme_code := NEW.intg_docscheme_code;
            V_RECORD_NEW.createdbyid := NEW.createdbyid;
          END IF;  
            
         IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN 
	   
            V_RECORD_OLD.ACTION := V_ACTION;
            V_RECORD_OLD.ACTION_SUBTYPE := 'OLD';
            V_RECORD_OLD.TRANSACTION_ID := V_TRNID::TEXT;			
			V_RECORD_OLD.code := OLD.code;
            V_RECORD_OLD.slcode := OLD.slcode;
            V_RECORD_OLD.admsite_code := OLD.admsite_code;
            V_RECORD_OLD.admou_code := OLD.admou_code;
            V_RECORD_OLD.docno := OLD.docno;
            V_RECORD_OLD.docdt := OLD.docdt;
            V_RECORD_OLD.store_loccode := OLD.store_loccode;
            V_RECORD_OLD.psite_intransit_loccode := OLD.psite_intransit_loccode;
            V_RECORD_OLD.reason := OLD.reason;
            V_RECORD_OLD.remarks := OLD.remarks;
            V_RECORD_OLD.basicamt := OLD.basicamt;
            V_RECORD_OLD.grsamt := OLD.grsamt;
            V_RECORD_OLD.netamt := OLD.netamt;
            V_RECORD_OLD.issecondary := OLD.issecondary;
            V_RECORD_OLD.ycode := OLD.ycode;
            V_RECORD_OLD.doc := OLD.doc;
            V_RECORD_OLD.isincluded := OLD.isincluded;
            V_RECORD_OLD.repln_admou_code := OLD.repln_admou_code;
            V_RECORD_OLD.transferout_glcode := OLD.transferout_glcode;
            V_RECORD_OLD.transferout_slcode := OLD.transferout_slcode;
            V_RECORD_OLD.transit_glcode := OLD.transit_glcode;
            V_RECORD_OLD.transit_slcode := OLD.transit_slcode;
            V_RECORD_OLD.repln_admsite_code := OLD.repln_admsite_code;
            V_RECORD_OLD.psite_stockpoint_code := OLD.psite_stockpoint_code;
            V_RECORD_OLD.formapplicable := OLD.formapplicable;
            V_RECORD_OLD.fintradegrp_code := OLD.fintradegrp_code;
            V_RECORD_OLD.return_rate_basis := OLD.return_rate_basis;
            V_RECORD_OLD.return_pricelist_code := OLD.return_pricelist_code;
            V_RECORD_OLD.pricetype := OLD.pricetype;
            V_RECORD_OLD.discountmode := OLD.discountmode;
            V_RECORD_OLD.includetaxindiscount := OLD.includetaxindiscount;
            V_RECORD_OLD.discountbasis := OLD.discountbasis;
            V_RECORD_OLD.discountfactor := OLD.discountfactor;
            V_RECORD_OLD.multiplesof := OLD.multiplesof;
            V_RECORD_OLD.roundlimit := OLD.roundlimit;
            V_RECORD_OLD.tax_rate_basis := OLD.tax_rate_basis;
            V_RECORD_OLD.owner_gstin_no := OLD.owner_gstin_no;
            V_RECORD_OLD.owner_gstin_state_code := OLD.owner_gstin_state_code;
            V_RECORD_OLD.cp_gstin_no := OLD.cp_gstin_no;
            V_RECORD_OLD.cp_gstin_state_code := OLD.cp_gstin_state_code;
            V_RECORD_OLD.gstdocno := OLD.gstdocno;
            V_RECORD_OLD.gstdocseq := OLD.gstdocseq;
            V_RECORD_OLD.psite_docscheme_code := OLD.psite_docscheme_code;
            V_RECORD_OLD.terminalid := OLD.terminalid;
            V_RECORD_OLD.ewaybillno := OLD.ewaybillno;
            V_RECORD_OLD.ewaybillgeneratedon := OLD.ewaybillgeneratedon;
            V_RECORD_OLD.ewaybillvalidupto := OLD.ewaybillvalidupto;
            V_RECORD_OLD.main_gl_amt := OLD.main_gl_amt;
            V_RECORD_OLD.udfstring1 := OLD.udfstring1;
            V_RECORD_OLD.udfstring2 := OLD.udfstring2;
            V_RECORD_OLD.udfstring3 := OLD.udfstring3;
            V_RECORD_OLD.udfstring4 := OLD.udfstring4;
            V_RECORD_OLD.udfstring5 := OLD.udfstring5;
            V_RECORD_OLD.udfstring6 := OLD.udfstring6;
            V_RECORD_OLD.udfstring7 := OLD.udfstring7;
            V_RECORD_OLD.udfstring8 := OLD.udfstring8;
            V_RECORD_OLD.udfstring9 := OLD.udfstring9;
            V_RECORD_OLD.udfstring10 := OLD.udfstring10;
            V_RECORD_OLD.udfnum01 := OLD.udfnum01;
            V_RECORD_OLD.udfnum02 := OLD.udfnum02;
            V_RECORD_OLD.udfnum03 := OLD.udfnum03;
            V_RECORD_OLD.udfnum04 := OLD.udfnum04;
            V_RECORD_OLD.udfnum05 := OLD.udfnum05;
            V_RECORD_OLD.udfdate01 := OLD.udfdate01;
            V_RECORD_OLD.udfdate02 := OLD.udfdate02;
            V_RECORD_OLD.udfdate03 := OLD.udfdate03;
            V_RECORD_OLD.udfdate04 := OLD.udfdate04;
            V_RECORD_OLD.udfdate05 := OLD.udfdate05;
            V_RECORD_OLD.createdon := OLD.createdon;
            V_RECORD_OLD.createdby := OLD.createdby;
            V_RECORD_OLD.lastmodifiedon := OLD.lastmodifiedon;
            V_RECORD_OLD.lastmodifiedby := OLD.lastmodifiedby;
            V_RECORD_OLD.closedon := OLD.closedon;
            V_RECORD_OLD.closedby := OLD.closedby;
            V_RECORD_OLD.intgrefid := OLD.intgrefid;
            V_RECORD_OLD.intg_docscheme_code := OLD.intg_docscheme_code;
            V_RECORD_OLD.createdbyid := OLD.createdbyid;
          END IF;  

    IF TG_OP = 'INSERT' THEN
	    V_REC_COUNT := 1;
        INSERT INTO AUD_PSITE_GRT SELECT V_RECORD_NEW.*;
    END IF;

    IF TG_OP = 'UPDATE' THEN
	FOR I IN (
		SELECT 
		V_RECORD_OLD.psite_stockpoint_code,
                  V_RECORD_OLD.transit_slcode,
                  V_RECORD_OLD.transit_glcode,
                  V_RECORD_OLD.transferout_slcode,
                  V_RECORD_OLD.transferout_glcode,
                  V_RECORD_OLD.netamt,
                  V_RECORD_OLD.grsamt,
                  V_RECORD_OLD.basicamt,
                  V_RECORD_OLD.remarks,
                  V_RECORD_OLD.reason
		EXCEPT
		SELECT 
		V_RECORD_NEW.psite_stockpoint_code,
                  V_RECORD_NEW.transit_slcode,
                  V_RECORD_NEW.transit_glcode,
                  V_RECORD_NEW.transferout_slcode,
                  V_RECORD_NEW.transferout_glcode,
                  V_RECORD_NEW.netamt,
                  V_RECORD_NEW.grsamt,
                  V_RECORD_NEW.basicamt,
                  V_RECORD_NEW.remarks,
                  V_RECORD_NEW.reason
			 )
	LOOP
	  V_REC_COUNT := 1; 
		INSERT INTO AUD_PSITE_GRT SELECT V_RECORD_OLD.*;
       INSERT INTO AUD_PSITE_GRT SELECT V_RECORD_NEW.*;    
	END LOOP;   
    END IF;

    IF TG_OP = 'DELETE' THEN
		V_REC_COUNT := 1;
		INSERT INTO AUD_PSITE_GRT SELECT V_RECORD_OLD.*;
    END IF;
	
	IF V_REC_COUNT >  0
	THEN
	   BEGIN
            INSERT INTO AUD_TRANSACTION (TRANSACTION_ID, TRANSACTION_DATE, LOGIN_USER, PROGRAM, MODULE_SHORTCODE, MODULE_TYPE)
            VALUES (V_TRNID,   current_date,V_LOGINUSER, V_PROGRAM, 'POS GRT', 'POS GRT');
       EXCEPTION WHEN unique_violation THEN
            NULL;
       END;  

       BEGIN  
             INSERT INTO AUD_TRANSACTION_TABLE (TRANSACTION_ID, TABLE_NAME)
             VALUES (V_TRNID,  'PSITE_GRT');
       EXCEPTION WHEN unique_violation THEN
             NULL;
       END; 
	END IF;   
    

    IF TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    EXCEPTION
        WHEN others THEN
            CALL main.erraudit(SESSION_USER::text, 'T_PSITE_GRT_AUD'::CHARACTER, SQLSTATE::text, SQLERRM);
			RAISE;
			RETURN NULL;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

