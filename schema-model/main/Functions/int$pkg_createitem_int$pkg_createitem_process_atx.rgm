function "main"."int$pkg_createitem_int$pkg_createitem_process_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      errmsg             varchar(4000);
      vsession           varchar(100);
      vdetailtbl         varchar(4000);
      vdetailrec         varchar(500);
      errcode            text;
      vmaxno             bigint;
      vcount             bigint;

      v_username         admcmp.cmpinit%TYPE;
      v_cmpcode          bigint;
      v_itemprefix       admcmp.itemprefix%TYPE;
      v_pcode            bigint;
      v_grpcode          bigint;
      v_ageing_appl      char(1);
      v_costing_method   char(1);

      v_agdtfr          timestamp;
      v_agdtto          timestamp;
      --e_my_ageing       exception;

      return_string      char(1000);

      v_err              varchar(1000);

      g_mark             varchar(100);i RECORD;

BEGIN
      g_mark := 'P01';

      -- Put this code in one time execution only
      BEGIN
         SELECT cmpcode, itemprefix
         INTO STRICT v_cmpcode, v_itemprefix
         FROM admcmp;
      EXCEPTION
         WHEN OTHERS
         THEN
            CALL erraudit(USER, '1', '1', SQLERRM);
      END;

      FOR i IN (SELECT *
                FROM int$stg_createitem_all_fld
                WHERE userid = p_userid order by lineno)
      LOOP
         return_string := erpcheckcategory(	NULLIF(i.cname1,''),
                                            NULLIF(i.cname2,''),
                                            NULLIF(i.cname3,''),
                                            NULLIF(i.cname4,''),
                                            NULLIF(i.cname5,''),
                                            NULLIF(i.cname6,''));

         UPDATE int$stg_createitem_all_fld
         SET ccode1 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 1, 12))),'')::bigint,
             ccode2 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 13, 12))),'')::bigint,
             ccode3 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 25, 12))),'')::bigint,
             ccode4 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 37, 12))),'')::bigint,
             ccode5 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 49, 12))),'')::bigint,
             ccode6 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 61, 12))),'')::bigint,
             cname1 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 73, 100))),''),
             cname2 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 173, 100))),''),
             cname3 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 273, 100))),''),
             cname4 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 373, 100))),''),
             cname5 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 473, 100))),''),
             cname6 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 673), 573, 100))),'')
         WHERE lineno = i.lineno
         AND   userid = p_userid;

      END LOOP;

      declare
            v_cname         invcat1.cname%type;
      begin
            FOR i IN (SELECT distinct ccode1
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat1 
                    where  ccode = i.ccode1;

                    update int$stg_createitem_all_fld a
                    set    cname1 = v_cname
                    where  ccode1 = i.ccode1;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode2
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat2 
                    where  ccode = i.ccode2;

                    update int$stg_createitem_all_fld a
                    set    cname2 = v_cname
                    where  ccode2 = i.ccode2;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode3
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat3 
                    where  ccode = i.ccode3;

                    update int$stg_createitem_all_fld a
                    set    cname3 = v_cname
                    where  ccode3 = i.ccode3;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode4
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat4 
                    where  ccode = i.ccode4;

                    update int$stg_createitem_all_fld a
                    set    cname4 = v_cname
                    where  ccode4 = i.ccode4;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode5
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat5 
                    where  ccode = i.ccode5;

                    update int$stg_createitem_all_fld a
                    set    cname5 = v_cname
                    where  ccode5 = i.ccode5;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode6
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat6 
                    where  ccode = i.ccode6;

                    update int$stg_createitem_all_fld a
                    set    cname6 = v_cname
                    where  ccode6 = i.ccode6;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;
      end;

      return_string := NULL;

      FOR i IN (SELECT *
                FROM int$stg_createitem_all_fld
                WHERE userid = p_userid order by lineno)
      LOOP
         IF i.icode IS NOT NULL
         THEN
            UPDATE invitem j
            SET invarticle_code = coalesce(i.article_code, j.invarticle_code),
                item_name = coalesce(i.item_name, j.item_name),
                barcode = ltrim(rtrim(coalesce(i.oem_barcode, j.barcode))),
                rem = coalesce(i.ITEM_REM, j.rem),
                cname1 = coalesce(i.cname1, j.cname1),
                ccode1 = coalesce(i.ccode1, j.ccode1),
                cname2 = coalesce(i.cname2, j.cname2),
                ccode2 = coalesce(i.ccode2, j.ccode2),
                cname3 = coalesce(i.cname3, j.cname3),
                ccode3 = coalesce(i.ccode3, j.ccode3),
                cname4 = coalesce(i.cname4, j.cname4),
                ccode4 = coalesce(i.ccode4, j.ccode4),
                cname5 = coalesce(i.cname5, j.cname5),
                ccode5 = coalesce(i.ccode5, j.ccode5),
                cname6 = coalesce(i.cname6, j.cname6),
                ccode6 = coalesce(i.ccode6, j.ccode6),
                desc1 = coalesce(i.desc1, j.desc1),
                desc2 = coalesce(i.desc2, j.desc2),
                desc3 = coalesce(i.desc3, j.desc3),
                desc4 = coalesce(i.desc4, j.desc4),
                desc5 = coalesce(i.desc5, j.desc5),
                desc6 = coalesce(i.desc6, j.desc6),
                num1 = coalesce(i.num1, j.num1),
                num2 = coalesce(i.num2, j.num2),
                num3 = coalesce(i.num3, j.num3),
                shrtname = coalesce(i.item_shrtname, j.shrtname),
                taxcode = coalesce(i.taxcode, j.taxcode),
                negative_stock_alert = coalesce(UPPER(SUBSTR(trim(both i.negative_stk_alert),1,1)),j.negative_stock_alert),
                barunit = coalesce(i.barunit, j.barunit),
                costrate = coalesce(i.standard_rate, j.costrate),
                mrp = coalesce(i.rsp, j.mrp),
                listed_mrp = coalesce(i.listed_mrp, j.listed_mrp),
                wsp = coalesce(i.wsp, j.wsp),
                unitname = coalesce(i.uom, j.unitname),
                material_type = coalesce(UPPER(SUBSTR(trim(both i.material_type),1,1)),j.material_type),
                partycode = coalesce(i.partycode, j.partycode),
                partyname = coalesce(i.partyname, j.partyname),
                partyalias = coalesce(i.partyalias, j.partyalias),
                expiry_date = coalesce(i.expiry_date, j.expiry_date),
                --invhsnsacmain_code = coalesce(i.invhsnsacmain_code, j.invhsnsacmain_code),
                invhsnsacmain_code = case when j.invhsnsacmain_code is null then
                                                  i.invhsnsacmain_code
                                             else
                                                  -- START REV : 041
                                                  --j.invhsnsacmain_code
                                                  coalesce (i.invhsnsacmain_code, j.invhsnsacmain_code)
                                                  -- END REV : 041
                                        end,
				isprice_excludes_tax = coalesce(CASE WHEN UPPER(i.Extra_Tax) = 'YES' THEN 1 ELSE 0 END, j.isprice_excludes_tax),
                udfstring01 = coalesce(i.udfstring01, j.udfstring01),
                udfstring02 = coalesce(i.udfstring02, j.udfstring02),
                udfstring03 = coalesce(i.udfstring03, j.udfstring03),
                udfstring04 = coalesce(i.udfstring04, j.udfstring04),
                udfstring05 = coalesce(i.udfstring05, j.udfstring05),
                udfstring06 = coalesce(i.udfstring06, j.udfstring06),
                udfstring07 = coalesce(i.udfstring07, j.udfstring07),
                udfstring08 = coalesce(i.udfstring08, j.udfstring08),
                udfstring09 = coalesce(i.udfstring09, j.udfstring09),
                udfstring10 = coalesce(i.udfstring10, j.udfstring10),
                udfnum01    = coalesce(i.udfnum01, j.udfnum01),
                udfnum02    = coalesce(i.udfnum02, j.udfnum02),
                udfnum03    = coalesce(i.udfnum03, j.udfnum03),
                udfnum04    = coalesce(i.udfnum04, j.udfnum04),
                udfnum05    = coalesce(i.udfnum05, j.udfnum05),
                udfdate01   = coalesce(i.udfdate01, j.udfdate01),
                udfdate02   = coalesce(i.udfdate02, j.udfdate02),
                udfdate03   = coalesce(i.udfdate03, j.udfdate03),
                udfdate04   = coalesce(i.udfdate04, j.udfdate04),
                udfdate05   = coalesce(i.udfdate05, j.udfdate05)
                ,GLCODE         = coalesce(i.GLCODE, j.GLCODE)
                ,SLCODE         = coalesce(i.SLCODE, j.SLCODE)
                ,GST_ITC_APPL   = coalesce(i.GST_ITC_APPL, j.GST_ITC_APPL)
                ,GRPCODE   = coalesce(i.GRPCODE, j.GRPCODE)
                ,ITEM_MANAGEMENT_MODE = coalesce(i.ITEM_MANAGEMENT_MODE,j.ITEM_MANAGEMENT_MODE)
                ,PRICE_MANAGEMENT = coalesce(i.PRICE_MANAGEMENT,j.PRICE_MANAGEMENT)
                ,MANAGE_EXPIRY = coalesce(i.MANAGE_EXPIRY,j.MANAGE_EXPIRY)
                ,VALIDITY_MODE = coalesce(i.VALIDITY_MODE,j.VALIDITY_MODE)
                ,VALIDITY_PERIOD = coalesce(i.VALIDITY_PERIOD,j.VALIDITY_PERIOD)
                ,POS_BATCH_SELECTION_MODE = coalesce(i.POS_BATCH_SELECTION_MODE,j.POS_BATCH_SELECTION_MODE)
            WHERE (UPPER(icode) = LTRIM(RTRIM(UPPER(coalesce(i.icode_barcode,'x')))) or UPPER(barcode) = LTRIM(RTRIM(UPPER(coalesce(i.icode_barcode,'x')))))
            AND UPPER(SUBSTR(coalesce(I.UPDATE_MASTER,'N'),1,1)) = 'Y';
         ELSE
                v_agdtfr := null;
                v_agdtto := null;

                if  coalesce(i.ageing_appl,'N') = 'Y' then
                    begin
                            select 	dtfr, dtto
                            into STRICT 	v_agdtfr,
                                    v_agdtto
                            from    invageing ag
                            where 	p_logging_date between dtfr and dtto;
                        exception
                            when others then
                            raise exception 'e_my_ageing' using errcode = '50001';
                    end;
                end if;

return_string := new_erpcreateitem(
                                     v_cmpcode::bigint
                                    ,v_itemprefix::text
                                    ,i.partycode::bigint
                                    ,REPLACE(i.partyname::text, '''', ' ')
                                    ,i.uom::text
                                    ,i.grpcode::bigint
                                    ,i.article_code::bigint
                                    ,coalesce(i.taxcode::bigint, 0)
                                    ,coalesce(i.barunit::bigint, 1)
                                    ,i.standard_rate::bigint
                                    ,coalesce(i.rsp::bigint, 0)
                                    ,i.cname1::text
                                    ,i.cname2::text
                                    ,i.cname3::text
                                    ,i.cname4::text
                                    ,i.cname5::text
                                    ,i.cname6::text
                                    ,NULL::bigint
                                    ,trim(both i.icode::text)
                                    ,ltrim(rtrim(coalesce(i.oem_barcode::text,i.icode_barcode::text)))
                                    ,i.listed_mrp::bigint
                                    ,i.wsp::bigint
                                    ,i.expiry_date
                                    ,i.item_shrtname::text
                                    ,i.ageing_appl::text
                                    ,p_logging_date
                                    ,v_agdtfr
                                    ,v_agdtto
                                    ,'N'::text                        -- argconsiderasfree
                                    ,'N'::text                        -- argwhetherconsignment
                                    ,i.costing_method::text           -- argavgcostingapplicable
                                    ,'N'::text                        -- argnoninventory
                                    ,'N'::text                        -- argallow_price_modification
                                    ,'N'::text                        -- argmodule_name
                                    ,'N'::text                        -- argautoqtypopup
                                    ,'N'::text                        -- argpos_multiprice_action
                                    ,'N'::text                        -- argismetal
                                    ,current_date-- arggenerated
                                    ,i.desc1::text
                                    ,i.desc2::text
                                    ,i.desc3::text
                                    ,i.desc4::text
                                    ,i.desc5::text
                                    ,i.desc6::text
                                    ,i.num1::bigint
                                    ,i.num2::bigint
                                    ,i.num3::bigint
                                    ,NULL::bigint                       -- argprice_change_limit
                                    ,coalesce(UPPER(SUBSTR(trim(both i.negative_stk_alert::text),1,1)),'P')
                                    ,coalesce(UPPER(SUBSTR(trim(both i.material_type::text), 1, 1)),'F')
                                    ,i.udfstring01::text
                                    ,i.udfstring02::text
                                    ,i.udfstring03::text
                                    ,i.udfstring04::text
                                    ,i.udfstring05::text
                                    ,i.udfstring06::text
                                    ,i.udfstring07::text
                                    ,i.udfstring08::text
                                    ,i.udfstring09::text
                                    ,i.udfstring10::text
                                    ,i.udfnum01::text
                                    ,i.udfnum02::text
                                    ,i.udfnum03::text
                                    ,i.udfnum04::text
                                    ,i.udfnum05::text
                                    ,i.udfdate01::text
                                    ,i.udfdate02::text
                                    ,i.udfdate03::text
                                    ,i.udfdate04::text
                                    ,i.udfdate05::text
                                    ,i.invhsnsacmain_code::bigint
                                    ,CASE
                                        WHEN UPPER(i.Extra_Tax) = 'YES' THEN 1::bigint
                                        ELSE 0::bigint
                                    END
                                    ,I.GLCODE::bigint
                                    ,I.SLCODE::bigint
                                    ,coalesce(I.GST_ITC_APPL::text,'IP')
                                    ,i.item_management_mode::text
                                    ,i.price_management::text
                                    ,i.manage_expiry::text     
                                    ,i.validity_mode::text     
                                    ,i.validity_period::numeric    
                                    ,i.pos_batch_selection_mode::text
                                );

            IF SUBSTR(LPAD(return_string, 699), 699, 1) = 'Y'
            THEN
               UPDATE invitem
               SET rem = i.item_rem,
                   item_name = i.item_name
               WHERE icode = LTRIM(RTRIM(UPPER(SUBSTR(RPAD(return_string, 699), 1, 9))));

               update int$stg_createitem_all_fld 
               set icode = LTRIM(RTRIM(UPPER(SUBSTR(RPAD(return_string, 699), 1, 9))))
               WHERE lineno = i.lineno
               and userid   = p_userid;
			   
			   update invitem k
               set k.allow_price_modification = (SELECT grp_allow_price_modification from invgrp where grpcode = k.grpcode),
               k.pos_multiprice_action = (select grp_pos_multiprice_action from invgrp where grpcode = k.grpcode),
               k.price_change_limit = (select grp_price_change_limit from invgrp where grpcode = k.grpcode),
               k.autoqtypopup = (select grp_autoqtypopup from invgrp where grpcode = k.grpcode)
               where k.icode = LTRIM(
                            RTRIM(
                               UPPER(
                                  SUBSTR(LPAD(return_string, 699), 1, 9))));

            END IF;
               update int$stg_createitem_all_fld 
               set icode = LTRIM(RTRIM(UPPER(SUBSTR(RPAD(return_string, 699), 1, 9))))
               WHERE lineno = i.lineno
               and userid   = p_userid;
			
         END IF;
      END LOOP;

      -- log to be added in history table
      SELECT nextval('int$error_log_code') INTO STRICT vsession;

      vdetailtbl :=    'create table ginarchive.createitemimport_'
                    || vsession
                    || ' as select distinct icode_barcode, icode, oem_barcode, article_name, article_code,
                                           item_name, item_rem, cname1, ccode1, cname2, ccode2, cname3, ccode3,
                                           cname4, ccode4, cname5, ccode5, cname6, ccode6, desc1, desc2, desc3,
                                           desc4, desc5, desc6, num1, num2, num3, item_shrtname, taxname, taxcode,
                                           negative_stk_alert, barunit, standard_rate, rsp, listed_mrp, wsp, uom,
                                           material_type, item_vendor_id, partycode, partyname, partyalias,
                                           udfstring01, udfstring02, udfstring03, udfstring04, udfstring05,
                                           udfstring06, udfstring07, udfstring08, udfstring09, udfstring10,
                                           udfnum01, udfnum02, udfnum03, udfnum04, udfnum05,
                                           udfdate01, udfdate02, udfdate03, udfdate04, udfdate05,
                                           Extra_Tax, expiry_date, lineno, item_management_mode, price_management, manage_expiry,
                                           validity_mode, validity_period, pos_batch_selection_mode, batch_serial_no,
                                           batch_standard_rate, batch_wsp, batch_rsp, batch_mrp, batch_mfg_date, batch_valid_upto, userid
                           from  int$stg_createitem_all_fld
                           where userid ='
                    || p_userid::text
                    ||' order by lineno';

      EXECUTE vdetailtbl;

	vdetailrec := 'select count(1) from ginarchive.createitemimport_' || vsession::text;
      EXECUTE vdetailrec INTO STRICT vcount;

      INSERT INTO int$history(code, importedby, importedon, classname, summary, history_detail_tablename, history_detail_row_count)
      VALUES (nextval('int$history_code'), p_userid, clock_timestamp(), 'CREATEITEM',
              vcount::TEXT || ' Item imported successfully.', 'ginarchive.createitemimport_' || vsession, vcount
              );

      --COMMIT;

      RETURN('1');
   EXCEPTION
       WHEN SQLSTATE '50001' THEN
            errcode := 50001;
            errmsg  := 'Ageing is not properly defined. Unable to create item under ageing applicable department.';

            ROLLBACK;

            -- error log for oracle internal error
            INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
            VALUES (nextval('int$error_log_code'), 0, 'CREATEITEM', p_userid, errcode, errmsg, clock_timestamp());

            --COMMIT;

            RETURN('0');

      WHEN OTHERS THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;
            ROLLBACK;

         -- error log for oracle internal error
         INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         VALUES (nextval('int$error_log_code'), 0, 'CREATEITEM', p_userid, errcode, errmsg, clock_timestamp());

         --COMMIT;

         RETURN('0');

END;
"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

