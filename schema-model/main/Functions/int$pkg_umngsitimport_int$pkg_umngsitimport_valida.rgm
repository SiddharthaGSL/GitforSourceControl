function "main"."int$pkg_umngsitimport_int$pkg_umngsitimport_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      v_status   char(1);
      errmsg     varchar(200);
      errcode    bigint;
BEGIN
      --code  Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid  Code ',
                clock_timestamp()
         FROM  int$stg_umngsitimport a
LEFT OUTER JOIN admsite b ON (UPPER(a.code) = UPPER(b.code))
WHERE b.code IS NULL AND a.code IS NOT NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Same SITECODE available more than one time.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT   a,
              (SELECT a.code, COUNT(1)
               FROM int$stg_UMNGSITIMPORT a
               WHERE a.code IS NOT NULL
               AND   a.userid = p_userid
               GROUP BY a.code
               HAVING COUNT(1) > 1) b
         WHERE a.code = b.code
         AND   a.code IS NOT NULL
         AND   a.userid = p_userid;

      --name Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Name already exists.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, admsite b
         WHERE UPPER(a.NAME) = UPPER(b.NAME)
         AND   b.NAME IS NOT NULL
         AND   ( (a.code IS NOT NULL
         AND      a.code <> b.code)
         OR     a.code IS NULL)
         --  AND a.code IS NULL
         AND   a.userid = p_userid;

         -- START REV : 009
         insert into int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Same Site Name available more than one time.',
                clock_timestamp()
         from int$stg_umngsitimport   a,
              (SELECT a.name, coalesce(count(1),0)
               from int$stg_umngsitimport a
               where a.name is not null
               and   a.userid = p_userid
               group by a.name
               having coalesce(count(1),0) > 1) b
         where upper(a.name) = upper(b.name)
         and   a.name is not null
         and   a.userid = p_userid;
         -- END REV : 009
         -- START REV : 006
               INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Name is mandatory for Site creation.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE    a.NAME IS NULL
         AND  a.code IS NULL
         --  AND a.code IS NULL
         AND   a.userid = p_userid;
         -- END REV : 006
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Short Name already exists.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, admsite b
         WHERE UPPER(a.shrtname) = UPPER(b.shrtname)
         AND   a.shrtname IS NOT NULL
         AND   ( (a.code IS NOT NULL
         AND      a.code <> b.code)
         OR     a.code IS NULL)
         --  AND a.code IS NULL
         AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Short Name can not be null.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE shrtname IS NULL
         AND   a.code IS NULL
         AND   a.userid = p_userid;

         --slid Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid slid.',
                clock_timestamp()
         FROM int$stg_umngsitimport a LEFT OUTER JOIN (SELECT UPPER(SL.SLID) SLID
               FROM FINSL SL
               WHERE SL.EXT = 'N'
               AND   coalesce(SL.SALETYPE,'@') IN ('C','O')
               ) b
			   ON (UPPER(a.slid) = UPPER(b.slid))
WHERE a.code IS NULL AND a.slid IS NOT NULL AND b.slid IS NULL AND a.userid = p_userid;
         -- END REV : 007
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Site does not belongs to given slid.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT A, ADMSITE B, FINSL SL
         WHERE UPPER(B.SLCODE) = UPPER(SL.SLCODE)
         AND   a.code IS NOT NULL
         AND   A.CODE = B.CODE
         AND   UPPER(A.slid) <> UPPER(SL.sliD)
         AND   a.userid = p_userid;

      --CITY Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid City name, not available in Ginesys City Master ',
                clock_timestamp()
         FROM int$stg_umngsitimport a
LEFT OUTER JOIN admcity b ON (UPPER(a.ctname) = UPPER(b.ctname))
WHERE b.ctname IS NULL AND a.ctname IS NOT NULL AND a.userid = p_userid;

      --EMAIL1 Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Busines Email.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE (position('@' in email1) = 0
         OR     position('.' in email1) = 0)
         AND   a.email1 IS NOT NULL
         AND   a.userid = p_userid;

      --EMAIL2 Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Busines Email.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE (position('@' in email2) = 0
         OR     position('.' in email2) = 0)
         AND   a.email2 IS NOT NULL
         AND   a.userid = p_userid;

      --TERM_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Term Name / Extinct',
                clock_timestamp()
         FROM  int$stg_umngsitimport a
LEFT OUTER JOIN saltermmain b ON (UPPER(a.term_name) = UPPER(b.saltermname))
WHERE (b.saltermname IS NULL
         OR     B.EXT = 'Y') AND a.term_name IS NOT NULL AND a.userid = p_userid;

      --TERM_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Term Name should be null',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, FINSL B
         WHERE UPPER(A.SLID) = UPPER(B.SLID)
         AND   B.SALETYPE = 'C'
         AND   term_name IS NOT NULL
         AND   a.userid = p_userid;

      --TERM_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Term Name should be null as Trade Group No Provided / Term Name  need to provide as Trade Group given',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE ( (a.term_name IS NOT NULL
         AND      a.saltradegrp_name IS NULL)
         OR (a.term_name IS NULL
         AND     a.saltradegrp_name IS NOT NULL))
         AND   a.userid = p_userid;

      --Sales Term Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Term Name w.r.t. Trade Group / Extinct Term.',
                clock_timestamp()
         FROM  (SELECT B1.CODE               FINTRADEGRP_CODE,
                      a1.saltradegrp_name   saltradegrp_name,
                      term_name,
                      LINENO,
                      USERID
               FROM int$stg_UMNGSITIMPORT A1, fintradegrp b1
               WHERE UPPER(a1.saltradegrp_name) = UPPER(B1.NAME)
               AND   B1.EXT = 'N'
               AND   a1.userid = p_userid) a 
			   LEFT OUTER JOIN (SELECT FINTRADEGRP_CODE, a1.term_name TERMNAME
               FROM int$stg_UMNGSITIMPORT A1, saltermmain b1
               WHERE UPPER(a1.term_name) = UPPER(b1.saltermname)
               AND   B1.EXT = 'N'
               AND   a1.userid = p_userid) b 
			   ON (UPPER(a.term_name) = UPPER(b.TERMNAME))
WHERE  --AND UPPER (a.saltradegrp_name) = UPPER (t.NAME)
   B.FINTRADEGRP_CODE IS NULL AND UPPER(a.term_name) IS NOT NULL AND UPPER(a.saltradegrp_name) IS NOT NULL AND a.userid = p_userid;

      --SALTRADEGROUP_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Sales trade group Name.',
                clock_timestamp()
         FROM  int$stg_umngsitimport a
LEFT OUTER JOIN fintradegrp b ON (UPPER(a.saltradegrp_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL
         OR     B.EXT = 'Y') AND a.saltradegrp_name IS NOT NULL AND a.userid = p_userid;

      --SALTRADEGROUP_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Sales trade group should be null.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, finsl b
         WHERE a.saltradegrp_name IS NOT NULL
         AND   UPPER(a.slid) = UPPER(b.slid)
         --AND a.slid IS NOT NULL
         AND   b.saletype = 'C'
         AND   a.userid = p_userid;

      --SALFORM_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Sales Form Name.',
                clock_timestamp()
         FROM  int$stg_umngsitimport a
LEFT OUTER JOIN finform b ON (UPPER(a.salform_name) = UPPER(b.formname))
WHERE a.salform_name IS NOT NULL AND (b.formname IS NULL
         OR     B.EXT = 'Y') AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Sales Form Name group should be null.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, finsl b
         WHERE a.salform_name IS NOT NULL
         AND   UPPER(a.slid) = UPPER(b.slid)
         AND   b.saletype = 'C'
         AND   a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Form Name should be null as Trade Group is Null / Form Name can not be null as Trade Group is Not Null',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE ( (a.salform_name IS NOT NULL
         AND      a.saltradegrp_name IS NULL)
         OR (a.salform_name IS NULL
         AND     a.saltradegrp_name IS NOT NULL))
         AND   a.userid = p_userid;

      --SALFORM_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Local Trade Group should have Form Name ''None''.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE UPPER(a.saltradegrp_name) = 'LOCAL'
         AND   UPPER(a.salform_name) <> 'NONE'
         AND   a.userid = p_userid;

      -- START REV : 003
      -- OU_NAME related validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'UMNGSITIMPORT', userid, 'Data Validation', 'Invalid OU name.', clock_timestamp()
           FROM int$stg_UMNGSITIMPORT a
          WHERE UPPER(ou_name) NOT IN (
                                SELECT upper(b.name)
                                from   admou b
                                where  coalesce(b.ext, 'N') = 'N'
                            )
            AND a.ou_name IS NOT NULL
            AND a.userid = p_userid;
       -- END REV : 003
      -- START REV : 008
      -- OU_NAME related validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc, createdon)
         SELECT nextval('int$error_log_code'), lineno, 'UMNGSITIMPORT', userid, 'Data Validation', CASE WHEN b.saletype='C' THEN 'OU Name is mandatory for Consignment Supplier' WHEN b.saletype='O' THEN                                                                                                       'OU Name should be blank for Outright supplier'  ELSE 'Invalid Mode of operation for the supplier.' END , clock_timestamp()
           FROM int$stg_UMNGSITIMPORT a, finsl b
         WHERE UPPER(a.slid) = UPPER(b.slid)
         AND   a.slid IS NOT NULL
         AND (
                ( b.saletype = 'C' AND   a.ou_name IS NULL )
               OR ( b.saletype = 'O'  AND   a.ou_name IS NOT NULL )
               OR (B.saletype NOT IN ('C','O'))
             )
         AND a.userid = p_userid;

      --PRICELIST_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Trade Group is Null hence Price List Should be Null. / Trade Group is available hence Pricelist can not be null ',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, finsl b
         WHERE ( (pricelist_name IS NULL
         AND      a.saltradegrp_name IS NOT NULL)
         OR (pricelist_name IS NOT NULL
         AND     a.saltradegrp_name IS NULL))
         AND   UPPER(a.slid) = UPPER(b.slid)
         AND   b.saletype = 'O'
         AND   a.userid = p_userid;

      --PRICELIST_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Pricelist Name.',
                clock_timestamp()
         FROM  int$stg_umngsitimport a
LEFT OUTER JOIN salpricelistmain b ON (UPPER(a.pricelist_name) = UPPER(b.pricelistname))
WHERE a.pricelist_name IS NOT NULL AND b.pricelistname IS NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Pricelist name.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, finsl b, SALPRICELISTMAIN SL
         WHERE UPPER(a.slid) = UPPER(b.slid)
         AND   b.saletype = 'C'
         AND   coalesce(INCLUDE_VAT_IN_DISCOUNT, 'N') = 'Y'
         AND   UPPER(a.pricelist_name) = UPPER(SL.pricelistname)
         AND   a.userid = p_userid;

      --PSITE_ADMCMPTAX_NAME Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Admcmptax Name',
                clock_timestamp()
         FROM  int$stg_umngsitimport a
LEFT OUTER JOIN admcmptax b ON (UPPER(a.psite_admcmptax_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL
         OR     B.EXT = 'Y') AND a.psite_admcmptax_name IS NOT NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Admcmptax Name can not be null.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, finsl b
         WHERE UPPER(a.slid) = UPPER(b.slid)
         AND   b.saletype = 'C'
         AND   a.psite_admcmptax_name IS NULL
         AND   a.userid = p_userid;

      --PSITE_ADMCMPTAX_NAME Validation
      --ISSECONDARY  Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Manage Secondoary Stock  for own store',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a, finsl b
         WHERE UPPER(a.slid) = UPPER(b.slid)
         AND   a.slid IS NOT NULL
         AND   b.saletype = 'C'
         AND   UPPER(a.issecondary) = 'YES'
         AND   a.userid = p_userid;

      --ISSECONDARY  Validation
      /* INSERT INTO int$error_log
                   (code, lineno, classname, userid, errortype, errordesc,
                    createdon)
          SELECT int$error_log_code.NEXTVAL, lineno, 'UMNGSITIMPORT', userid,
                 'Data Validation',
                 'Invalid Manage Secondoary Stock  for own store', SYSDATE
            FROM int$stg_UMNGSITIMPORT a
           WHERE a.slid IS NULL
             AND UPPER (a.issecondary) = 'YES'
             AND a.userid = p_userid;*/
      --ISSECONDARY  Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Manage Secondoary Stock  for own store',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE UPPER(issecondary) NOT IN ('NO', 'YES')
         AND   a.userid = p_userid;

      --TRPID  Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Transporter ID',
                clock_timestamp()
         FROM int$stg_umngsitimport a 
		 LEFT OUTER JOIN
		 (SELECT UPPER(SL.SLID) SLID
               FROM FINSL SL, admcls cs
               WHERE cs.clscode = SL.clscode
               AND   cs.clstype = 'T'
               AND   SL.EXT = 'N') b
			   ON (UPPER(a.trpid) = UPPER(b.slid))
WHERE a.trpid IS NOT NULL AND B.SLID IS NULL AND a.userid = p_userid;

      --EXT Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Extinct.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE UPPER(ext) NOT IN ('NO', 'YES')
         AND   a.userid = p_userid;

      --EXT Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'New Record can not be Extinct record.',
                clock_timestamp()
         FROM int$stg_UMNGSITIMPORT a
         WHERE UPPER(ext) = 'YES'
         AND   a.code IS NULL
         AND   a.userid = p_userid;

      --row level Validation
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                a.lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Combination of Pos Site, Customer Sale Type  Secondary.',
                clock_timestamp()
         FROM int$stg_umngsitimport a
		 LEFT OUTER JOIN
		 (SELECT a1.slid, a1.lineno
               FROM int$stg_UMNGSITIMPORT a1, finsl b1
               WHERE UPPER(a1.slid) = UPPER(b1.slid)
               AND   a1.slid IS NOT NULL
               AND   b1.saletype = 'O'
               AND   UPPER(a1.issecondary) = 'YES'
               AND   a1.userid = p_userid) b 
  ON (UPPER(a.slid) = UPPER(b.slid))
WHERE UPPER(a.issecondary) = 'YES' AND b.slid IS NULL AND a.slid IS NOT NULL AND a.userid = p_userid;

        -- START REV : 004
        -- GST Identification No. length validation
        insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'UMNGSITIMPORT', userid, 'Data Validation', 'GST Identification No. should have exactly 15 characters.', clock_timestamp()
        from    int$stg_umngsitimport a
        where   a.gst_identification_no is not null
        and     length(a.gst_identification_no) <> 15
        and     a.userid = p_userid;

        -- GST Identification No. masking validation
        insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'UMNGSITIMPORT', userid, 'Data Validation', 'GST Identification No. is invalid as per Government prescribed format.', clock_timestamp()
        from    int$stg_umngsitimport a
        where   a.gst_identification_no is not null
        and     db_fun_check_gstin_no(a.gst_identification_no) = 'F'
        and     a.userid = p_userid;

        -- GST Identification No. state code validation
        insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'UMNGSITIMPORT', userid, 'Data Validation', 'Unable to determine state as per inputed GST Identification No., State code is invalid.', clock_timestamp()
        FROM int$stg_umngsitimport a
LEFT OUTER JOIN admgststate gs ON ((substr(a.gst_identification_no,1,2)) = gs.code)
WHERE a.gst_identification_no is not null  and gs.code is null and a.userid = p_userid;

        -- GST Identification date validation
        insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'UMNGSITIMPORT', userid, 'Data Validation', 'GST Reg. date is not in valid format.', clock_timestamp()
        from    int$stg_umngsitimport   a
        where   a.gst_registration_date is not null
        and (
                    (to_char(a.gst_registration_date,'yyyy'))::numeric  < 4
                    or
                    (to_char(a.gst_registration_date,'yyyymmdd'))::numeric  < 8
                )
        and     a.userid = p_userid;

        -- GST Identification date validation
        insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'UMNGSITIMPORT', userid, 'Data Validation', 'GST Reg. Date cannot be provided without providing GST Identification No.', clock_timestamp()
        from    int$stg_umngsitimport   a
        where   a.gst_registration_date is not null
        and     a.gst_identification_no is null
        and     a.userid = p_userid;
        -- END REV : 004
      --row level Validation
-- START REV : 010
--******************************************************************************
--TFS ID - 40111 VALIDATION OF UNMANAGE SITE IMPORT EXCEL
--******************************************************************************
-- SHIPPING_SAME_AS_BILLING
-- CASE 1
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Only Yes and No are allowed in SHIPPING_SAME_AS_BILLING.',
                clock_timestamp()
        FROM int$stg_UMNGSITIMPORT a
        WHERE   a.userid = p_userid
        AND     a.shipping_same_as_billing IS NOT NULL
        AND     UPPER(a.shipping_same_as_billing) NOT IN ('YES','NO');

-- CASE 2
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Shipping information of the site can only be provided when SHIPPING_SAME_AS_BILLING is set to No.',
                clock_timestamp()
        FROM int$stg_UMNGSITIMPORT a
        WHERE   a.userid = p_userid
        AND     UPPER(coalesce(a.shipping_same_as_billing,'NO')) = 'YES'
        AND     a.shipping_same_as_billing IS NULL
        AND     a.shipping_company_name IS NULL
        AND     a.shipping_cinno IS NULL
        AND     a.shipping_address IS NULL
        AND     a.shipping_ctname IS NULL
        AND     a.shipping_pin IS NULL
        AND     a.shipping_oph1 IS NULL
        AND     a.shipping_oph2 IS NULL
        AND     a.shipping_oph3 IS NULL
        AND     a.shipping_rph1 IS NULL
        AND     a.shipping_mobile IS NULL
        AND     a.shipping_fax IS NULL
        AND     a.shipping_email1 IS NULL
        AND     a.shipping_email2 IS NULL
        AND     a.shipping_website IS NULL
        AND     a.shipping_contact_person IS NULL
        AND     a.shipping_gst_category IS NULL
        AND     a.shipping_gstin IS NULL
        AND     a.shipping_gstin_state_name IS NULL
        AND     a.shipping_gst_reg_date IS NULL;

-- CASE 3
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Only Yes and No are allowed in SHIPPING_SAME_AS_BILLING.',
                clock_timestamp()
        FROM int$stg_umngsitimport a
LEFT OUTER JOIN admsite b ON (UPPER(a.code) = UPPER(b.code))
WHERE UPPER(a.shipping_same_as_billing) = 'NO'  AND b.sitetype LIKE  '%OM%' AND b.code IS NULL AND a.code IS NOT NULL AND a.userid = p_userid;

-- SHIPPING_CTNAME
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Shipping City name as specified is unavailable.',
                clock_timestamp()
        FROM  int$stg_umngsitimport a
LEFT OUTER JOIN admcity b ON (UPPER(a.shipping_ctname) = UPPER(b.ctname))
WHERE UPPER(a.shipping_same_as_billing) = 'NO'  AND b.ctname IS NULL AND a.userid = p_userid;

-- SHIPPING_EMAIL1 Validation
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Email Address',
                clock_timestamp()
        FROM int$stg_UMNGSITIMPORT a
        WHERE (position('@' in shipping_email1) = 0
        OR     position('.' in shipping_email1) = 0)
        AND   a.shipping_email1 IS NOT NULL
        AND   a.userid = p_userid;

-- SHIPPING_EMAIL2 Validation
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Email Address',
                clock_timestamp()
        FROM int$stg_UMNGSITIMPORT a
        WHERE (position('@' in shipping_email2) = 0
        OR     position('.' in shipping_email2) = 0)
        AND   a.shipping_email2 IS NOT NULL
        AND   a.userid = p_userid;

-- SHIPPING_GSTIN length validation
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Shipping GST Identification No. should have exactly 15 characters.',
                clock_timestamp()
        FROM    int$stg_umngsitimport a
        WHERE   a.shipping_gstin IS NOT NULL
        AND     LENGTH(a.shipping_gstin) <> 15
        AND     a.userid = p_userid;

-- SHIPPING_GSTIN masking validation
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Shipping GST Identification No. is invalid as per Government prescribed format.',
                clock_timestamp()
        FROM    int$stg_umngsitimport a
        WHERE   a.shipping_gstin IS NOT NULL
        AND     db_fun_check_gstin_no(a.shipping_gstin) = 'F'
        AND     a.userid = p_userid;

-- SHIPPING_GSTIN state code validation
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Unable to determine state as per inputted Shipping GST Identification No., State code is invalid.',
                clock_timestamp()
        FROM int$stg_umngsitimport a
LEFT OUTER JOIN admgststate gs ON ((substr(a.shipping_gstin,1,2)) = gs.code)
WHERE a.shipping_gstin IS NOT NULL  AND gs.code is null AND a.userid = p_userid;

-- SHIPPING_GST_REG_DATE validation
-- CASE 1
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Shipping GST Reg. date is not in valid format.',
                clock_timestamp()
        FROM    int$stg_umngsitimport a
        WHERE   a.shipping_gst_reg_date iS NOT NULL
        AND (
                    (to_char(a.shipping_gst_reg_date,'yyyy'))::numeric  < 4
                    or
                    (to_char(a.shipping_gst_reg_date,'yyyymmdd'))::numeric  < 8
                )
        AND     a.userid = p_userid;

-- CASE 2
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Shipping GST Reg. Date cannot be provided without providing GST Identification No.',
                clock_timestamp()
        FROM    int$stg_umngsitimport a
        WHERE   a.shipping_gst_reg_date IS NOT NULL
        AND     a.shipping_gstin IS NOT NULL
        AND     a.userid = p_userid;

-- SHIPPING_GST_STATE_NAME validation
-- CASE 1
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Shipping GST State provided is invalid.',
                clock_timestamp()
        FROM    int$stg_umngsitimport a,
                admgststate gs
        WHERE   a.shipping_gstin_state_name IS NOT NULL
        AND     UPPER(a.shipping_gstin_state_name) = UPPER(gs.name)
        AND     a.userid = p_userid;

-- CASE 2
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Shipping GST State inputted is not at per Shipping GST Identification No.''s state.',
                clock_timestamp()
        FROM    int$stg_umngsitimport a,
                admgststate gs
        WHERE   a.shipping_gstin_state_name IS NOT NULL
        AND     a.shipping_gstin IS NOT NULL
        AND (substr(a.shipping_gstin,1,2)) = (SELECT code from admgststate where name = a.shipping_gstin_state_name)
        -- start rev : 013
        AND     a.userid = p_userid;
        -- end rev : 013
        INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
        SELECT nextval('int$error_log_code'),
                lineno,
                'UMNGSITIMPORT',
                userid,
                'Data Validation',
                'Invalid Shipping GST Category',
                clock_timestamp()
        FROM    int$stg_umngsitimport a

        WHERE (
                (a.shipping_gst_category IS  NULL and upper(a.shipping_same_as_billing) = 'NO')
                OR (
                  a.shipping_gst_category IS NOT NULL  and UPPER(a.shipping_gst_category)  not in (SELECT upper(name) from admgstcategory)
                )
              )
        -- END REV : 014
        AND     a.userid = p_userid;
        -- end rev : 013
--******************************************************************************
-- END REV : 010
      -- Check whether records are valid or not
      BEGIN
         SELECT 'S'
         INTO STRICT v_status
         
         WHERE EXISTS (SELECT 'S'
                   FROM int$error_log
                   WHERE userid = p_userid);

         RETURN('0');
      EXCEPTION
         WHEN no_data_found
         THEN
            RETURN('1');
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
         VALUES (nextval('int$error_log_code'),
                 0,
                 'UMNGSITIMPORT',
                 p_userid,
                 errcode,
                 errmsg,
                 clock_timestamp());

      -- START REV : 012
      -- udfstring01 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin01 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring01)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring01) >
                                                    1) x)) alias7;

      -- udfstring02 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin02 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring02)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring02) >
                                                    1) x)) alias7;

      -- udfstring03 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin03 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring03)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring03) >
                                                    1) x)) alias7;

      -- udfstring04 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin04 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring04)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring04) >
                                                    1) x)) alias7;

      -- udfstring05 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin05 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring05)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring05) >
                                                    1) x)) alias7;

      -- udfstring06 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF strin06 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring06)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring06) >
                                                    1) x)) alias7;

      -- udfstring07 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string07 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring07)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring07) >
                                                    1) x)) alias7;

      -- udfstring08 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string08 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring08)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring08) >
                                                    1) x)) alias7;

      -- udfstring09 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string09 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring09)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring09) >
                                                    1) x)) alias7;

      -- udfstring10 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string10 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring10)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring10) >
                                                    1) x)) alias7;

      -- udfstring11 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string11 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring11)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring11) >
                                                    1) x)) alias7;

      -- udfstring12 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string12 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring12)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring12) >
                                                    1) x)) alias7;

      -- udfstring13 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string13 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring13)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring13) >
                                                    1) x)) alias7;

      -- udfstring14 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string14 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring14)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring14) >
                                                    1) x)) alias7;

      -- udfstring15 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                           'UDF string15 should be same for same ADMSITE - '
                        || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfstring15)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(
                                                    DISTINCT m.udfstring15) >
                                                    1) x)) alias7;

      -- udfnum01 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num01 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfnum01)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfnum01) >
                                                    1) x)) alias7;

      -- udfnum02 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num02 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfnum02)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfnum02) >
                                                    1) x)) alias7;

      -- udfnum03 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num03 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfnum03)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfnum03) >
                                                    1) x)) alias7;

      -- udfnum04 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num04 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfnum04)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfnum04) >
                                                    1) x)) alias7;

      -- udfnum05 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF num05 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfnum05)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfnum05) >
                                                    1) x)) alias7;

      -- udfdate01 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date01 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfdate01)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfdate01) >
                                                    1) x)) alias7;
      -- udfdate02 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date02 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfdate02)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfdate02) >
                                                    1) x)) alias7;

      -- udfdate03 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date03 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfdate03)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfdate03) >
                                                    1) x)) alias7;

      -- udfdate04 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date04 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfdate04)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfdate04) >
                                                    1) x)) alias7;

      -- udfdate05 checking
      INSERT INTO int$error_log(code,
                                 lineno,
                                 classname,
                                 userid,
                                 errortype,
                                 errordesc,
                                 createdon)
         SELECT nextval('int$error_log_code'),
                0,
                'UMNGSITIMPORT',
                p_userid,
                'Data Validation',
                dup_fld,
                clock_timestamp()
           FROM (SELECT DISTINCT
                        'UDF date05 should be same for same ADMSITE - ' || a.code
                           dup_fld
                   FROM int$stg_UMNGSITIMPORT a
                  WHERE     a.userid = p_userid
                        AND a.code IN (SELECT x.code
                                  FROM (  SELECT m.code,
                                                 COUNT(DISTINCT m.udfdate05)
                                            FROM int$stg_UMNGSITIMPORT m
                                           WHERE m.userid = p_userid
                                        GROUP BY m.code
                                          HAVING COUNT(DISTINCT m.udfdate05) >
                                                    1) x)) alias7;

        -- END REV : 012
         --COMMIT;
         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

function "main"."int$pkg_umngsitimport_int$pkg_umngsitimport_validate(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

 
DECLARE
    -- Change this to reflect the dblink connection string
    --v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
    v_srvname       name;
    v_connname      text;
    v_connstr       text;
    v_conn_result   text;
    v_query         text;

    v_ret    text;
BEGIN
    v_srvname := 'foreign_pgbase';
    v_connname := replace(uuid_generate_v4()::text,'-','');
    v_connstr  := v_srvname;
    
    --Open the connection  
    SELECT dblink_connect(v_connname,v_connstr) 
    INTO v_conn_result;
	
	v_query := 'SELECT * FROM int$pkg_umngsitimport_int$pkg_umngsitimport_validate_atx ( ' || quote_nullable(p_userid::text) || '::bigint,' || quote_nullable(p_connect_site::text) || '::bigint,' || quote_nullable(p_logging_date::text) || '::timestamp without time zone,' || quote_nullable(p_connect_ou::text) || '::bigint )';
	SELECT * INTO v_ret FROM dblink(v_connname, v_query) AS p (ret text);

	
	SELECT dblink_disconnect(v_connname) 
    INTO v_conn_result;
	
	RETURN v_ret;
EXCEPTION 
   WHEN OTHERS THEN
        SELECT dblink_disconnect(v_connname) 
        INTO v_conn_result;

END;
"""
  returnType = text
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

