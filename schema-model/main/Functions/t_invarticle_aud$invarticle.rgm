function "main"."t_invarticle_aud$invarticle()" {
  text = """

DECLARE
    V_RECORD_OLD AUD_INVARTICLE%ROWTYPE;
	V_RECORD_NEW AUD_INVARTICLE%ROWTYPE;
    V_SID DOUBLE PRECISION;
    V_TRNID CHARACTER VARYING(50);
    V_ACTION CHARACTER VARYING(10);
    I RECORD;    
	V_AUDIT_USER CHARACTER VARYING (100);
	V_LOGINUSER  CHARACTER VARYING (100);
	V_PROGRAM    CHARACTER VARYING (100);
	V_REC_COUNT  BIGINT; 
   
BEGIN
       SELECT current_setting('audit.AUDIT_USER', true) INTO V_AUDIT_USER;
	   IF NULLIF(V_AUDIT_USER,'') IS NOT NULL THEN  
		   BEGIN
				SELECT FULLNAME
				INTO   STRICT V_LOGINUSER
				FROM   APPUSER
				WHERE  ID =  substring (V_AUDIT_USER,8,position(';' in V_AUDIT_USER)-8)::NUMERIC; 
		   EXCEPTION
				WHEN no_data_found
				THEN
					V_LOGINUSER := 'System';
			END;			
		ELSE
			V_LOGINUSER := 'SYSTEM';
		END IF;
	   
	   select application_name
	   INTO   V_PROGRAM
	   from pg_stat_activity where pid = pg_backend_pid();

       V_ACTION:=TG_OP;
	   
       SELECT TXID_CURRENT() INTO V_TRNID;
       
        IF TG_OP = 'INSERT' OR  TG_OP = 'UPDATE' THEN 
	   
           V_RECORD_NEW.ACTION := V_ACTION;
           V_RECORD_NEW.ACTION_SUBTYPE := 'NEW';
           V_RECORD_NEW.TRANSACTION_ID := V_TRNID::TEXT;		   
		   V_RECORD_NEW.code := NEW.code;
            V_RECORD_NEW.name := NEW.name;
            V_RECORD_NEW.invattr1_code := NEW.invattr1_code;
            V_RECORD_NEW.invattr1_name := NEW.invattr1_name;
            V_RECORD_NEW.invattr2_code := NEW.invattr2_code;
            V_RECORD_NEW.invattr2_name := NEW.invattr2_name;
            V_RECORD_NEW.invattr3_code := NEW.invattr3_code;
            V_RECORD_NEW.invattr3_name := NEW.invattr3_name;
            V_RECORD_NEW.invattr4_code := NEW.invattr4_code;
            V_RECORD_NEW.invattr4_name := NEW.invattr4_name;
            V_RECORD_NEW.invattr5_code := NEW.invattr5_code;
            V_RECORD_NEW.invattr5_name := NEW.invattr5_name;
            V_RECORD_NEW.invattr6_code := NEW.invattr6_code;
            V_RECORD_NEW.invattr6_name := NEW.invattr6_name;
            V_RECORD_NEW.grpcode := NEW.grpcode;
            V_RECORD_NEW.mrp := NEW.mrp;
            V_RECORD_NEW.mrprangefrom := NEW.mrprangefrom;
            V_RECORD_NEW.mrprangeto := NEW.mrprangeto;
            V_RECORD_NEW.rate := NEW.rate;
            V_RECORD_NEW.wsp := NEW.wsp;
            V_RECORD_NEW.vendorcode := NEW.vendorcode;
            V_RECORD_NEW.vendorname := NEW.vendorname;
            V_RECORD_NEW.uom := NEW.uom;
            V_RECORD_NEW.ext := NEW.ext;
            V_RECORD_NEW.cat1prompt := NEW.cat1prompt;
            V_RECORD_NEW.cat2prompt := NEW.cat2prompt;
            V_RECORD_NEW.cat3prompt := NEW.cat3prompt;
            V_RECORD_NEW.cat4prompt := NEW.cat4prompt;
            V_RECORD_NEW.cat5prompt := NEW.cat5prompt;
            V_RECORD_NEW.cat6prompt := NEW.cat6prompt;
            V_RECORD_NEW.variant_cat1 := NEW.variant_cat1;
            V_RECORD_NEW.variant_cat2 := NEW.variant_cat2;
            V_RECORD_NEW.variant_cat3 := NEW.variant_cat3;
            V_RECORD_NEW.variant_cat4 := NEW.variant_cat4;
            V_RECORD_NEW.variant_cat5 := NEW.variant_cat5;
            V_RECORD_NEW.variant_cat6 := NEW.variant_cat6;
            V_RECORD_NEW.doc := NEW.doc;
            V_RECORD_NEW.dom := NEW.dom;
            V_RECORD_NEW.invmmrule_code := NEW.invmmrule_code;
            V_RECORD_NEW.taxcode := NEW.taxcode;
            V_RECORD_NEW.alternate_mrp_applicable := NEW.alternate_mrp_applicable;
            V_RECORD_NEW.item_management_mode := NEW.item_management_mode;
            V_RECORD_NEW.price_management := NEW.price_management;
            V_RECORD_NEW.manage_expiry := NEW.manage_expiry;
            V_RECORD_NEW.validity_mode := NEW.validity_mode;
            V_RECORD_NEW.validity_period := NEW.validity_period;
          END IF;  
            
         IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN 
	   
            V_RECORD_OLD.ACTION := V_ACTION;
            V_RECORD_OLD.ACTION_SUBTYPE := 'OLD';
            V_RECORD_OLD.TRANSACTION_ID := V_TRNID::TEXT;			
			V_RECORD_OLD.code := OLD.code;
            V_RECORD_OLD.name := OLD.name;
            V_RECORD_OLD.invattr1_code := OLD.invattr1_code;
            V_RECORD_OLD.invattr1_name := OLD.invattr1_name;
            V_RECORD_OLD.invattr2_code := OLD.invattr2_code;
            V_RECORD_OLD.invattr2_name := OLD.invattr2_name;
            V_RECORD_OLD.invattr3_code := OLD.invattr3_code;
            V_RECORD_OLD.invattr3_name := OLD.invattr3_name;
            V_RECORD_OLD.invattr4_code := OLD.invattr4_code;
            V_RECORD_OLD.invattr4_name := OLD.invattr4_name;
            V_RECORD_OLD.invattr5_code := OLD.invattr5_code;
            V_RECORD_OLD.invattr5_name := OLD.invattr5_name;
            V_RECORD_OLD.invattr6_code := OLD.invattr6_code;
            V_RECORD_OLD.invattr6_name := OLD.invattr6_name;
            V_RECORD_OLD.grpcode := OLD.grpcode;
            V_RECORD_OLD.mrp := OLD.mrp;
            V_RECORD_OLD.mrprangefrom := OLD.mrprangefrom;
            V_RECORD_OLD.mrprangeto := OLD.mrprangeto;
            V_RECORD_OLD.rate := OLD.rate;
            V_RECORD_OLD.wsp := OLD.wsp;
            V_RECORD_OLD.vendorcode := OLD.vendorcode;
            V_RECORD_OLD.vendorname := OLD.vendorname;
            V_RECORD_OLD.uom := OLD.uom;
            V_RECORD_OLD.ext := OLD.ext;
            V_RECORD_OLD.cat1prompt := OLD.cat1prompt;
            V_RECORD_OLD.cat2prompt := OLD.cat2prompt;
            V_RECORD_OLD.cat3prompt := OLD.cat3prompt;
            V_RECORD_OLD.cat4prompt := OLD.cat4prompt;
            V_RECORD_OLD.cat5prompt := OLD.cat5prompt;
            V_RECORD_OLD.cat6prompt := OLD.cat6prompt;
            V_RECORD_OLD.variant_cat1 := OLD.variant_cat1;
            V_RECORD_OLD.variant_cat2 := OLD.variant_cat2;
            V_RECORD_OLD.variant_cat3 := OLD.variant_cat3;
            V_RECORD_OLD.variant_cat4 := OLD.variant_cat4;
            V_RECORD_OLD.variant_cat5 := OLD.variant_cat5;
            V_RECORD_OLD.variant_cat6 := OLD.variant_cat6;
            V_RECORD_OLD.doc := OLD.doc;
            V_RECORD_OLD.dom := OLD.dom;
            V_RECORD_OLD.invmmrule_code := OLD.invmmrule_code;
            V_RECORD_OLD.taxcode := OLD.taxcode;
            V_RECORD_OLD.alternate_mrp_applicable := OLD.alternate_mrp_applicable;
            V_RECORD_OLD.item_management_mode := OLD.item_management_mode;
            V_RECORD_OLD.price_management := OLD.price_management;
            V_RECORD_OLD.manage_expiry := OLD.manage_expiry;
            V_RECORD_OLD.validity_mode := OLD.validity_mode;
            V_RECORD_OLD.validity_period := OLD.validity_period;
          END IF;  

    IF TG_OP = 'INSERT' THEN
	    V_REC_COUNT := 1;
        INSERT INTO AUD_INVARTICLE SELECT V_RECORD_NEW.*;
    END IF;

    IF TG_OP = 'UPDATE' THEN
	FOR I IN (
		SELECT 
		V_RECORD_OLD.code,
                  V_RECORD_OLD.name,
                  V_RECORD_OLD.invattr1_code,
                  V_RECORD_OLD.invattr1_name,
                  V_RECORD_OLD.invattr2_code,
                  V_RECORD_OLD.invattr2_name,
                  V_RECORD_OLD.invattr3_code,
                  V_RECORD_OLD.invattr3_name,
                  V_RECORD_OLD.invattr4_code,
                  V_RECORD_OLD.invattr4_name,
                  V_RECORD_OLD.invattr5_code,
                  V_RECORD_OLD.invattr5_name,
                  V_RECORD_OLD.invattr6_code,
                  V_RECORD_OLD.invattr6_name,
                  V_RECORD_OLD.grpcode,
                  V_RECORD_OLD.mrp,
                  V_RECORD_OLD.mrprangefrom,
                  V_RECORD_OLD.mrprangeto,
                  V_RECORD_OLD.rate,
                  V_RECORD_OLD.wsp,
                  V_RECORD_OLD.vendorcode,
                  V_RECORD_OLD.vendorname,
                  V_RECORD_OLD.uom,
                  V_RECORD_OLD.ext,
                  V_RECORD_OLD.cat1prompt,
                  V_RECORD_OLD.cat2prompt,
                  V_RECORD_OLD.cat3prompt,
                  V_RECORD_OLD.cat4prompt,
                  V_RECORD_OLD.cat5prompt,
                  V_RECORD_OLD.cat6prompt,
                  V_RECORD_OLD.variant_cat1,
                  V_RECORD_OLD.variant_cat2,
                  V_RECORD_OLD.variant_cat3,
                  V_RECORD_OLD.variant_cat4,
                  V_RECORD_OLD.variant_cat5,
                  V_RECORD_OLD.variant_cat6,
                  V_RECORD_OLD.doc,
                  V_RECORD_OLD.dom,
                  V_RECORD_OLD.invmmrule_code,
                  V_RECORD_OLD.taxcode,
                  V_RECORD_OLD.alternate_mrp_applicable,
                  V_RECORD_OLD.item_management_mode,
                  V_RECORD_OLD.price_management,
                  V_RECORD_OLD.manage_expiry,
                  V_RECORD_OLD.validity_mode,
                  V_RECORD_OLD.validity_period
		EXCEPT
		SELECT 
		V_RECORD_NEW.code,
                  V_RECORD_NEW.name,
                  V_RECORD_NEW.invattr1_code,
                  V_RECORD_NEW.invattr1_name,
                  V_RECORD_NEW.invattr2_code,
                  V_RECORD_NEW.invattr2_name,
                  V_RECORD_NEW.invattr3_code,
                  V_RECORD_NEW.invattr3_name,
                  V_RECORD_NEW.invattr4_code,
                  V_RECORD_NEW.invattr4_name,
                  V_RECORD_NEW.invattr5_code,
                  V_RECORD_NEW.invattr5_name,
                  V_RECORD_NEW.invattr6_code,
                  V_RECORD_NEW.invattr6_name,
                  V_RECORD_NEW.grpcode,
                  V_RECORD_NEW.mrp,
                  V_RECORD_NEW.mrprangefrom,
                  V_RECORD_NEW.mrprangeto,
                  V_RECORD_NEW.rate,
                  V_RECORD_NEW.wsp,
                  V_RECORD_NEW.vendorcode,
                  V_RECORD_NEW.vendorname,
                  V_RECORD_NEW.uom,
                  V_RECORD_NEW.ext,
                  V_RECORD_NEW.cat1prompt,
                  V_RECORD_NEW.cat2prompt,
                  V_RECORD_NEW.cat3prompt,
                  V_RECORD_NEW.cat4prompt,
                  V_RECORD_NEW.cat5prompt,
                  V_RECORD_NEW.cat6prompt,
                  V_RECORD_NEW.variant_cat1,
                  V_RECORD_NEW.variant_cat2,
                  V_RECORD_NEW.variant_cat3,
                  V_RECORD_NEW.variant_cat4,
                  V_RECORD_NEW.variant_cat5,
                  V_RECORD_NEW.variant_cat6,
                  V_RECORD_NEW.doc,
                  V_RECORD_NEW.dom,
                  V_RECORD_NEW.invmmrule_code,
                  V_RECORD_NEW.taxcode,
                  V_RECORD_NEW.alternate_mrp_applicable,
                  V_RECORD_NEW.item_management_mode,
                  V_RECORD_NEW.price_management,
                  V_RECORD_NEW.manage_expiry,
                  V_RECORD_NEW.validity_mode,
                  V_RECORD_NEW.validity_period
			 )
	LOOP
	  V_REC_COUNT := 1; 
		INSERT INTO AUD_INVARTICLE SELECT V_RECORD_OLD.*;
       INSERT INTO AUD_INVARTICLE SELECT V_RECORD_NEW.*;    
	END LOOP;   
    END IF;

    IF TG_OP = 'DELETE' THEN
		V_REC_COUNT := 1;
		INSERT INTO AUD_INVARTICLE SELECT V_RECORD_OLD.*;
    END IF;
	
	IF V_REC_COUNT >  0
	THEN
	   BEGIN
            INSERT INTO AUD_TRANSACTION (TRANSACTION_ID, TRANSACTION_DATE, LOGIN_USER, PROGRAM, MODULE_SHORTCODE, MODULE_TYPE)
            VALUES (V_TRNID,   current_date,V_LOGINUSER, V_PROGRAM, 'Article', 'Article');
       EXCEPTION WHEN unique_violation THEN
            NULL;
       END;  

       BEGIN  
             INSERT INTO AUD_TRANSACTION_TABLE (TRANSACTION_ID, TABLE_NAME)
             VALUES (V_TRNID,  'INVARTICLE');
       EXCEPTION WHEN unique_violation THEN
             NULL;
       END; 
	END IF;   
    

    IF TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    EXCEPTION
        WHEN others THEN
            CALL main.erraudit(SESSION_USER::text, 'T_INVARTICLE_AUD'::CHARACTER, SQLSTATE::text, SQLERRM);
			RAISE;
			RETURN NULL;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

