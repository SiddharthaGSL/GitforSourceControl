function "main"."int$pkg_createitem_int$pkg_item_serial_process_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      errmsg             varchar(500);
      vsession           varchar(100);
      vdetailtbl         varchar(4000);
      vdetailrec         varchar(500);
      errcode            text;
      vmaxno             bigint;
      vcount             bigint;

      v_username         admcmp.cmpinit%TYPE;
      v_cmpcode          bigint;
      v_itemprefix       admcmp.itemprefix%TYPE;
      v_pcode            bigint;
      v_grpcode          bigint;
      v_ageing_appl      char(1);
      v_costing_method   char(1);

      return_string      char(1000);

      v_err              varchar(1000);

      g_mark             varchar(100);

      v_grp_row          invgrp%rowtype;
      v_icode            varchar(9);
      V_SEQ              bigint;

      v_partyalias       varchar(25);
      v_loop_cnt         bigint;i RECORD;
BEGIN
      -- Put this code in one time execution only
         SELECT cmpcode, itemprefix
           INTO STRICT v_cmpcode, v_itemprefix
           FROM admcmp;

      FOR i IN (SELECT *
                  FROM int$stg_createitem_all_fld WHERE userid = p_userid order by lineno)
      LOOP
         return_string :=
            erpcheckcategory(i.cname1,
                              i.cname2,
                              i.cname3,
                              i.cname4,
                              i.cname5,
                              i.cname6);

         UPDATE int$stg_createitem_all_fld
            SET ccode1 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 1, 12))),'')::bigint,
                ccode2 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 13, 12))),'')::bigint,
                ccode3 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 25, 12))),'')::bigint,
                ccode4 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 37, 12))),'')::bigint,
                ccode5 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 49, 12))),'')::bigint,
                ccode6 = NULLIF(LTRIM(RTRIM(SUBSTR(LPAD(return_string, 72), 61, 12))),'')::bigint
                ,cname1 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 73, 100))),'')
                ,cname2 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 173, 100))),'')
                ,cname3 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 273, 100))),'')
                ,cname4 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 373, 100))),'')
                ,cname5 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 473, 100))),'')
                ,cname6 = NULLIF(LTRIM(RTRIM(SUBSTR(RPAD(return_string, 600), 573, 100))),'')
          WHERE lineno = i.lineno
          AND   USERID = P_USERID;

      END LOOP;

      declare
            v_cname         invcat1.cname%type;
      begin
            FOR i IN (SELECT distinct ccode1
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat1 
                    where  ccode = i.ccode1;

                    update int$stg_createitem_all_fld a
                    set    cname1 = v_cname
                    where  ccode1 = i.ccode1;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode2
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat2 
                    where  ccode = i.ccode2;

                    update int$stg_createitem_all_fld a
                    set    cname2 = v_cname
                    where  ccode2 = i.ccode2;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode3
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat3 
                    where  ccode = i.ccode3;

                    update int$stg_createitem_all_fld a
                    set    cname3 = v_cname
                    where  ccode3 = i.ccode3;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode4
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat4 
                    where  ccode = i.ccode4;

                    update int$stg_createitem_all_fld a
                    set    cname4 = v_cname
                    where  ccode4 = i.ccode4;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode5
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat5 
                    where  ccode = i.ccode5;

                    update int$stg_createitem_all_fld a
                    set    cname5 = v_cname
                    where  ccode5 = i.ccode5;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;

            FOR i IN (SELECT distinct ccode6
                      FROM   int$stg_createitem_all_fld
                      WHERE userid = p_userid)
            LOOP
                begin
                    v_cname := null;

                    select cname into STRICT v_cname 
                    from   invcat6 
                    where  ccode = i.ccode6;

                    update int$stg_createitem_all_fld a
                    set    cname6 = v_cname
                    where  ccode6 = i.ccode6;

                    --COMMIT;
                exception
                    when no_data_found then null;
                end;
            END LOOP;
      end;

      SELECT itemprefix, cmpcode
        INTO STRICT v_itemprefix, v_cmpcode
        FROM admcmp;

      DELETE FROM INT$STG_CREATEITEM_SERIAL WHERE USERID = p_userid;

      FOR i IN (SELECT *
                  FROM int$stg_createitem_all_fld WHERE userid = p_userid order by lineno)
            LOOP
               begin
                  select *
                  into STRICT   v_grp_row
                  from   invgrp
                  where  grpcode = i.grpcode;
                exception
                    when no_data_found then null;
                end;

                IF i.partycode is not null then
                   select abbre into STRICT v_partyalias from finsl where slcode = i.partycode;
                END IF;

               v_loop_cnt  := coalesce(i.TRANSACTION_QUANTITY,0)/coalesce(i.BARUNIT,1);

               FOR c1 IN 1..v_loop_cnt LOOP
                   SELECT v_itemprefix || nextval('erpitem')::varchar
                   INTO STRICT   v_icode
;

                   SELECT nextval('INT$item_shrtname_code') INTO STRICT V_SEQ;

                   INSERT INTO INVITEM(icode, noninventory,
                            invarticle_code,
                            grpcode, barcode,
                            cname1, ccode1,
                            cname2, ccode2,
                            cname3, ccode3,
                            cname4, ccode4,
                            cname5, ccode5,
                            cname6, ccode6,
                            desc1, desc2, desc3,
                            desc4, desc5, desc6,
                            num1, num2, num3,
                            partyname, costrate,
                            mrp, listed_mrp,
                            shrtname, wsp,
                            unitname, barunit,
                            expiry_date, taxcode,
                            partycode,
                            cmpcode, barrq,autoqtypopup, ext, GENERATED, considerasfree
                            ,partyalias
                            ,rem
                            ,item_name
                            ,material_type
                            ,negative_stock_alert
                            ,pos_multiprice_action
                            ,allow_price_modification
                            ,price_change_limit
                            ,invhsnsacmain_code
                            ,isprice_excludes_tax
                            ,GST_ITC_APPL
                            ,SLCODE
                            ,GLCODE
                            ,udfstring01
                            ,udfstring02
                            ,udfstring03
                            ,udfstring04
                            ,udfstring05
                            ,udfstring06
                            ,udfstring07
                            ,udfstring08
                            ,udfstring09
                            ,udfstring10
                            ,udfnum01
                            ,udfnum02
                            ,udfnum03
                            ,udfnum04
                            ,udfnum05
                            ,udfdate01
                            ,udfdate02
                            ,udfdate03
                            ,udfdate04
                            ,udfdate05
                            ,item_management_mode
                            ,price_management
                            ,manage_expiry      
                            ,validity_mode      
                            ,validity_period    
                            ,pos_batch_selection_mode
                           )
                    VALUES (v_icode,
                            'N',
                            i.article_code,
                            i.grpcode, NULL,
                            i.cname1, i.ccode1,
                            i.cname2, i.ccode2,
                            i.cname3, i.ccode3,
                            i.cname4, i.ccode4,
                            i.cname5, i.ccode5,
                            i.cname6, i.ccode6,
                            i.desc1, i.desc2, i.desc3,
                            i.desc4, i.desc5, i.desc6,
                            i.num1, i.num2, i.num3,
                            i.partyname,
                            i.standard_rate,
                            i.rsp, i.listed_mrp,
                            v_seq, i.wsp,
                            coalesce(i.uom,v_grp_row.grp_unitname),
                            coalesce(i.barunit,coalesce(v_grp_row.grp_barunit,1)),
                            i.expiry_date, i.taxcode,
                            i.partycode,
                            v_cmpcode, 'N',
                            'N',
                            'N', clock_timestamp(), 'N'
                            ,v_partyalias
                           ,i.item_rem
                           ,i.item_name
                            ,coalesce(UPPER(SUBSTR(trim(both i.material_type),1,1)),coalesce(v_grp_row.material_type,'F'))
                            ,coalesce(SUBSTR(i.negative_stk_alert,1,1), coalesce(v_grp_row.grp_negative_stock_alert,'N'))
                            ,coalesce(v_grp_row.grp_pos_multiprice_action,'N')
                            ,coalesce(v_grp_row.grp_allow_price_modification,'N')
                            ,NULL
                           ,i.invhsnsacmain_code
                           ,CASE WHEN UPPER(i.Extra_Tax) = 'YES' THEN 1 ELSE 0 END
                           ,coalesce(i.GST_ITC_APPL,'IP')
                           ,i.SLCODE
                           ,i.GLCODE
                           ,i.udfstring01
                           ,i.udfstring02
                           ,i.udfstring03
                           ,i.udfstring04
                           ,i.udfstring05
                           ,i.udfstring06
                           ,i.udfstring07
                           ,i.udfstring08
                           ,i.udfstring09
                           ,i.udfstring10
                           ,i.udfnum01
                           ,i.udfnum02
                           ,i.udfnum03
                           ,i.udfnum04
                           ,i.udfnum05
                           ,i.udfdate01
                           ,i.udfdate02
                           ,i.udfdate03
                           ,i.udfdate04
                           ,i.udfdate05
                           ,i.item_management_mode
                           ,i.price_management
                           ,i.manage_expiry      
                           ,i.validity_mode      
                           ,i.validity_period    
                           ,i.pos_batch_selection_mode
                                );

                        insert into INT$STG_CREATEITEM_SERIAL(lineno, icode, userid)
                        values (i.lineno, v_icode, i.userid);

               END LOOP;
        END LOOP;

       -- log to be added in history table
      SELECT nextval('int$error_log_code') INTO STRICT vsession;

      vdetailtbl :=
            'create table ginarchive.createitem_serial_'
         -- END REV : 003
         || vsession
         || ' as select distinct icode_barcode, b.icode, oem_barcode, article_name, article_code,
                                           item_name, item_rem, cname1, ccode1, cname2, ccode2, cname3, ccode3,
                                           cname4, ccode4, cname5, ccode5, cname6, ccode6, desc1, desc2, desc3,
                                           desc4, desc5, desc6, num1, num2, num3, item_shrtname, taxname, taxcode,
                                           negative_stk_alert, barunit, standard_rate, rsp, listed_mrp, wsp, uom,
                                           material_type, item_vendor_id, partycode, partyname, partyalias,
                                           udfstring01, udfstring02, udfstring03, udfstring04, udfstring05,
                                           udfstring06, udfstring07, udfstring08, udfstring09, udfstring10,
                                           udfnum01, udfnum02, udfnum03, udfnum04, udfnum05,
                                           udfdate01, udfdate02, udfdate03, udfdate04, udfdate05,
                                           Extra_Tax, expiry_date, invhsnsacmain_code, hsn_sac_code, a.lineno, a.userid ,Quantity,Rate, glcode, slid,
                                           gst_itc_appl, item_management_mode, price_management, manage_expiry, validity_mode, validity_period, 
										   pos_batch_selection_mode, batch_serial_no,
                                           batch_standard_rate, batch_wsp, batch_rsp, batch_mrp, batch_mfg_date, batch_valid_upto
                           from  int$stg_createitem_all_fld a, INT$STG_CREATEITEM_SERIAL b
                           where  a.userid = b.userid
                           and    a.lineno = b.lineno
                           and    a.userid = '
         || p_userid::text;

      EXECUTE vdetailtbl;

      vdetailrec :=
         'select count(1) from ginarchive.createitem_serial_' || vsession::text;

      EXECUTE vdetailrec INTO STRICT vcount;

      --COMMIT;

      RETURN('ginarchive.createitem_serial_' || vsession::text);

    EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         INSERT INTO int$error_log(code,
                                    lineno,
                                    classname,
                                    userid,
                                    errortype,
                                    errordesc,
                                    createdon)
              VALUES (nextval('int$error_log_code'),
                      0,
                      'CREATEITEM_SERIAL',
                      p_userid,
                      errcode,
                      errmsg,
                      clock_timestamp());

         --COMMIT;

         RETURN('0');
    END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

