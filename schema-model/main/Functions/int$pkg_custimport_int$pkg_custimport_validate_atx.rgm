function "main"."int$pkg_custimport_int$pkg_custimport_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

 /*******************************************************************************
REV : 001    05-SEP-2016   MOUSUMI  (TFS ID : 20231)    [Credit Verification] Rule Definition required in Customer Import Excel]
REV : 002    19-DEC-2016   MANASH   (TFS ID : 20353)    Customer Master is not updating from Web Import Excel.
REV : 003    22-DEC-2016   MOUSUMI  (TFS ID : 23197)    Problem in updation.
REV : 004    11-APR-2017   MOUSUMI  (TFS ID : 21200)    Multi OU.
REV : 005    18-APR-2017   MANASH   (TFS ID : 27771)    All logged table moved to GINARCHIVE for Import Excel.
REV : 006    24-MAY-2017   MANASH   (TFS ID : 27771)    GST related.
REV : 007    31-JAN-2018   MOUSUMI  (TFS ID : 37548)    Vendor and Jobber Capacity Planning.
REV : 008    27-MAY-2020   ANINDYA  (TFS ID : AUDIT TRAIL)    Merge statement  replace with loop update/insert
                                                              because composite trigger does not work properly with MERGE.
REV : 009    14-JUL-2020   DIPTIMAN (TFS ID : 75948) CST no and LST no is not mandatory.
REV : 010    07-apr-2021   MANASH   (TFS ID : 0000732) City is not updated through customer master excel import.
********************************************************************************/
DECLARE
      v_status   char(1);
      errmsg     varchar(200);
      errcode    TEXT;
BEGIN
      --SALETYPE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Mode of Operation, Saletype should be null for updation.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE  UPPER(a.saletype) is NOT null
          AND   a.slcode IS not NULL
          AND a.userid = p_userid;
		  
		  
--BULK COLLECT 1============================================================================================================================

    DECLARE 
	
	V_COUNT BIGINT;
	V_SALETYPE_CTID TYPE_V_CTID_SALETYPE[];
	
    BEGIN
        --OPEN C1;
		V_COUNT := 0;
		
        LOOP
			V_SALETYPE_CTID := '{}';
			
			SELECT ARRAY_AGG(t)
			STRICT INTO V_SALETYPE_CTID
			FROM (
				SELECT CTID, SALETYPE
				FROM 
					(SELECT I.ctid CTID, 
						Q.SALETYPE,
						ROW_NUMBER() OVER() RN
					FROM (
							SELECT 
								I.SLCODE,
								CASE WHEN I.SALETYPE='O' THEN 'OUTRIGHT' WHEN I.SALETYPE='C' THEN 'CONSIGNMENT' END  SALETYPE
							FROM   FINSL I,int$stg_custimport M
							WHERE  I.SLCODE = M.SLCODE
							AND    M.SALETYPE IS NULL
							AND   M.SLCODE IS NOT NULL
							) Q ,int$stg_custimport I
					WHERE I.SLCODE = Q.SLCODE
					AND   I.SALETYPE IS NULL
					AND   I.SLCODE IS NOT NULL) Q1
					where Q1.RN > V_COUNT 
					LIMIT 100)T;
					
			IF ARRAY_LENGTH(V_SALETYPE_CTID,1) IS NULL THEN
			EXIT;
						
			END IF;
			
			FOR I IN ARRAY_LOWER(V_SALETYPE_CTID, 1)..ARRAY_UPPER(V_SALETYPE_CTID, 1)
			LOOP
				UPDATE int$stg_custimport I
                SET    SALETYPE = V_SALETYPE_CTID[I].SALETYPE
                WHERE    CTID      = V_SALETYPE_CTID[I].CTID;			
				
				V_COUNT := V_COUNT + 1;
			END LOOP;
        END LOOP;
    END;
--BULK COLLECT 2============================================================================================================================

  -- START REV : 003
               
			/*DECLARE 
			
			
				C1 CURSOR  FOR
                SELECT M.ROWID RID,CASE WHEN I.LGT_APPL='Y' THEN 'YES' WHEN I.LGT_APPL='N' THEN 'NO' END  LGT_APPL
                FROM   FINSL I,int$stg_custimport M
                WHERE  I.SLCODE = M.SLCODE
                AND    M.LGT_APPL IS NULL
                AND   M.SLCODE IS NOT NULL;

            --V_ICODE DBMS_SQL.VARCHAR2_Table;
            V_LGT_APPL      DBMS_SQL.VARCHAR2_Table;
            V_ROWID DBMS_SQL.Urowid_Table;
            BEGIN
                OPEN C1;
                LOOP
                    FETCH C1 BULK COLLECT INTO V_ROWID,V_LGT_APPL LIMIT 100;
                    EXIT WHEN V_ROWID.COUNT = 0;
                    FORALL I IN V_ROWID.FIRST..V_ROWID.LAST

                        UPDATE int$stg_custimport I
                        SET      LGT_APPL      = V_LGT_APPL(I)
                        WHERE    ROWID         = V_ROWID(I);
                END LOOP;

            END;
			
			*/
			
	DECLARE
		V_COUNT BIGINT;
		V_CTID_LGT_APPL TYPE_V_CTID_LGT_APPL[];

	BEGIN
		--OPEN C1;
		V_COUNT := 0;
		
        LOOP
			V_CTID_LGT_APPL := '{}';
			
			SELECT ARRAY_AGG(t)
			STRICT INTO V_CTID_LGT_APPL
			FROM (
				SELECT CTID, LGT_APPL 
				FROM 
					(SELECT M.CTID CTID,
							CASE WHEN I.LGT_APPL='Y' THEN 'YES' WHEN I.LGT_APPL='N' THEN 'NO' END  LGT_APPL,
							ROW_NUMBER() OVER() RN
					FROM   FINSL I,int$stg_custimport M
					WHERE  I.SLCODE = M.SLCODE
					AND    M.LGT_APPL IS NULL
					AND   M.SLCODE IS NOT NULL) Q2
				WHERE Q2.RN > V_COUNT
				LIMIT 100)T;
				
			IF ARRAY_LENGTH(V_CTID_LGT_APPL,1) IS NULL THEN
			EXIT;
			END IF; 
			
			FOR I IN ARRAY_LOWER(V_CTID_LGT_APPL, 1)..ARRAY_UPPER(V_CTID_LGT_APPL, 1)
			LOOP
				UPDATE int$stg_custimport I
                SET      LGT_APPL      = V_CTID_LGT_APPL[I].LGT_APPL
                WHERE    CTID         = V_CTID_LGT_APPL[I].CTID;
				
				V_COUNT := V_COUNT + 1;
			END LOOP;
		END LOOP;
	END;
	
--BULK COLLECT 3============================================================================================================================
	
			
            /* DECLARE C1 CURSOR FOR
                SELECT M.ctid RID,CASE WHEN I.OUT_LGT_APPL='Y' THEN 'YES' WHEN I.OUT_LGT_APPL='N' THEN 'NO' END  OUT_LGT_APPL
                FROM   FINSL I,int$stg_custimport M
                WHERE  I.SLCODE = M.SLCODE
                AND    M.OUT_LGT_APPL IS NULL
                AND   M.SLCODE IS NOT NULL;

            --V_ICODE DBMS_SQL.VARCHAR2_Table;
            V_OUT_LGT_APPL  DBMS_SQL.VARCHAR2_Table;
            V_ROWID DBMS_SQL.Urowid_Table;
            BEGIN
                OPEN C1;
                LOOP
                    FETCH C1 BULK COLLECT INTO V_ROWID,V_OUT_LGT_APPL LIMIT 100;
                    EXIT WHEN V_ROWID.COUNT = 0;
                    FORALL I IN V_ROWID.FIRST..V_ROWID.LAST

                        UPDATE int$stg_custimport I
                        SET      OUT_LGT_APPL  = V_OUT_LGT_APPL(I)
                        WHERE    ROWID         = V_ROWID(I);
                END LOOP;

            END;
			*/
	DECLARE
		V_COUNT BIGINT;
		V_CTID_OUT_LGT_APPL TYPE_V_CTID_OUT_LGT_APPL[];
	BEGIN
		--OPEN C1;
		V_COUNT := 0;
		
        LOOP
			V_CTID_OUT_LGT_APPL := '{}';
			
			SELECT ARRAY_AGG(t)
			STRICT INTO V_CTID_OUT_LGT_APPL
			FROM (
				SELECT CTID,  OUT_LGT_APPL 
				FROM 
					(SELECT M.ctid CTID,
						CASE WHEN I.OUT_LGT_APPL='Y' THEN 'YES' WHEN I.OUT_LGT_APPL='N' THEN 'NO' END  OUT_LGT_APPL,
						ROW_NUMBER() OVER() RN
					FROM   FINSL I,int$stg_custimport M
					WHERE  I.SLCODE = M.SLCODE
					AND    M.OUT_LGT_APPL IS NULL
					AND   M.SLCODE IS NOT NULL) Q3
				WHERE Q3.RN > V_COUNT
				LIMIT 100)T;
				
			IF ARRAY_LENGTH(V_CTID_OUT_LGT_APPL,1) IS NULL THEN
			EXIT;
			END IF;
			
			FOR I IN ARRAY_LOWER(V_CTID_OUT_LGT_APPL, 1)..ARRAY_UPPER(V_CTID_OUT_LGT_APPL, 1)
			LOOP
				UPDATE int$stg_custimport I
                SET      OUT_LGT_APPL  = V_CTID_OUT_LGT_APPL[I].OUT_LGT_APPL
                WHERE    CTID         = V_CTID_OUT_LGT_APPL[I].CTID;
				
				V_COUNT := V_COUNT + 1;
			END LOOP;
		END LOOP;
	END;	
	
	
			
--BULK COLLECT 4============================================================================================================================

           /* DECLARE C1 CURSOR  FOR
                SELECT M.ROWID RID,CASE WHEN I.TDS_APP='Y' THEN 'YES' WHEN I.TDS_APP='N' THEN 'NO' END  TDS_APP
                FROM   FINSL I,int$stg_custimport M
                WHERE  I.SLCODE = M.SLCODE
                AND    M.TDS_APP IS NULL
                AND   M.SLCODE IS NOT NULL;

            --V_ICODE DBMS_SQL.VARCHAR2_Table;
            V_TDS_APP      DBMS_SQL.VARCHAR2_Table;
            V_ROWID DBMS_SQL.Urowid_Table;
            BEGIN
                OPEN C1;
                LOOP
                    FETCH C1 BULK COLLECT INTO V_ROWID,V_TDS_APP LIMIT 100;
                    EXIT WHEN V_ROWID.COUNT = 0;
                    FORALL I IN V_ROWID.FIRST..V_ROWID.LAST

                        UPDATE int$stg_custimport I
                        SET      TDS_APP      = V_TDS_APP(I)
                        WHERE    ROWID         = V_ROWID(I);
                END LOOP;

            END;
			*/
			
			
	DECLARE
		V_COUNT BIGINT;
		V_CTID_TDS_APP TYPE_V_CTID_TDS_APP[];
	BEGIN
		--OPEN C1;
		V_COUNT := 0;
		
        LOOP
			V_CTID_TDS_APP := '{}';
			
			SELECT ARRAY_AGG(t)
			STRICT INTO V_CTID_TDS_APP
			FROM (
				SELECT RID, TDS_APP 
				FROM (
					SELECT M.CTID RID,
						CASE WHEN I.TDS_APP='Y' THEN 'YES' WHEN I.TDS_APP='N' THEN 'NO' END  TDS_APP,
						ROW_NUMBER() OVER() RN
					FROM   FINSL I,int$stg_custimport M
					WHERE  I.SLCODE = M.SLCODE
					AND    M.TDS_APP IS NULL
					AND   M.SLCODE IS NOT NULL) Q4
				WHERE Q4.RN > V_COUNT
				LIMIT 100)T;
				
			IF ARRAY_LENGTH(V_CTID_TDS_APP,1) IS NULL THEN
			EXIT;
			END IF;
			
			FOR I IN ARRAY_LOWER(V_CTID_TDS_APP, 1)..ARRAY_UPPER(V_CTID_TDS_APP, 1)
			LOOP
				UPDATE int$stg_custimport I
                        SET      TDS_APP      = V_CTID_TDS_APP[I].TDS_APP
                        WHERE    ROWID         = V_CTID_TDS_APP[I].CTID;
				
				V_COUNT := V_COUNT + 1;
			END LOOP;
		END LOOP;
	END;	

--BULK COLLECT 5============================================================================================================================

	DECLARE
		V_COUNT BIGINT;
		V_CTID_CREDIT_VERIFICATION_RULE  TYPE_V_CTID_CREDIT_VERIFICATION_RULE[];
	BEGIN
		--OPEN C1;
		V_COUNT := 0;
		
        LOOP
			V_CTID_CREDIT_VERIFICATION_RULE := '{}';
			
			SELECT ARRAY_AGG(t)
			STRICT INTO V_CTID_CREDIT_VERIFICATION_RULE
			FROM (
				SELECT CTID, CREDIT_VERIFICATION_RULE
				FROM (
					SELECT M.ctid CTID,CREDIT_VERIFICATION_RULE, row_number() over() RN
					FROM   FINSL I,int$stg_custimport M
					WHERE  I.SLCODE = M.SLCODE
					AND    M.CREDIT_VERIFICATION_RULE IS NULL
					AND    M.SLCODE IS NOT NULL
					)Q5
				WHERE Q5.RN > V_COUNT
				LIMIT 100)T;
				
			IF ARRAY_LENGTH(V_CTID_CREDIT_VERIFICATION_RULE,1) IS NULL THEN
			EXIT;
			END IF;
			
			FOR I IN ARRAY_LOWER(V_CTID_CREDIT_VERIFICATION_RULE, 1)..ARRAY_UPPER(V_CTID_CREDIT_VERIFICATION_RULE, 1)
			LOOP
				UPDATE int$stg_custimport I
                        SET      CREDIT_VERIFICATION_RULE      = V_CTID_CREDIT_VERIFICATION_RULE[I].CREDIT_VERIFICATION_RULE
                        WHERE    CTID         = V_CTID_CREDIT_VERIFICATION_RULE[I].CTID;
				
				V_COUNT := V_COUNT + 1;
			END LOOP;
		END LOOP;
	END;	

            /*DECLARE C1 CURSOR FOR
                SELECT M.ctid RID,CREDIT_VERIFICATION_RULE
                FROM   FINSL I,int$stg_custimport M
                WHERE  I.SLCODE = M.SLCODE
                AND    M.CREDIT_VERIFICATION_RULE IS NULL
                AND    M.SLCODE IS NOT NULL;

            --V_ICODE DBMS_SQL.VARCHAR2_Table;
            V_CREDIT_VERIFICATION_RULE     DBMS_SQL.VARCHAR2_Table;
            V_ROWID DBMS_SQL.Urowid_Table;
            BEGIN
                OPEN C1;
                LOOP
                    FETCH C1 BULK COLLECT INTO V_ROWID,V_CREDIT_VERIFICATION_RULE LIMIT 100;
                    EXIT WHEN V_ROWID.COUNT = 0;
                    FORALL I IN V_ROWID.FIRST..V_ROWID.LAST

                        UPDATE int$stg_custimport I
                        SET      CREDIT_VERIFICATION_RULE      = V_CREDIT_VERIFICATION_RULE(I)
                        WHERE    ROWID         = V_ROWID(I);
                END LOOP;

            END;
			*/
			
			
--BULK COLLECT 6============================================================================================================================
			
	DECLARE
	  V_COUNT BIGINT;
      V_CASH_DISCOUNT_APPLICABLE_CTID TYPE_V_CASH_DISCOUNT_APPLICABLE_CTID[];
            ----------------------------------------------
        BEGIN
        v_count := 0;
        LOOP
        V_CASH_DISCOUNT_APPLICABLE_CTID := '{}';
        SELECT ARRAY_AGG(t)
                STRICT INTO V_CASH_DISCOUNT_APPLICABLE_CTID
                FROM 
                (SELECT CTID,CASH_DISCOUNT_APPLICABLE FROM
                (SELECT M.CTID CTID,CASE WHEN I.CASH_DISCOUNT_APPLICABLE='Y' 
                THEN 'YES' WHEN I.CASH_DISCOUNT_APPLICABLE='N' 
                THEN 'NO' END  CASH_DISCOUNT_APPLICABLE
                ,ROW_NUMBER() OVER () AS RN
                   FROM   FINSL I,int$stg_custimport M
                WHERE  I.SLCODE = M.SLCODE
                AND    M.CASH_DISCOUNT_APPLICABLE IS NULL
                AND   M.SLCODE IS NOT NULL)T1
                WHERE T1.RN    > v_count    
                LIMIT 100)t;
               
            IF ARRAY_LENGTH(V_CASH_DISCOUNT_APPLICABLE_CTID,1) IS NULL THEN
                EXIT; 
            END IF;
            
            FOR i IN ARRAY_LOWER(V_CASH_DISCOUNT_APPLICABLE_CTID, 1)..ARRAY_UPPER(V_CASH_DISCOUNT_APPLICABLE_CTID, 1)
                LOOP
                UPDATE int$stg_custimport I
                        SET      CASH_DISCOUNT_APPLICABLE = V_CASH_DISCOUNT_APPLICABLE_CTID[i].CASH_DISCOUNT_APPLICABLE
                        WHERE    ROWID         = V_CASH_DISCOUNT_APPLICABLE_CTID[i].CTID;
                v_count := v_count + 1;
            END LOOP;
        END LOOP;			
	END;			
                /*DECLARE C1 CURSOR  FOR
                SELECT M.ROWID RID,CASE WHEN I.CASH_DISCOUNT_APPLICABLE='Y' THEN 'YES' WHEN I.CASH_DISCOUNT_APPLICABLE='N' THEN 'NO' END  CASH_DISCOUNT_APPLICABLE
                FROM   FINSL I,int$stg_custimport M
                WHERE  I.SLCODE = M.SLCODE
                AND    M.CASH_DISCOUNT_APPLICABLE IS NULL
                AND   M.SLCODE IS NOT NULL;

            --V_ICODE DBMS_SQL.VARCHAR2_Table;
            V_CASH_DISCOUNT_APPLICABLE      DBMS_SQL.VARCHAR2_Table;
            V_ROWID DBMS_SQL.Urowid_Table;
            BEGIN
                OPEN C1;
                LOOP
                    FETCH C1 BULK COLLECT INTO V_ROWID,V_CASH_DISCOUNT_APPLICABLE LIMIT 100;
                    EXIT WHEN V_ROWID.COUNT = 0;
                    FORALL I IN V_ROWID.FIRST..V_ROWID.LAST

                        UPDATE int$stg_custimport I
                        SET      CASH_DISCOUNT_APPLICABLE      = V_CASH_DISCOUNT_APPLICABLE(I)
                        WHERE    ROWID         = V_ROWID(I);
                END LOOP;

            END;*/
			

         --- FOR CREATION
            UPDATE int$stg_custimport I
            SET    LGT_APPL =   'NO'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    LGT_APPL IS NULL;

            UPDATE int$stg_custimport I
            SET    OUT_LGT_APPL =   'NO'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    OUT_LGT_APPL IS NULL;

            UPDATE int$stg_custimport I
            SET    TDS_APP =   'NO'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    TDS_APP IS NULL;

            UPDATE int$stg_custimport I
            SET    CREDIT_VERIFICATION_RULE =   'N'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    CREDIT_VERIFICATION_RULE IS  NULL;

            UPDATE int$stg_custimport I
            SET    CASH_DISCOUNT_APPLICABLE =   'NO'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    CASH_DISCOUNT_APPLICABLE IS NULL;

            UPDATE int$stg_custimport I
            SET    ADMCURRENCY_NAME =   'Rupees'
            WHERE  USERID = P_USERID
            AND    SLCODE IS NULL
            AND    ADMCURRENCY_NAME IS NULL;
         ---- END OF FOR CREATION
   -- END REV : 003
      --slcode Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Specified SL Code not available', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN  finsl b ON (UPPER(a.slcode) = UPPER(b.slcode))
WHERE b.slname IS NULL AND a.slcode IS NOT NULL AND a.userid = p_userid;

      --slcode Validation
    /*  INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Specified SL Code not available ', SYSDATE
           FROM int$stg_custimport a
          WHERE  a.slcode IS NOT NULL
            AND a.userid = p_userid;*/
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), a.lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Same SLCODE available more than one time.',
                clock_timestamp()
           FROM int$stg_custimport a,
                (SELECT   a.slcode, COUNT(1)
                     FROM int$stg_custimport a
                    WHERE a.slcode is not null
                      AND a.userid = p_userid
                 GROUP BY a.slcode
                   HAVING COUNT(1) > 1) b
          WHERE a.slcode = b.slcode
          and   a.slcode is not null
          AND a.userid = p_userid;

     -- START REV : 007
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), a.lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Vendor''s Order Capacity Can not be negative.',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(PO_ORDER_LIMIT,0) < 0
          AND a.userid = p_userid;

     -- END REV : 007
      --slid Validation
     /* INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid  SLID ', SYSDATE
           FROM int$stg_custimport a,
                (   SELECT  B1.SLID SLID,B1.SLCODE SLCODE
                    FROM    int$stg_custimport a1, finsl b1
                    WHERE     A1.SLCODE  <> B1.SLCODE
                    AND     a1.userid = p_userid
                ) SL1
          WHERE UPPER (a.slid) = UPPER (SL1.slid)
            AND a.slcode IS NOT NULL
            AND A.SLCODE  <> SL1.SLCODE
            AND a.userid = p_userid;*/
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), a.lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Same SLID available more than one time.',
                clock_timestamp()
           FROM int$stg_custimport a,
                (SELECT   a.slID, COUNT(1)
                     FROM int$stg_custimport a
                    WHERE a.slID is not null
                      AND a.userid = p_userid
                 GROUP BY a.slID
                   HAVING COUNT(1) > 1) b
          WHERE a.slID = b.slID
          and   a.slID is not null
          AND a.userid = p_userid;

      --slid Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'SLID already exists.', clock_timestamp()
           FROM int$stg_custimport a, finsl b
          WHERE UPPER(a.slid) = UPPER(b.slid)
            AND A.SLID IS NOT NULL
            AND ( a.slcode IS NULL OR (a.slcode IS NOT NULL AND A.SLCODE <> B.SLCODE ))
           -- AND A.SLCODE <> B.SLCODE
            AND a.userid = p_userid;

      --CLASSNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Class Name ', clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN admcls b  ON (UPPER(a.class_name) = UPPER(b.clsname))
WHERE (   b.clsname IS NULL
                 OR (UPPER(b.clstype)<> 'C')
                 OR B.EXT = 'Y'
                ) AND a.userid = p_userid;

      --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid GL Name ', clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN fingl b ON (UPPER(a.gl_name) = UPPER(b.glname))
WHERE (b.glname IS NULL
                OR (b.glname IS NOT NULL AND b.srctype <>  'R')
                OR (b.glname IS NOT NULL AND b.EXT = 'Y')
              ) AND A.SLCODE IS NULL AND a.userid = p_userid;

      --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'GL Name Should be not null for record insertion.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.gl_name) IS NULL
          AND A.SLCODE IS NULL
          AND a.userid = p_userid;

      --SALETYPE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Mode of Operation.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( UPPER(a.saletype) NOT IN ('CONSIGNMENT', 'OUTRIGHT') or UPPER(a.saletype) is null)
          AND a.slcode IS NULL
          AND a.userid = p_userid;

      --Admcurrency Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Currency name.', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN admcurrency b ON (UPPER(a.admcurrency_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL OR coalesce(b.isextinct, 0) = 1) AND a.admcurrency_name IS NOT NULL AND a.userid = p_userid;

      --ext Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'New record can not be extinct record.',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE (a.slcode IS NULL AND UPPER(a.ext) = 'YES')
            AND a.userid = p_userid;

      --ext Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Extinct option.',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.ext) NOT IN ('YES','NO')
          AND   EXT IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      --BCITY Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Invalid City name, not available in Ginesys City Master ',
                clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN admcity b ON (UPPER(a.bctname) = UPPER(b.ctname))
WHERE b.ctname IS NULL AND a.bctname IS NOT NULL AND a.userid = p_userid;

      --BFAX2 Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Mobile No. is mandatory for new Customer',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE BFX2 IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;

     INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Mobile No. should only contain digits',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE BFX2 IS NOT NULL
         -- AND ( INSTR(BFX2,'+') IN (0,1) OR MOD(TO_NUMBER(SUBSTR(BFX2,1)),1) = 0 )
            AND  LENGTH(REPLACE(translate(BFX2,'0123456789',' '),' ',''))  > 0
            --AND A.SLCODE IS NULL
            AND a.userid = p_userid;

        /*IF    INSTR(:FINSL.BFX2,'+') NOT IN (0,1) THEN
                DA('Mobile No. should only contain digits.');
                GO_ITEM('FINSL.BFX2');
                RAISE FORM_TRIGGER_FAILURE;
        ELSIF MOD(TO_NUMBER(SUBSTR(:FINSL.BFX2,1)),1) <> 0 THEN
                    NULL;
        END IF;    */
      --EMAIL Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Busines Email.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (position('@' in bemail) = 0 OR position('.' in bemail) = 0)
            AND a.bemail IS NOT NULL
            AND a.userid = p_userid;

      --bEMAIL2 Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Business Email2.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (position('@' in bemail2) = 0 OR position('.' in bemail2) = 0)
            AND bemail2 IS NOT NULL
            AND a.userid = p_userid;

      --BCP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Contact Person is mandatory for new Customer.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE A.BCP IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;

      --COMPANYTYPE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Company Type.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE trim(both UPPER(a.companytype)) NOT IN ('PROPRIETORSHIP', 'PARTNERSHIP', 'PRIVATE LIMITED',
                    'LIMITED', 'HUF', 'CO-OPERATIVE', 'OTHERS')
            AND   companytype IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      --INDUSTRYTYPE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Industry Type.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE trim(both UPPER(a.industrytype)) NOT IN ('SMALL SCALE', 'LARGE SCALE', 'GOVERNMENT', 'CONTRACTOR',
                    'OTHERS')
            AND   industrytype IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      --PAN Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'PAN No. is mandatory for customer.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE A.PAN IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;
        -- start rev : 009
        /*
      --lstno Validation
      INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'LST No. is mandatory for customer For insertion', SYSDATE
           FROM int$stg_custimport a
          WHERE A.LSTNO IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;

      --Cstno Validation
      INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'CST No. is mandatory for customer for new record insertion', SYSDATE
           FROM int$stg_custimport a
          WHERE A.CSTNO IS NULL
            AND A.SLCODE IS NULL
            AND a.userid = p_userid;
        */
        -- end rev : 009
      --DEFAULT_MARKUP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'MRP Default Markup ca not be negative.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(DEFAULT_MARKUP,0) < 0
            AND a.userid = p_userid;

      --ROUND_OFF_MARKUP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'MRP Roundoff Markup ca not be negative.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(ROUND_OFF_MARKUP,0) < 0
            AND a.userid = p_userid;

      --LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid RSP Limit', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER("LIMIT") NOT IN ('UPPER', 'ROUND', 'LOWER')
          AND "LIMIT"  IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      --DEFAULT_MARKUP_wsp Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'WSP Default Markup ca not be negative.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(DEFAULT_MARKUP_WSP,0) < 0
            AND a.userid = p_userid;

      --ROUND_OFF_MARKUP_wsp Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'WSP Roundoff Markup ca not be negative.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(ROUND_OFF_MARKUP_WSP,0) < 0
            AND a.userid = p_userid;

      --LIMIT_WSP
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid WSP Limit', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(LIMIT_WSP) NOT IN ('UPPER', 'ROUND', 'LOWER')
          AND   LIMIT_WSP IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      --ADMCMPTAX Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Tax Region.', clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN admcmptax b ON (UPPER(a.admcmptax_name) = UPPER(b.NAME))
WHERE (B.NAME IS NULL OR coalesce(b.ext, 'N') = 'Y') AND a.admcmptax_name IS NOT NULL AND a.userid = p_userid;

      --Purchase TRADEGRP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase Trade Group.', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN fintradegrp b ON (UPPER(a.fintradegrp_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL OR coalesce(b.ext, 'N') = 'Y') AND a.fintradegrp_name IS NOT NULL AND a.userid = p_userid;

      --Purchase Term Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase term.', clock_timestamp()
           FROM int$stg_custimport a

         WHERE  (   (    UPPER(a.fintradegrp_name) IS NULL
                     AND UPPER(a.purtermmain_name) IS NOT NULL
                    )
                 OR (    UPPER(a.fintradegrp_name) IS NOT NULL
                     AND UPPER(a.purtermmain_name) IS NULL
                    )
                )
            AND a.userid = p_userid;

      --Purchase Term Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase term.', clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN purtermmain b  ON (UPPER(a.purtermmain_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL OR coalesce(b.ext, 'N') = 'Y') AND UPPER(a.purtermmain_name) IS NOT NULL AND UPPER(a.fintradegrp_name) IS NOT NULL AND a.userid = p_userid; --Purchase Term Validation
 INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase term.', clock_timestamp()
           FROM  --int$stg_custimport a,
 ( SELECT FINTRADEGRP_CODE ,a1.purtermmain_name TERMNAME
                   FROM    int$stg_custimport A1,purtermmain b1
                   WHERE   UPPER(a1.purtermmain_name) = UPPER(b1.NAME)
                   AND     B1.EXT = 'N'
                   AND     a1.userid = p_userid
                 ) B
                LEFT OUTER JOIN ( SELECT   B1.CODE FINTRADEGRP_CODE  ,a1.fintradegrp_name fintradegrp_name,purtermmain_name,LINENO,USERID
                   FROM    int$stg_custimport A1,fintradegrp b1
                   WHERE   UPPER(a1.fintradegrp_name) = UPPER(B1.NAME)
                   AND     B1.EXT = 'N'
                   AND     a1.userid = p_userid
                 ) A --fintradegrp t
  --  AND UPPER (a.fintradegrp_name) = UPPER (t.NAME)
  ON UPPER (a.purtermmain_name) = UPPER (b.TERMNAME)
          --  AND UPPER (a.fintradegrp_name) = UPPER (t.NAME)
     AND A.FINTRADEGRP_CODE   = B.FINTRADEGRP_CODE
  WHERE B.FINTRADEGRP_CODE IS NULL AND UPPER(a.purtermmain_name) IS NOT NULL AND UPPER(a.fintradegrp_name) IS NOT NULL AND a.userid = p_userid;

--=-============================ DONE TILL THIS ============================================

      -- PURFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase Form Name.', clock_timestamp()
           FROM int$stg_custimport a
         WHERE  fintradegrp_name IS NOT NULL
            AND purform_name IS NULL
            AND a.userid = p_userid;

      -- PURFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase Form Name.', clock_timestamp()
           FROM int$stg_custimport a

         WHERE (fintradegrp_name = 'LOCAL' AND purform_name <> 'None')
            AND purform_name IS NOT NULL
            AND a.userid = p_userid;

      -- PURFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase Form Name.', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN finform b  ON (UPPER(a.purform_name) = UPPER(b.formname))
WHERE (b.formname IS NULL OR coalesce(b.ext, 'N') = 'Y') AND purform_name IS NOT NULL AND a.userid = p_userid;

      --WHETHER_CONSIGNMENT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Consignment Purchase', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(whether_consignment) NOT IN ('YES', 'NO')
          AND   whether_consignment IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

   --Price Type
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Procurement Price Type', clock_timestamp()
           FROM int$stg_custimport a
          WHERE trim(both UPPER(pricetype)) NOT IN ('BASIC RATE','EFFECTIVE RATE', 'MRP', 'WSP', 'RSP', 'STANDARD RATE')
            AND   PRICETYPE IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

     --MARKUP_SELLING_PRICE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Price Details : Discount', clock_timestamp()
           FROM int$stg_custimport a
          WHERE CAST(right(to_char(coalesce(MARKUP_SELLING_PRICE,0),'9999.000'), 1) AS INTEGER) > 0
          AND   coalesce(MARKUP_SELLING_PRICE,0) <> 0
            AND a.userid = p_userid;

     --MARKUP_SELLING_ROUND_OFF
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Price Details : Round off Markup', clock_timestamp()
           FROM int$stg_custimport a
          WHERE    coalesce(MARKUP_SELLING_ROUND_OFF,0) <> 0
          AND (  coalesce(MARKUP_SELLING_ROUND_OFF,0) <=0 OR coalesce(MARKUP_SELLING_ROUND_OFF,0) >= 100 )
            AND a.userid = p_userid;

      --MARKUP_SELLING_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Markup selling limit.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.markup_selling_limit) NOT IN ('UPPER', 'ROUND', 'LOWER')
            AND   a.markup_selling_limit IS NOT NULL  -- REV : 003
            AND a.userid = p_userid;

      -- pur_price_chart_appl Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Price chart applicable.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(pur_price_chart_appl) NOT IN ('YES', 'NO')
          AND   a.pur_price_chart_appl IS NOT NULL  -- REV : 003
            AND a.userid = p_userid;

      --TDS app Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid TDS Applicable.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (   (a.tdssrc_name IS NULL AND UPPER(a.tds_app) = 'YES')
                 OR (a.tdssrc_name IS NOT NULL AND UPPER(a.tds_app) = 'NO')
                )
          AND  SLCODE IS NULL
            AND a.userid = p_userid;

      --TDS app Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid TDS Applicable.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.tds_app) NOT IN ('YES','NO')
          AND   tds_app IS NOT NULL  -- REV : 003
          AND  SLCODE IS NULL
            AND a.userid = p_userid;

      --TDS SRC Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid TDS Source Name.', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN fintdssrc b ON (UPPER(a.tdssrc_name) = UPPER(b.tdssrcname))
WHERE b.tdssrcname IS NULL AND UPPER(a.tds_app) = 'YES' AND a.tdssrc_name IS NOT NULL AND a.userid = p_userid;

      --TDS SRC Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid TDS Source Name.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (( a.tdssrc_name IS NOT NULL AND UPPER(a.tds_app) = 'NO' )
                 OR ( a.tdssrc_name IS  NULL AND UPPER(a.tds_app) = 'YES' )
                 )
          AND   SLCODE IS NULL -- REV : 003
            AND a.userid = p_userid;

-- START REV : 003
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid TDS Source Name.', clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN finsl sl ON (A.SLCODE = SL.SLCODE)
WHERE (( (a.tdssrc_name IS NOT NULL OR SL.TDSSRCCODE IS NOT NULL ) AND UPPER(a.tds_app) = 'NO' )
                 OR
                 ( (a.tdssrc_name IS  NULL AND SL.TDSSRCCODE IS NULL ) AND UPPER(a.tds_app) = 'YES' )
                 ) AND A.SLCODE IS NOT NULL AND a.userid = p_userid;
-- END REV :003
      --CASH_DISCOUNT_APPLICABLE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Cash Discount Applicable.',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.cash_discount_applicable) NOT IN ('YES', 'NO')
          AND   cash_discount_applicable IS NOT NULL  -- REV : 003
            AND a.userid = p_userid;

      --Cash Discount percentage Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Invalid Cash Discount %.',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE (   (    UPPER(a.cash_discount_applicable) = 'NO'
                     AND a.cash_discount_percentage IS NOT NULL
                    )
                 OR (    UPPER(a.cash_discount_applicable) = 'YES'
                     AND a.cash_discount_percentage IS NULL
                    )
                )
            AND  SLCODE IS NULL -- REV : 003
            AND a.userid = p_userid;
   -- START REV : 003
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Invalid Cash Discount %.',
                clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN finsl sl ON (A.SLCODE = SL.SLCODE)
WHERE (   (    UPPER(a.cash_discount_applicable) = 'NO'
                     AND (a.cash_discount_percentage IS NOT NULL
                            OR
                          SL.cash_discount_percentage IS NOT NULL
                         )
                    )
                 OR (    UPPER(a.cash_discount_applicable) = 'YES'
                     AND (a.cash_discount_percentage IS NULL
                            AND
                          SL.cash_discount_percentage IS NULL
                          )
                    )
                ) AND A.SLCODE IS NOT NULL AND a.userid = p_userid;
  -- END REV : 003
      --Cash Discount percentage Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Invalid Cash Discount %.',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(cash_discount_percentage,0) <> 0
          AND ( coalesce(cash_discount_percentage,0) <= 0 OR coalesce(cash_discount_percentage,0) >= 100)
            AND a.userid = p_userid;

      --Cash Discount period Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Cash Discount Period.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (   (    UPPER(a.cash_discount_applicable) = 'NO'
                     AND a.cash_discount_period IS NOT NULL
                    )
                 OR (    UPPER(a.cash_discount_applicable) = 'YES'
                     AND a.cash_discount_period IS NULL
                    )
                )
            AND SLCODE IS NULL -- REV : 003
            AND a.userid = p_userid;
    -- START REV : 003
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Cash Discount Period.', clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN finsl sl ON (A.SLCODE = SL.SLCODE)
WHERE (   (    UPPER(a.cash_discount_applicable) = 'NO'
                     AND (a.cash_discount_period IS NOT NULL
                            OR
                          SL.cash_discount_period IS NOT NULL
                         )
                    )
                 OR (    UPPER(a.cash_discount_applicable) = 'YES'
                     AND (a.cash_discount_period IS NULL
                          AND
                          SL.cash_discount_period IS NULL
                          )
                    )
                ) AND A.SLCODE IS NOT NULL AND a.userid = p_userid;
    -- END REV : 003
      --Cash Discount period Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Cash Discount Period.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(cash_discount_period ,0) <> 0
          AND   coalesce(cash_discount_period ,0) > 999
            AND a.userid = p_userid;

      --PUR_DELIVERY_BUFFER_DAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Valid Buffer days should be within 0 to 999.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(PUR_DELIVERY_BUFFER_DAYS ,0) <> 0
          AND (coalesce(PUR_DELIVERY_BUFFER_DAYS ,0) <0  OR coalesce(PUR_DELIVERY_BUFFER_DAYS ,0) > 100 )
            AND a.userid = p_userid;

      --PUR_DUEDAYS
	   INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Purchase Due Days should be within 1 to 999.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE PUR_DUEDAYS IS NULL
            AND a.userid = p_userid;
	  
	  
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Purchase Due Days should be within 1 to 999.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (coalesce(PUR_DUEDAYS,0) < 1  OR coalesce(PUR_DUEDAYS ,0) > 999 )
          AND    PUR_DUEDAYS IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      --CRDAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Credit Days can not be negative.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(CRDAYS,0) < 0
            AND a.userid = p_userid;

      --CRname Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Credit Rating', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN salcreditrating b ON (upper(a.cr_name) = upper(b.crname))
WHERE (b.crname IS NULL OR b.ext = 'Y') AND A.CR_NAME IS NOT NULL AND a.userid = p_userid;

      --CRamt
      -- START REV : 001
     /* INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Credit Amount can not be negative.', SYSDATE
           FROM int$stg_custimport a
          WHERE NVL(CRAMT,0) < 0
            AND a.userid = p_userid;*/
      -- END REV : 001
      --SALES TRADEGRP Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales Trade Group.', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN fintradegrp b ON (UPPER(a.saltradegrp_name) = UPPER(b.NAME))
WHERE (b.NAME IS NULL OR coalesce(b.ext, 'N') = 'Y') AND a.saltradegrp_name IS NOT NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Sales Trade Group should be null for consignment customer.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.saletype) = 'CONSIGNMENT'
            AND a.saltradegrp_name IS NOT NULL
            AND a.userid = p_userid;

      --SALES Term Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales term.', clock_timestamp()
           FROM int$stg_custimport a

         WHERE  (   (    UPPER(a.saltradegrp_name) IS NULL
                     AND UPPER(a.salterm_name) IS NOT NULL
                    )
                 OR (    UPPER(a.saltradegrp_name) IS NOT NULL
                     AND UPPER(a.salterm_name) IS NULL
                    )
                )
            AND a.userid = p_userid;

      --Sales Term Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales term.', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN saltermmain b ON (UPPER(a.salterm_name) = UPPER(b.saltermname))
WHERE (b.saltermname IS NULL OR coalesce(b.ext, 'N') = 'Y') AND UPPER(a.salterm_name) IS NOT NULL AND UPPER(a.saltradegrp_name) IS NOT NULL AND a.userid = p_userid; --Sales Term Validation
 INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales term.', clock_timestamp()
           FROM  --int$stg_custimport a,
 ( SELECT FINTRADEGRP_CODE ,a1.salterm_name TERMNAME
                   FROM    int$stg_custimport A1,saltermmain b1
                   WHERE   UPPER(a1.salterm_name) = UPPER(b1.saltermname)
                   AND     B1.EXT = 'N'
                   AND     a1.userid = p_userid
                 ) B,
                 ( SELECT   B1.CODE FINTRADEGRP_CODE   ,a1.saltradegrp_name saltradegrp_name,salterm_name,LINENO,a1.userid
                   FROM    int$stg_custimport A1,fintradegrp b1
                   WHERE   UPPER(a1.saltradegrp_name) = UPPER(B1.NAME)
                   AND     B1.EXT = 'N'
                   AND     a1.userid = p_userid
                 ) a --fintradegrp t
  -- AND UPPER (a.saltradegrp_name) = UPPER (t.NAME)
  WHERE B.FINTRADEGRP_CODE IS NULL AND UPPER(a.salterm_name) IS NOT NULL AND UPPER(a.saltradegrp_name) IS NOT NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Sales Term should be null for consignment customer.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.saletype) = 'CONSIGNMENT'
            AND a.salterm_name IS NOT NULL
            AND a.userid = p_userid;

-- SALFORM
    -- SALFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sale Form Name.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE saltradegrp_name IS NOT NULL
            AND salform_name IS NULL
            AND a.userid = p_userid;

      -- SALFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sale Form Name.', clock_timestamp()
           FROM int$stg_custimport a

         WHERE (saltradegrp_name = 'LOCAL' AND salform_name <> 'None')
            AND salform_name IS NOT NULL
            AND a.userid = p_userid;

      -- SALFORMNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sale Form Name.', clock_timestamp()
           FROM int$stg_custimport a
LEFT OUTER JOIN finform b  ON (UPPER(a.salform_name) = UPPER(b.formname))
WHERE (b.formname IS NULL OR coalesce(b.ext, 'N') = 'Y') AND salform_name IS NOT NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Sales form should be null for consignment customer.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.saletype) = 'CONSIGNMENT'
            AND a.salform_name IS NOT NULL
            AND a.userid = p_userid;

      --PRICELIST NAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Pricelist ', clock_timestamp()
           FROM int$stg_custimport a 
LEFT OUTER JOIN salpricelistmain b ON (UPPER(a.pricelist_name) = UPPER(b.pricelistname))
WHERE (b.pricelistname IS NULL OR (coalesce(ext, 'N') = 'Y')) AND a.pricelist_name IS NOT NULL AND a.userid = p_userid;

      --due dt basis
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Due Date basis (Invoice Term).',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.due_date_basis) NOT IN ('ENTRY DATE', 'DOCUMENT DATE')
            AND  due_date_basis IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      --intrate
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Interest Rate can not be negative.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE coalesce(INTRATE,0) < 0
            AND a.userid = p_userid;

      --TRPID  Validation
      /*INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transporter ID', SYSDATE
           FROM int$stg_custimport a, finsl b
          WHERE UPPER (a.trpid) = UPPER (b.slid(+))
            AND a.trpid IS NOT NULL
            AND (b.slid IS NULL OR (b.clscode <> 3)
                 OR (NVL (b.ext, 'Y') = 'Y')
                )
            AND a.userid = p_userid;*/
      --AGENT ID  Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Agent ID ', clock_timestamp()
           FROM int$stg_custimport a 
LEFT OUTER JOIN (SELECT SLID
                 FROM  finsl b,ADMCLS CS
                 WHERE B.CLSCODE = CS.CLSCODE
                 AND   CS.CLSTYPE = 'A'
                 AND   CS.EXT = 'N'
                 AND   B.EXT = 'N'
                ) b ON (UPPER(a.agent_id) = UPPER(b.slid))
WHERE b.slid IS NULL AND a.agent_id IS NOT NULL AND a.userid = p_userid;

      --AGRATE Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Agent Rate should be Null.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( a.agent_id IS NULL AND coalesce(AGRATE,0) <> 0)
            AND a.userid = p_userid;

      --AGRATE Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Agent Rate.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( a.agent_id IS NOT NULL 
				 AND 
				(
            COALESCE(NULLIF(SUBSTRING(TO_CHAR(COALESCE(AGRATE, 0), '9999.000'), -1, 1), ''), '0')::INTEGER > 0
            OR COALESCE(AGRATE, 0) < 0
            OR COALESCE(AGRATE, 0) >= 100
                )
				)
          AND coalesce(AGRATE,0) <>  0
            AND a.userid = p_userid;

      --SALE_POST_METHOD
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation',
                'Invalid Sale Posting Method',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE (
                    ( UPPER(a.saletype) = 'CONSIGNMENT'  AND (trim(both UPPER(sale_post_method)) NOT IN ('TAX INCLUSIVE', 'TAX EXCLUSIVE')
                                               OR sale_post_method IS NULL)
                     )
                   OR ( UPPER(a.saletype) = 'OUTRIGHT'  AND sale_post_method IS NOT NULL)
                 )
            AND a.userid = p_userid;

      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales Ledger', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN fingl b ON (UPPER(a.sales_glname) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y') AND UPPER(a.saletype) = 'OUTRIGHT' AND a.sales_glname IS NOT NULL AND a.userid = p_userid;

      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales Ledger.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (UPPER(a.saletype) = 'CONSIGNMENT' AND a.SALES_GLNAME IS NOT NULL)
            AND a.userid = p_userid;

    --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Sales Subledger SLID should be null as Sales Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.sales_sl_slid IS  NOT NULL
            AND a.sales_glname IS NULL
            AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      /*INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Sales Ledger Name of the Sales Sub-ledger  SLID is not matching with given Sales Ledger Name / Subledger not applicable for the Sales Ledger Name / Extinct.', SYSDATE
           FROM int$stg_custimport a,
                fingl b,
                (SELECT a1.sales_sl_slid slid, a1.sales_glname glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER (a1.sales_sl_slid) = UPPER (s.slid)
                    AND a1.sales_sl_slid IS NOT NULL
                    AND a1.userid = p_userid
                    AND NVL (fgl.ext, 'N') = 'N'
                    AND NVL (s.ext, 'N') = 'N') fgl
          WHERE UPPER (a.sales_glname) = UPPER (b.glname)
            AND UPPER (a.sales_sl_slid) = UPPER (fgl.slid(+))
            AND UPPER (a.sales_glname) IS NOT NULL
            AND a.sales_sl_slid IS NOT NULL
            AND b.glname IS NOT NULL
            AND b.glcode = fgl.glcode(+)
            AND fgl.glcode IS NULL
            AND NVL(B.SLAPP,'N') ='Y'
            AND a.userid = p_userid;*/
         INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Sales Ledger Name of the Sales Sub-ledger  SLID is not matching with given Sales Ledger Name / Subledger not applicable for the Sales Ledger Name / Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.sales_sl_slid , a1.sales_glname ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.sales_glname) = UPPER(b1.glname)
                  AND a1.userid = 1040
                ) a
				LEFT OUTER JOIN (SELECT a1.sales_sl_slid slid, a1.sales_glname glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.sales_sl_slid) = UPPER(s.slid)
                    AND a1.sales_sl_slid IS NOT NULL
                    AND a1.userid = 1040
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
ON (UPPER(a.sales_sl_slid) = UPPER(fgl.slid))
WHERE UPPER(a.sales_glname) IS NOT NULL AND a.sales_sl_slid IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.sales_glname) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.sales_sl_slid IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.sales_sl_slid IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

----RETURN
      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales Return Ledger', clock_timestamp()
           FROM  int$stg_custimport a 
LEFT OUTER JOIN fingl b ON (UPPER(a.SALES_RETURN_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y') AND UPPER(a.saletype) = 'OUTRIGHT' AND a.SALES_RETURN_GLNAME IS NOT NULL AND a.userid = p_userid;

      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales Return Ledger.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (UPPER(a.saletype) = 'CONSIGNMENT' AND a.SALES_RETURN_GLNAME IS NOT NULL )
            AND a.userid = p_userid;

    --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Sales Return Subledger SLID should be null as Sales Return Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.SALES_RETURN_SL_SLID IS NOT NULL
            AND a.sales_return_glname IS NULL
            AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Extinct Sales Return Sub-Ledger SLID / Sales Ledger Name of the Sales Return Sub-ledger  SLID is not matching with given Sales Return Ledger Name / Subledger not applicable for the Sales Ledger Name.', clock_timestamp()
           FROM 
				( SELECT b1.glcode glcode ,a1.SALES_RETURN_SL_SLID , a1.sales_RETURN_glname ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.sales_RETURN_glname) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a LEFT OUTER JOIN
		   (SELECT a1.SALES_RETURN_SL_SLID slid, a1.sales_RETURN_glname glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.SALES_RETURN_SL_SLID) = UPPER(s.slid)
                    AND a1.SALES_RETURN_SL_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl 
ON (UPPER(a.SALES_RETURN_SL_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.sales_RETURN_glname) IS NOT NULL AND a.SALES_RETURN_SL_SLID IS NOT NULL AND a.sales_RETURN_glname IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Sales Return Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.sales_return_glname) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.SALES_RETURN_SL_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.SALES_RETURN_SL_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

--consgn
      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Consignment Sales Ledger Name', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN fingl b ON (UPPER(a.CONSIGNMENT_SALES_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' or ( b.type not in ('I','E'))) AND UPPER(a.saletype) = 'CONSIGNMENT' AND a.CONSIGNMENT_SALES_GLNAME IS NOT NULL AND a.userid = p_userid;

      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Consignment Sales Ledger Name.', clock_timestamp()
           FROM int$stg_custimport a
           WHERE ( (UPPER(a.saletype) = 'OUTRIGHT' AND a.CONSIGNMENT_SALES_GLNAME IS NOT NULL)
                  OR (UPPER(a.saletype) = 'CONSIGNMENT' AND a.CONSIGNMENT_SALES_GLNAME IS NULL)
                )
            AND a.userid = p_userid;

    --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Consignemnt Sales Subledger SLID should be null as Consignment Sales Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.CONSIGNMENT_SALES_SL_SLID IS NOT NULL
            AND a.CONSIGNMENT_SALES_GLNAME IS NULL
            AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Consignment Sales Ledger Name of the Sales Sub-ledger  SLID is not matching with given Sales Ledger Name / Subledger not applicable for the Sales Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.CONSIGNMENT_SALES_SL_SLID , a1.CONSIGNMENT_SALES_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.CONSIGNMENT_SALES_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a 
			LEFT OUTER JOIN (SELECT a1.CONSIGNMENT_SALES_SL_SLID  SLID, a1.CONSIGNMENT_SALES_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.CONSIGNMENT_SALES_SL_SLID) = UPPER(s.slid)
                    AND a1.CONSIGNMENT_SALES_SL_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
ON (UPPER(a.CONSIGNMENT_SALES_SL_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.CONSIGNMENT_SALES_GLNAME) IS NOT NULL AND a.CONSIGNMENT_SALES_SL_SLID IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Consignment Sales Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.CONSIGNMENT_SALES_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.CONSIGNMENT_SALES_SL_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.CONSIGNMENT_SALES_SL_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

-- CONSGN TRNSFR
      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Consignment Transfer Out Ledger Name', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN fingl b ON (UPPER(a.CONSIGNMENT_TRNSFR_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' or ( b.type not in ('I','E'))) AND UPPER(a.saletype) = 'CONSIGNMENT' AND a.CONSIGNMENT_TRNSFR_GLNAME IS NOT NULL AND a.userid = p_userid;

      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Consignment Transfer Out Ledger Name.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( (UPPER(a.saletype) = 'OUTRIGHT' AND a.CONSIGNMENT_TRNSFR_GLNAME IS NOT NULL)
                  OR (UPPER(a.saletype) = 'CONSIGNMENT' AND a.CONSIGNMENT_TRNSFR_GLNAME IS NULL)
                )
            AND a.userid = p_userid;

    --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Consignemnt Transfer Sales Subledger SLID should be null as Consignment Transfer Out Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.CONSIGNMENT_TRNSFR_SL_SLID IS NOT NULL
            AND a.CONSIGNMENT_TRNSFR_GLNAME IS NULL
            AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Consignment Transfer Out Ledger Name of the Sales Sub-ledger  SLID is not matching with given Sales Ledger Name / Subledger not applicable for the Sales Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.CONSIGNMENT_TRNSFR_SL_SLID , a1.CONSIGNMENT_TRNSFR_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.CONSIGNMENT_TRNSFR_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a
			LEFT OUTER JOIN 	
				(SELECT a1.CONSIGNMENT_TRNSFR_SL_SLID  SLID, a1.CONSIGNMENT_TRNSFR_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.CONSIGNMENT_TRNSFR_SL_SLID) = UPPER(s.slid)
                    AND a1.CONSIGNMENT_TRNSFR_SL_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl 
ON (UPPER(a.CONSIGNMENT_TRNSFR_SL_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.CONSIGNMENT_TRNSFR_GLNAME) IS NOT NULL AND a.CONSIGNMENT_TRNSFR_SL_SLID IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Consignment Transfer Out Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.CONSIGNMENT_TRNSFR_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.CONSIGNMENT_TRNSFR_SL_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.CONSIGNMENT_TRNSFR_SL_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

-- purchase
      --PURCHASE_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase Ledger Name', clock_timestamp()
           FROM int$stg_custimport a  
LEFT OUTER JOIN fingl b ON (UPPER(a.PURCHASE_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' ) --AND UPPER (a.saletype) = 'CONSIGNMENT'
  AND a.PURCHASE_GLNAME IS NOT NULL AND a.userid = p_userid;

    --purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Purchase Subledger SLID should be null as Purchase Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.PURCHASE_SLID IS NOT NULL
            AND a.PURCHASE_GLNAME IS NULL
            AND a.userid = p_userid;

      --Purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Purchase Ledger Name of the Purchase Sub-ledger  SLID is not matching with given Purchase Ledger Name / Subledger not applicable for the Sales Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.PURCHASE_SLID , a1.PURCHASE_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.PURCHASE_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a
			LEFT OUTER JOIN  	
				(SELECT a1.PURCHASE_SLID  SLID, a1.PURCHASE_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.PURCHASE_SLID) = UPPER(s.slid)
                    AND a1.PURCHASE_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
					
ON (UPPER(a.PURCHASE_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.PURCHASE_GLNAME) IS NOT NULL AND a.PURCHASE_SLID IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.PURCHASE_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.PURCHASE_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.PURCHASE_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

-- PURCHASE RETURN
      --PURCHASE_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase Return Ledger Name', clock_timestamp()
           FROM  int$stg_custimport a
LEFT OUTER JOIN fingl b ON (UPPER(a.PURCHASE_RETURN_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' ) --AND UPPER (a.saletype) = 'CONSIGNMENT'
  AND a.PURCHASE_RETURN_GLNAME IS NOT NULL AND a.userid = p_userid;

    --purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Purchase Return Subledger SLID should be null as Purchase Return Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.PURCHASE_RETURN_SLID IS NOT NULL
            AND a.PURCHASE_RETURN_GLNAME IS NULL
            AND a.userid = p_userid;

      --Purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Purchase Return Ledger Name of the Purchase Sub-ledger  SLID is not matching with given Purchase Ledger Name / Subledger not applicable for the Sales Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.PURCHASE_RETURN_SLID , a1.PURCHASE_RETURN_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.PURCHASE_RETURN_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a 
		  LEFT OUTER JOIN 
				(SELECT a1.PURCHASE_RETURN_SLID  SLID, a1.PURCHASE_RETURN_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.PURCHASE_RETURN_SLID) = UPPER(s.slid)
                    AND a1.PURCHASE_RETURN_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
ON (UPPER(a.PURCHASE_RETURN_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.PURCHASE_RETURN_GLNAME) IS NOT NULL AND a.PURCHASE_RETURN_SLID IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --purchase_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Purchase Return Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.PURCHASE_RETURN_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.PURCHASE_RETURN_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.PURCHASE_RETURN_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

-- consignment
    --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transfer in Ledger Name', clock_timestamp()
           FROM  int$stg_custimport a 
LEFT OUTER JOIN fingl b ON (UPPER(a.CONSIGNMENT_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' or ( b.type not in ('I','E'))) AND UPPER(a.saletype) = 'CONSIGNMENT' AND a.CONSIGNMENT_GLNAME IS NOT NULL AND a.userid = p_userid;

      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transfer in Ledger Name', clock_timestamp()
           FROM int$stg_custimport a
          WHERE  UPPER(a.saletype) = 'CONSIGNMENT'
            AND a.CONSIGNMENT_GLNAME IS NULL
            AND a.userid = p_userid;

      --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transfer in Ledger Name.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (UPPER(a.saletype) = 'OUTRIGHT' AND a.CONSIGNMENT_GLNAME IS NOT NULL )
            AND a.userid = p_userid;

    --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Transfer in Subledger SLID should be null as Transfer in Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.CONSIGNMENT_SL_SLID IS NOT  NULL
            AND a.CONSIGNMENT_GLNAME IS NULL
            AND a.userid = p_userid;

      --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Transfer in Name of the Sub-ledger  SLID is not matching with given  Ledger Name / Subledger not applicable for the Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.CONSIGNMENT_SL_SLID , a1.CONSIGNMENT_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.CONSIGNMENT_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a
		   LEFT OUTER JOIN 
		   (SELECT a1.CONSIGNMENT_SL_SLID  SLID, a1.CONSIGNMENT_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.CONSIGNMENT_SL_SLID) = UPPER(s.slid)
                    AND a1.CONSIGNMENT_SL_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
ON (UPPER(a.CONSIGNMENT_SL_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.CONSIGNMENT_GLNAME) IS NOT NULL AND a.CONSIGNMENT_SL_SLID IS NOT NULL AND a.CONSIGNMENT_GLNAME IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transfer in Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.CONSIGNMENT_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.CONSIGNMENT_SL_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.CONSIGNMENT_SL_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

-- TRANSIT
    --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transit Ledger Name', clock_timestamp()
           FROM  int$stg_custimport a 
LEFT OUTER JOIN fingl b ON (UPPER(a.TRANSIT_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' or ( b.type not in ('A','L'))) AND UPPER(a.saletype) = 'CONSIGNMENT' AND a.TRANSIT_GLNAME IS NOT NULL AND a.userid = p_userid;

      --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transit Ledger Name.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (UPPER(a.saletype) = 'OUTRIGHT' AND a.TRANSIT_GLNAME IS NOT NULL )
            AND a.userid = p_userid;

    --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Transit Subledger SLID should be null as Transit Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.TRANSIT_SL_SLID IS NOT  NULL
            AND a.TRANSIT_GLNAME IS  NULL
            AND a.userid = p_userid;

      --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Transit Name of the Sub-ledger  SLID is not matching with given TransitSales Ledger Name / Subledger not applicable for the Sales Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.TRANSIT_SL_SLID , a1.TRANSIT_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.TRANSIT_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a 
		LEFT OUTER JOIN  (SELECT a1.TRANSIT_SL_SLID  SLID, a1.TRANSIT_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.TRANSIT_SL_SLID) = UPPER(s.slid)
                    AND a1.TRANSIT_SL_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
ON (UPPER(a.TRANSIT_SL_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.TRANSIT_GLNAME) IS NOT NULL AND a.TRANSIT_SL_SLID IS NOT NULL AND a.TRANSIT_GLNAME IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transit Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.TRANSIT_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.TRANSIT_SL_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.TRANSIT_SL_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

-- TRANSIT DIFF
    --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transit Diff. Ledger Name', clock_timestamp()
           FROM int$stg_custimport a 
LEFT OUTER JOIN fingl b ON (UPPER(a.TRANSITDIFF_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' or ( b.type not in ('A','L'))) AND UPPER(a.saletype) = 'CONSIGNMENT' AND a.TRANSITDIFF_GLNAME IS NOT NULL AND a.userid = p_userid;

      --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transit Diff. Ledger Name.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (UPPER(a.saletype) = 'OUTRIGHT' AND a.TRANSITDIFF_GLNAME IS NOT NULL )
            AND a.userid = p_userid;

    --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Transit Diff. Subledger SLID should be null as Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.TRANSITDIFF_SL_SLID IS NOT  NULL
            AND a.TRANSITDIFF_GLNAME IS  NULL
            AND a.userid = p_userid;

      --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' Transit Diff. Name of the Sales Sub-ledger  SLID is not matching with given Ledger Name / Subledger not applicable for the Sales Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.TRANSITDIFF_SL_SLID , a1.TRANSITDIFF_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.TRANSITDIFF_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a
			LEFT OUTER JOIN 	
				(SELECT a1.TRANSITDIFF_SL_SLID  SLID, a1.TRANSITDIFF_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.TRANSITDIFF_SL_SLID) = UPPER(s.slid)
                    AND a1.TRANSITDIFF_SL_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
ON (UPPER(a.TRANSITDIFF_SL_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.TRANSITDIFF_GLNAME) IS NOT NULL AND a.TRANSITDIFF_SL_SLID IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transit Diff. Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.TRANSITDIFF_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.TRANSITDIFF_SL_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.TRANSITDIFF_SL_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

----- VAT EXP
   --GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid VAT expenses Ledger Name', clock_timestamp()
           FROM int$stg_custimport a 
LEFT OUTER JOIN fingl b ON (UPPER(a.VATEXP_GLNAME) = UPPER(b.glname))
WHERE (b.glname IS NULL OR b.srctype <> 'G' OR coalesce(b.ext, 'N') = 'Y' or ( b.type not in ('I','E'))) AND UPPER(a.SALE_POST_METHOD) = 'TAX INCLUSIVE' AND UPPER(a.saletype) = 'CONSIGNMENT' AND a.VATEXP_GLNAME IS NOT NULL AND a.userid = p_userid;

      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid VAT expenses Ledger Name.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ((trim(both UPPER(a.SALE_POST_METHOD)) = 'TAX EXCLUSIVE' OR UPPER(a.saletype) = 'OUTRIGHT' ) AND a.VATEXP_GLNAME IS NOT NULL )
            AND a.userid = p_userid;

      --SALES_GLNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid VAT expenses Ledger Name.', clock_timestamp()
           FROM int$stg_custimport a,FINSL B
          WHERE A.SLCODE IS NOT NULL
          AND   B.SLCODE = A.SLCODE
          AND   ((trim(both UPPER(B.SALE_POST_METHOD)) = 'E' OR UPPER(a.saletype) = 'O' ) AND a.VATEXP_GLNAME IS NOT NULL )
            AND a.userid = p_userid;

    --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'VAT expenses Subledger SLID should be null as Consignment VAT expenses Ledger Name not provided.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE a.VATEXP_SL_SLID IS NOT NULL
            AND a.VATEXP_GLNAME IS NULL
            AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', ' VAT expenses Ledger Name of the Sales Sub-ledger  SLID is not matching with given Ledger Name / Subledger not applicable for the Ledger Name./ Extinct.', clock_timestamp()
           FROM ( SELECT b1.glcode glcode ,a1.VATEXP_SL_SLID , a1.VATEXP_GLNAME ,lineno,userid,SLAPP
                  from  int$stg_custimport a1,
                        fingl b1
                  where UPPER(a1.VATEXP_GLNAME) = UPPER(b1.glname)
                  AND a1.userid = p_userid
                ) a
			LEFT OUTER JOIN 	
				(SELECT a1.VATEXP_SL_SLID  SLID, a1.VATEXP_GLNAME glname,
                        fgl.glcode
                   FROM finsl_gl fgl, finsl s, int$stg_custimport a1
                  WHERE s.slcode = fgl.slcode
                    AND UPPER(a1.VATEXP_SL_SLID) = UPPER(s.slid)
                    AND a1.VATEXP_SL_SLID IS NOT NULL
                    AND a1.userid = p_userid
                    AND coalesce(fgl.ext, 'N') = 'N'
                    AND coalesce(s.ext, 'N') = 'N') fgl
ON (UPPER(a.VATEXP_SL_SLID) = UPPER(fgl.slid))
WHERE UPPER(a.VATEXP_GLNAME) IS NOT NULL AND a.VATEXP_SL_SLID IS NOT NULL  AND fgl.glcode IS NULL AND coalesce(a.SLAPP,'N') ='Y' AND a.userid = p_userid;

      --SALES_SL_SLID Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid VAT expenses Sales Sub-Ledger ', clock_timestamp()
           FROM int$stg_custimport a, fingl b
          WHERE UPPER(a.VATEXP_GLNAME) = UPPER(b.glname)
            AND b.glname IS NOT NULL
            AND (   (a.VATEXP_SL_SLID IS NULL AND coalesce(slapp, 'N') = 'Y')
                 OR (a.VATEXP_SL_SLID IS NOT NULL AND coalesce(slapp, 'N') = 'N')
                )
            AND a.userid = p_userid;

-- START REV : 001
      --CREDIT_VERIFICATION_RULE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Credit Data Validation', 'Invalid value. Allowed values are L, O, B, N.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.CREDIT_VERIFICATION_RULE) NOT IN ('L','B','N','O')
            AND CREDIT_VERIFICATION_RULE IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

       --CREDIT_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Credit Data Validation', 'Allowed credit limit is between 0 - 999999999999.99', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( coalesce(A.CREDIT_LIMIT,0) < 0 OR coalesce(A.CREDIT_LIMIT,0) > 999999999999.99 )
            AND a.userid = p_userid;

       --CREDIT_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Mandatory Validation', 'Credit Limit is required if credit verification rule applies on credit limit.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE A.CREDIT_LIMIT IS NULL
          AND UPPER(a.CREDIT_VERIFICATION_RULE) IN ('L','B')
            AND a.userid = p_userid;

       --CREDIT_TOLERANCE
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Credit Data Validation', 'Allowed credit limit tolerance % is between 0.01 - 100.00.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( coalesce(A.CREDIT_LIMIT_TOLERANCE,0) < .01 OR coalesce(A.CREDIT_LIMIT_TOLERANCE,0) > 100 )
          AND    A.CREDIT_LIMIT_TOLERANCE IS NOT NULL
            AND a.userid = p_userid;

       --MAX_CREDIT_OVERDUE_DAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Credit Data Validation', 'Allowed Max. overdue days is between 0 - 9999.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( coalesce(A.MAX_CREDIT_OVERDUE_DAYS,0) < 0 OR coalesce(A.MAX_CREDIT_OVERDUE_DAYS,0) > 9999 )
          AND    MAX_CREDIT_OVERDUE_DAYS IS NOT NULL
            AND a.userid = p_userid;

       --MAX_CREDIT_OVERDUE_DAYS
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Mandatory Validation', 'Max. Overdue Days is required if credit verification rule applies on Overdue.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE A.MAX_CREDIT_OVERDUE_DAYS IS NULL
          AND UPPER(a.CREDIT_VERIFICATION_RULE) IN ('O','B')
            AND a.userid = p_userid;

       --CREDIT_OVERDUE_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Credit Data Validation', 'Allowed overdue limit is between 0 - 999999999.99', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( coalesce(A.CREDIT_OVERDUE_LIMIT,0) < 0 OR coalesce(A.CREDIT_OVERDUE_LIMIT,0) > 999999999.99 )
            AND a.userid = p_userid;

       --CREDIT_OVERDUE_LIMIT
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Mandatory Validation', 'Overdue Amount is required if credit verification rule applies on Overdue.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE A.CREDIT_OVERDUE_LIMIT IS NULL
          AND UPPER(a.CREDIT_VERIFICATION_RULE) IN ('O','B')
            AND a.userid = p_userid;

-- END REV : 001
/*****************************/

     -- Transfer in ledger, Consignment Sales Ledger  Trasnfer Out Ledger can not be same
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Transfer in ledger, Consignment Sales Ledger  Trasnfer Out Ledger can not be same ', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (   (upper(CONSIGNMENT_SALES_GLNAME) = UPPER(CONSIGNMENT_GLNAME) )
                    OR (upper(CONSIGNMENT_SALES_GLNAME) = UPPER(CONSIGNMENT_TRNSFR_GLNAME))
                    OR (upper(CONSIGNMENT_TRNSFR_GLNAME) = UPPER(CONSIGNMENT_GLNAME))
                )
            AND a.userid = p_userid;

/******************************/

      --TRP ID  Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Transporter ID ', clock_timestamp()
           FROM int$stg_custimport a 
LEFT OUTER JOIN (SELECT SLID
                 FROM  finsl b,ADMCLS CS
                 WHERE B.CLSCODE = CS.CLSCODE
                 AND   CS.CLSTYPE = 'T'
                 AND   CS.EXT = 'N'
                 AND   B.EXT = 'N'
                ) b ON (UPPER(a.TRPID) = UPPER(b.slid))
WHERE b.slid IS NULL AND a.TRPID IS NOT NULL AND a.userid = p_userid;

      --PAN NO Validation
     /* INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid PAN.', SYSDATE
           FROM int$stg_custimport a
          WHERE (a.pan IS NULL AND a.tds_app = 'Yes') AND a.userid = p_userid;
*/
      --LGT APPL Validation
   /*   INSERT INTO int$error_log
                  (code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT int$error_log_code.NEXTVAL, lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Invalid Bale wise LR Quantity \ Shipment Tracking Applicable', SYSDATE
           FROM int$stg_custimport a
          WHERE UPPER (a.lgt_appl) = 'NO'
            AND (   UPPER (a.shipment_tracking_appl) = 'YES'
                 OR UPPER (a.bale_wise_lrqty) = 'YES'
                )
            AND a.userid = p_userid;*/
      --LGT APPL Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Goods Inward Logistics.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.lgt_appl) NOT IN ('YES', 'NO')
          AND  lgt_appl IS NOT NULL -- REV : 003
                AND a.userid = p_userid;

      --PERMIT_APPL
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Permit Applicable.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ((UPPER(a.permit_appl) NOT IN ('YES', 'NO') AND a.permit_appl IS NOT NULL ) -- REV : 003
                 or (
                 UPPER(a.lgt_appl) = 'NO'
                 AND upper(permit_appl)  = 'YES'
                 )
                )
            AND a.userid = p_userid;

      --OUT_LGT_APPL
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Out Logistics Applicable.',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.out_lgt_appl) NOT IN ('YES', 'NO')
          AND out_lgt_appl IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      --OUT_PERMIT_APPL
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Out Permit Applicable.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE ((UPPER(a.OUT_permit_appl) NOT IN ('YES', 'NO') AND OUT_permit_appl IS NOT NULL) -- REV : 003
                 or (
                 UPPER(a.OUT_lgt_appl) = 'NO'
                 AND upper(OUT_PERMIT_APPL)  = 'YES'
                 )
                )
            AND a.userid = p_userid;

      --GATEIN_APPL
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Gate entry Applicable.', clock_timestamp()
           FROM int$stg_custimport a
          WHERE UPPER(a.gatein_appl) NOT IN ('YES', 'NO')
          AND  gatein_appl IS NOT NULL -- REV : 003
            AND a.userid = p_userid;

      -- Shipment Tracking Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Shipment Tracking Applicable',
                clock_timestamp()
           FROM int$stg_custimport a
          WHERE ( (UPPER(shipment_tracking_appl) = 'YES' AND UPPER(lgt_appl) = 'NO')
                 OR (UPPER(a.shipment_tracking_appl) NOT IN ('YES', 'NO') AND shipment_tracking_appl IS NOT NULL) -- REV : 003
                )
            AND a.userid = p_userid;

      -- Invalid Bale wise LR Quantity
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Bale wise LR Quantity', clock_timestamp()
           FROM int$stg_custimport a
          WHERE (
                    (UPPER(bale_wise_lrqty) = 'YES' AND UPPER(lgt_appl) = 'NO')
                   OR ( UPPER(a.bale_wise_lrqty) NOT IN ('YES', 'NO') AND bale_wise_lrqty IS NOT NULL) -- REV : 003
                )
            AND a.userid = p_userid;

      --TAXGRPNAME Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid,
                'Data Validation', 'Invalid Currency name.', clock_timestamp()
           FROM int$stg_custimport a 
LEFT OUTER JOIN fintaxmain b ON (UPPER(a.TAXGRPNAME) = UPPER(b.TAXNAME))
WHERE (b.TAXNAME IS NULL OR coalesce(b.EXT,'N') ='Y' ) AND a.TAXGRPNAME IS NOT NULL AND a.userid = p_userid;

--BULK COLLECT 7============================================================================================================================
-- START REV : 002
	DECLARE
		V_COUNT BIGINT;
		V_CTID_GLNAME TYPE_V_CTID_GLNAME[];
	BEGIN
		V_COUNT := 0;
			LOOP
			V_CTID_GLNAME := '{}';
			SELECT ARRAY_AGG(t)
					STRICT INTO V_CTID_GLNAME
					FROM 
					(SELECT CTID,GLNAME FROM
					(SELECT A.CTID     CTID,
						GL.GLNAME   GLNAME,ROW_NUMBER() OVER () AS RN
					   FROM    int$STG_CUSTIMPORT  A,
						FINSL               SL,
						FINGL               GL
				WHERE   A.USERID = P_USERID
				AND     A.SLCODE = SL.SLCODE
				AND     SL.GLCODE= GL.GLCODE
				AND     A.SLCODE IS NOT NULL)T1
					WHERE T1.RN    > V_COUNT    
					LIMIT 100)t;
				   
				IF ARRAY_LENGTH(V_CTID_GLNAME,1) IS NULL THEN
					EXIT; 
				END IF;
				
				FOR i IN ARRAY_LOWER(V_CTID_GLNAME, 1)..ARRAY_UPPER(V_CTID_GLNAME, 1)
					LOOP
					 
					UPDATE  INT$STG_CUSTIMPORT B
					SET     B.GL_NAME   = V_CTID_GLNAME[i].GLNAME
					WHERE   B.CTID     = V_CTID_GLNAME[i].CTID;
					
					V_COUNT := V_COUNT + 1;
					V_COUNT := V_COUNT + 1;
				END LOOP;
			END LOOP;
		END;
/*
      
	  
      DECLARE
            C2 CURSOR FOR
            SELECT  A.ctid     RWID,
                    GL.GLNAME   GLNAME
            FROM    int$STG_CUSTIMPORT  A,
                    FINSL               SL,
                    FINGL               GL
            WHERE   A.USERID = P_USERID
            AND     A.SLCODE = SL.SLCODE
            AND     SL.GLCODE= GL.GLCODE
            AND     A.SLCODE IS NOT NULL;

            V_GLNAME    DBMS_SQL.VARCHAR2_TABLE;
            V_RWID      DBMS_SQL.UROWID_TABLE;
      BEGIN
            OPEN C2;
            LOOP
                FETCH C2 BULK COLLECT INTO V_RWID,V_GLNAME LIMIT 100;
                EXIT WHEN V_RWID.COUNT = 0;
                FORALL I IN V_RWID.FIRST..V_RWID.COUNT

                UPDATE  INT$STG_CUSTIMPORT B
                SET     B.GL_NAME   = V_GLNAME(I)
                WHERE   B.ROWID     = V_RWID(I);

            END LOOP;
            CLOSE C2;
      END;
      
	  
*/
-- END REV : 002
        -- start rev : 006
        -- GST category validation
        insert into int$error_log(code, lineno, classname, userid, errortype, errordesc,createdon)
        SELECT  nextval('int$error_log_code'), lineno, 'CUSTIMPORT', userid, 'Data Validation', 'Invalid GST Category', clock_timestamp()
        FROM int$stg_custimport a
LEFT OUTER JOIN (
                    SELECT  upper(gc.name) cat_name
                    from    admgstcategory gc
                ) gst_cat ON (upper(a.gst_category) = gst_cat.cat_name)
WHERE a.gst_category is not null and gst_cat.cat_name is null and a.userid = p_userid;
        -- end rev : 006
      --COMMIT;

      -- Check whether records are valid or not
      BEGIN
         SELECT 'S'
           INTO STRICT v_status

          WHERE EXISTS (SELECT 'S'
                          FROM int$error_log
                         WHERE userid = p_userid);

         RETURN('0');
      EXCEPTION
         WHEN no_data_found
         THEN
            RETURN('1');
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code, lineno, classname, userid,
                      errortype, errordesc, createdon
                     )
              VALUES (nextval('int$error_log_code'), 0, 'CUSTIMPORT', p_userid,
                      errcode, errmsg, clock_timestamp()
                     );

         --COMMIT;
         RETURN('0');
   END;
"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

