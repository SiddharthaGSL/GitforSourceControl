function "main"."t_fingl_aud$fingl()" {
  text = """

DECLARE
    V_RECORD_OLD AUD_FINGL%ROWTYPE;
	V_RECORD_NEW AUD_FINGL%ROWTYPE;
    V_SID DOUBLE PRECISION;
    V_TRNID CHARACTER VARYING(50);
    V_ACTION CHARACTER VARYING(10);
    I RECORD;    
	V_AUDIT_USER CHARACTER VARYING (100);
	V_LOGINUSER  CHARACTER VARYING (100);
	V_PROGRAM    CHARACTER VARYING (100);
	V_REC_COUNT  BIGINT; 
   
BEGIN
       SELECT current_setting('audit.AUDIT_USER', true) INTO V_AUDIT_USER;
	   IF NULLIF(V_AUDIT_USER,'') IS NOT NULL THEN  
		   BEGIN
				SELECT FULLNAME
				INTO   STRICT V_LOGINUSER
				FROM   APPUSER
				WHERE  ID =  substring (V_AUDIT_USER,8,position(';' in V_AUDIT_USER)-8)::NUMERIC; 
		   EXCEPTION
				WHEN no_data_found
				THEN
					V_LOGINUSER := 'System';
			END;			
		ELSE
			V_LOGINUSER := 'SYSTEM';
		END IF;
	   
	   select application_name
	   INTO   V_PROGRAM
	   from pg_stat_activity where pid = pg_backend_pid();

       V_ACTION:=TG_OP;
	   
       SELECT TXID_CURRENT() INTO V_TRNID;
       
        IF TG_OP = 'INSERT' OR  TG_OP = 'UPDATE' THEN 
	   
           V_RECORD_NEW.ACTION := V_ACTION;
           V_RECORD_NEW.ACTION_SUBTYPE := 'NEW';
           V_RECORD_NEW.TRANSACTION_ID := V_TRNID::TEXT;		   
		   V_RECORD_NEW.glcode := NEW.glcode;
            V_RECORD_NEW.glname := NEW.glname;
            V_RECORD_NEW.abbre := NEW.abbre;
            V_RECORD_NEW.type := NEW.type;
            V_RECORD_NEW.grpcode := NEW.grpcode;
            V_RECORD_NEW.addr := NEW.addr;
            V_RECORD_NEW.ctname := NEW.ctname;
            V_RECORD_NEW.pin := NEW.pin;
            V_RECORD_NEW.ph1 := NEW.ph1;
            V_RECORD_NEW.ph2 := NEW.ph2;
            V_RECORD_NEW.ph3 := NEW.ph3;
            V_RECORD_NEW.ph4 := NEW.ph4;
            V_RECORD_NEW.fx1 := NEW.fx1;
            V_RECORD_NEW.fx2 := NEW.fx2;
            V_RECORD_NEW.email := NEW.email;
            V_RECORD_NEW.website := NEW.website;
            V_RECORD_NEW.cp := NEW.cp;
            V_RECORD_NEW.lstno := NEW.lstno;
            V_RECORD_NEW.cstno := NEW.cstno;
            V_RECORD_NEW.pan := NEW.pan;
            V_RECORD_NEW.intrate := NEW.intrate;
            V_RECORD_NEW.srctype := NEW.srctype;
            V_RECORD_NEW.costapp := NEW.costapp;
            V_RECORD_NEW.brsamt := NEW.brsamt;
            V_RECORD_NEW.ext := NEW.ext;
            V_RECORD_NEW.tdssrccode := NEW.tdssrccode;
            V_RECORD_NEW.chqlabel := NEW.chqlabel;
            V_RECORD_NEW.cmpcode := NEW.cmpcode;
            V_RECORD_NEW.slapp := NEW.slapp;
            V_RECORD_NEW.admsite_code_owner := NEW.admsite_code_owner;
            V_RECORD_NEW.glseq := NEW.glseq;
          END IF;  
            
         IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN 
	   
            V_RECORD_OLD.ACTION := V_ACTION;
            V_RECORD_OLD.ACTION_SUBTYPE := 'OLD';
            V_RECORD_OLD.TRANSACTION_ID := V_TRNID::TEXT;			
			V_RECORD_OLD.glcode := OLD.glcode;
            V_RECORD_OLD.glname := OLD.glname;
            V_RECORD_OLD.abbre := OLD.abbre;
            V_RECORD_OLD.type := OLD.type;
            V_RECORD_OLD.grpcode := OLD.grpcode;
            V_RECORD_OLD.addr := OLD.addr;
            V_RECORD_OLD.ctname := OLD.ctname;
            V_RECORD_OLD.pin := OLD.pin;
            V_RECORD_OLD.ph1 := OLD.ph1;
            V_RECORD_OLD.ph2 := OLD.ph2;
            V_RECORD_OLD.ph3 := OLD.ph3;
            V_RECORD_OLD.ph4 := OLD.ph4;
            V_RECORD_OLD.fx1 := OLD.fx1;
            V_RECORD_OLD.fx2 := OLD.fx2;
            V_RECORD_OLD.email := OLD.email;
            V_RECORD_OLD.website := OLD.website;
            V_RECORD_OLD.cp := OLD.cp;
            V_RECORD_OLD.lstno := OLD.lstno;
            V_RECORD_OLD.cstno := OLD.cstno;
            V_RECORD_OLD.pan := OLD.pan;
            V_RECORD_OLD.intrate := OLD.intrate;
            V_RECORD_OLD.srctype := OLD.srctype;
            V_RECORD_OLD.costapp := OLD.costapp;
            V_RECORD_OLD.brsamt := OLD.brsamt;
            V_RECORD_OLD.ext := OLD.ext;
            V_RECORD_OLD.tdssrccode := OLD.tdssrccode;
            V_RECORD_OLD.chqlabel := OLD.chqlabel;
            V_RECORD_OLD.cmpcode := OLD.cmpcode;
            V_RECORD_OLD.slapp := OLD.slapp;
            V_RECORD_OLD.admsite_code_owner := OLD.admsite_code_owner;
            V_RECORD_OLD.glseq := OLD.glseq;
          END IF;  

    IF TG_OP = 'INSERT' THEN
	    V_REC_COUNT := 1;
        INSERT INTO AUD_FINGL SELECT V_RECORD_NEW.*;
    END IF;

    IF TG_OP = 'UPDATE' THEN
	FOR I IN (
		SELECT 
		V_RECORD_OLD.glseq,
                  V_RECORD_OLD.admsite_code_owner,
                  V_RECORD_OLD.slapp,
                  V_RECORD_OLD.chqlabel,
                  V_RECORD_OLD.tdssrccode,
                  V_RECORD_OLD.ext,
                  V_RECORD_OLD.brsamt,
                  V_RECORD_OLD.costapp,
                  V_RECORD_OLD.srctype,
                  V_RECORD_OLD.intrate,
                  V_RECORD_OLD.pan,
                  V_RECORD_OLD.cstno,
                  V_RECORD_OLD.lstno,
                  V_RECORD_OLD.cp,
                  V_RECORD_OLD.website,
                  V_RECORD_OLD.email,
                  V_RECORD_OLD.fx2,
                  V_RECORD_OLD.fx1,
                  V_RECORD_OLD.ph4,
                  V_RECORD_OLD.ph3,
                  V_RECORD_OLD.ph2,
                  V_RECORD_OLD.ph1,
                  V_RECORD_OLD.pin,
                  V_RECORD_OLD.ctname,
                  V_RECORD_OLD.addr,
                  V_RECORD_OLD.grpcode,
                  V_RECORD_OLD.type,
                  V_RECORD_OLD.abbre,
                  V_RECORD_OLD.glname
		EXCEPT
		SELECT 
		V_RECORD_NEW.glseq,
                  V_RECORD_NEW.admsite_code_owner,
                  V_RECORD_NEW.slapp,
                  V_RECORD_NEW.chqlabel,
                  V_RECORD_NEW.tdssrccode,
                  V_RECORD_NEW.ext,
                  V_RECORD_NEW.brsamt,
                  V_RECORD_NEW.costapp,
                  V_RECORD_NEW.srctype,
                  V_RECORD_NEW.intrate,
                  V_RECORD_NEW.pan,
                  V_RECORD_NEW.cstno,
                  V_RECORD_NEW.lstno,
                  V_RECORD_NEW.cp,
                  V_RECORD_NEW.website,
                  V_RECORD_NEW.email,
                  V_RECORD_NEW.fx2,
                  V_RECORD_NEW.fx1,
                  V_RECORD_NEW.ph4,
                  V_RECORD_NEW.ph3,
                  V_RECORD_NEW.ph2,
                  V_RECORD_NEW.ph1,
                  V_RECORD_NEW.pin,
                  V_RECORD_NEW.ctname,
                  V_RECORD_NEW.addr,
                  V_RECORD_NEW.grpcode,
                  V_RECORD_NEW.type,
                  V_RECORD_NEW.abbre,
                  V_RECORD_NEW.glname
			 )
	LOOP
	  V_REC_COUNT := 1; 
		INSERT INTO AUD_FINGL SELECT V_RECORD_OLD.*;
       INSERT INTO AUD_FINGL SELECT V_RECORD_NEW.*;    
	END LOOP;   
    END IF;

    IF TG_OP = 'DELETE' THEN
		V_REC_COUNT := 1;
		INSERT INTO AUD_FINGL SELECT V_RECORD_OLD.*;
    END IF;
	
	IF V_REC_COUNT >  0
	THEN
	   BEGIN
            INSERT INTO AUD_TRANSACTION (TRANSACTION_ID, TRANSACTION_DATE, LOGIN_USER, PROGRAM, MODULE_SHORTCODE, MODULE_TYPE)
            VALUES (V_TRNID,   current_date,V_LOGINUSER, V_PROGRAM, 'AccountsLedger', 'Ledger');
       EXCEPTION WHEN unique_violation THEN
            NULL;
       END;  

       BEGIN  
             INSERT INTO AUD_TRANSACTION_TABLE (TRANSACTION_ID, TABLE_NAME)
             VALUES (V_TRNID,  'FINGL');
       EXCEPTION WHEN unique_violation THEN
             NULL;
       END; 
	END IF;   
    

    IF TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    EXCEPTION
        WHEN others THEN
            CALL main.erraudit(SESSION_USER::text, 'T_FINGL_AUD'::CHARACTER, SQLSTATE::text, SQLERRM);
			RAISE;
			RETURN NULL;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

