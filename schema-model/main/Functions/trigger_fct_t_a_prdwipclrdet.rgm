function "main"."trigger_fct_t_a_prdwipclrdet()" {
  text = """

/******************************************************************************
   NAME: T_A_PRDWIPCLRDET
   PURPOSE:
   REVISIONS:
   No.          Date            Author          Description
   ---------    ----------      --------------- -------------------------------------------------------------------
   REV : 000    04-DEC-2013     MOUSUMI         (BUG ID : 924)  V11 Production.
   REV : 001    15-JAN-2015     MANASH          (BUG ID : 1910, 1565) Available to Forward calculation from WIP Clearance should be
                                                                from production package.
   REV : 002    28-JUL-2015     MANASH          (BUG ID : XXX)  General  Production release.
   REV : 003    15-JUL-2016     MANASH          (BUG ID :19017)  Available to forward column not updated after deleting the WIP Clearence Entry.
   REV : 004    14-NOV-2017     DIPTIMAN        (TFS ID : 32259) COGS costrate related changes.
   REV : 005    09-JAN-2019     ANINDYA         (TFS ID : 6779 ) Non trading item costing related changes.
   REV : 006    04-AUG-2020     MOUSUMI         (TFS ID : MIGRATION ) MIGRATION related changes.
   REV : 007    12-APR-2022     SIDDHARTHA      (TFS ID : XXXX) Introduction of Batch Serial Code
******************************************************************************/
DECLARE
   V_PRCODE                   PRDWIPTRANS.PRCODE%TYPE;
   V_LOTCODE                  PRDWIPTRANS.LOTCODE%TYPE;
   V_MODE                     varchar(10);
   V_DUP_MODE                 varchar(10);
   V_OPERATION_SEQ            PRDWIPTRANS.OPERATION_SEQ%TYPE;
   
   V_COUNT                    bigint := 0;
   V_TXN_QTY                  PRDWIPCLRDET.QTY%TYPE := 0;
   V_PSD_QTY                  PRDWIPCLRDET.QTY%TYPE := 0;
   V_ADMSITE_CODE             PRDWIPCLRMAIN.ADMSITE_CODE%TYPE;
   V_RATE                     PRDWIPTRANS.RATE%TYPE;
   V_REFDT                    timestamp without time zone;
   V_DETAIL_CODE              INVSTOCK.DETAIL_CODE%TYPE;
   V_ENTCODE                  INVSTOCK.ENTCODE%TYPE;
   V_ENTNO                    INVSTOCK.ENTNO%TYPE;
   V_SCHEME_DOCNO             INVSTOCK.SCHEME_DOCNO%TYPE;
   V_ENTTYPE                  INVSTOCK.ENTTYPE%TYPE;
   V_YCODE                    INVSTOCK.YCODE%TYPE;
   V_REFDOCNO                 INVSTOCK.REFDOCNO%TYPE;
   V_REFPCODE                 INVSTOCK.REFPCODE%TYPE;
   V_NEW_ICODE                INVSTOCK.ICODE%TYPE;
   V_OLD_ICODE                INVSTOCK.ICODE%TYPE;
   V_NEW_QTY                  INVSTOCK.QTY%TYPE;
   V_OLD_QTY                  INVSTOCK.QTY%TYPE;
   V_NEW_RATE                 INVSTOCK.RATE%TYPE;
   V_OLD_RATE                 INVSTOCK.RATE%TYPE;
   V_LOCCODE                  INVSTOCK.LOCCODE%TYPE;
   V_REFLOCCODE               INVSTOCK.REFLOCCODE%TYPE;
   V_REFCMPCODE               INVSTOCK.REFCMPCODE%TYPE;
   V_REFGLCODE                INVSTOCK.REFGLCODE%TYPE;
   V_REFDEPTCODE              INVSTOCK.REFDEPTCODE%TYPE;
   V_REFPRCODE                INVSTOCK.REFPRCODE%TYPE;
   V_REFPKGCODE               INVSTOCK.REFPKGCODE%TYPE;
   V_REFDCCODE                INVSTOCK.REFDCCODE%TYPE;
   V_OTHER_RATE               INVSTOCK.COSTRATE%TYPE;
   V_NEW_LOCCODE              PRDWIPCLRMAIN.LOCCODE%TYPE;
   V_A2F_QTY                  PRDLOTOPERATION.AVAILABLE_TO_FORWARD%TYPE := 0;
   -- START REV : 001
   V_MAX_OP_SEQ_SAI           PRDLOTOPERATION.OPERATION_SEQ%TYPE;
   V_IS_LAST_PROCESS          char(1);
   V_PREV_SEQ                 PRDLOTOPERATION.OPERATION_SEQ%TYPE;
   -- END REV : 001
   -- START REV :: 005
   V_ADMOU_CODE               PRDWIPCLRMAIN.ADMOU_CODE%TYPE;
   -- START REV : 006
   V_ENTRY_SOURCE             varchar(25) := NULL;
   V_SID                      bigint;
   V_PROGRAM                  varchar(50);
-- END REV : 006
BEGIN
  BEGIN
   IF TG_OP = 'INSERT'
   THEN
      V_MODE := 'INSERTING';
   ELSIF TG_OP = 'UPDATE'
   THEN
      V_MODE := 'UPDATING';
   ELSIF TG_OP = 'DELETE'
   THEN
      V_MODE := 'DELETING';
   END IF;

   BEGIN
      SELECT ADMSITE_CODE,
             REFDT,
             LOCCODE,
             ENTNO,
             'PRR',
             YCODE,
             REFNO,
             CLRNO,
             -- START REV : 005
             ADMOU_CODE                                       -- END REV : 005
                       ,
             ENTRY_SOURCE
        INTO STRICT V_ADMSITE_CODE,
             V_REFDT,
             V_NEW_LOCCODE,
             V_ENTNO,
             V_ENTTYPE,
             V_YCODE,
             V_REFDOCNO,
             V_SCHEME_DOCNO,
             -- START REV : 005
             V_ADMOU_CODE                                     -- END REV : 005
                         ,
             V_ENTRY_SOURCE
        FROM PRDWIPCLRMAIN
       WHERE CODE = coalesce(NEW.WIPCLRMAIN_CODE, OLD.WIPCLRMAIN_CODE);
   EXCEPTION
      WHEN OTHERS
      THEN
         V_ADMSITE_CODE := NULL;
   END;

   -- START REV : 006
SELECT PG_BACKEND_PID() INTO STRICT V_SID;
SELECT APPLICATION_NAME INTO STRICT V_PROGRAM FROM PG_STAT_ACTIVITY WHERE PID=V_SID;

   IF     coalesce(V_ENTRY_SOURCE, 'XX') <> 'WEB'
AND not coalesce(V_PROGRAM,'XX') ILIKE '%w3wp.exe%'
   THEN
      -- END REV : 006

      IF OLD.PRC_ASSEMBLY_ICODE IS NOT NULL
      THEN
         -- START REV : 001
         IF OLD.LOTCODE IS NOT NULL
         THEN
            BEGIN
               SELECT DISTINCT 'N'
                 INTO STRICT V_IS_LAST_PROCESS
                 FROM PRDLOTOPERATION
                WHERE     LOTCODE = OLD.LOTCODE
                      AND ASSEMBLY_ICODE = OLD.PRC_ASSEMBLY_ICODE
                      AND coalesce(ASS_SAITEM_CODE, 0) =
                             coalesce(OLD.ASS_SAITEM_CODE, 0)
                      AND TRUNC(OPERATION_SEQ) > TRUNC(OLD.OPERATION_SEQ);
            EXCEPTION
               WHEN no_data_found
               THEN
                  V_IS_LAST_PROCESS := 'Y';
            END;

            BEGIN
               SELECT MAX(TRUNC(OPERATION_SEQ))
                 INTO STRICT V_PREV_SEQ
                 FROM PRDLOTOPERATION
                WHERE     LOTCODE = OLD.LOTCODE
                      AND ASSEMBLY_ICODE = OLD.PRC_ASSEMBLY_ICODE
                      AND coalesce(ASS_SAITEM_CODE, 0) =
                             coalesce(OLD.ASS_SAITEM_CODE, 0)
                      AND OPERATION_SEQ < OLD.OPERATION_SEQ
                      AND IS_STANDARD = 'Y';
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_PREV_SEQ := NULL;
            END;

            SELECT TRUNC(MAX(OPERATION_SEQ))
              INTO STRICT V_MAX_OP_SEQ_SAI
              FROM PRDLOTOPERATION
             WHERE     LOTCODE = OLD.LOTCODE
                   AND ASSEMBLY_ICODE = OLD.PRC_ASSEMBLY_ICODE
                   AND coalesce(ASS_SAITEM_CODE, 0) =
                          coalesce(OLD.ASS_SAITEM_CODE, 0);
         END IF;

         -- END REV : 001
         UPDATE PRDLOTOPERATION
            SET WIPCLR_QTY = coalesce(WIPCLR_QTY, 0) - coalesce(OLD.QTY, 0)
          WHERE     LOTCODE = OLD.LOTCODE
                AND ASSEMBLY_ICODE = OLD.PRC_ASSEMBLY_ICODE
                AND coalesce(ASS_SAITEM_CODE, 0) = coalesce(OLD.ASS_SAITEM_CODE, 0)
                AND OPERATION_SEQ = OLD.OPERATION_SEQ
                AND PRCODE = OLD.PRCODE;

         UPDATE PRDLOTOPERATION
            SET AVAILABLE_TO_FORWARD =
                   coalesce(AVAILABLE_TO_FORWARD, 0) + coalesce(OLD.QTY, 0)
          WHERE     LOTCODE = OLD.LOTCODE
                AND ASSEMBLY_ICODE = OLD.PRC_ASSEMBLY_ICODE
                AND coalesce(ASS_SAITEM_CODE, 0) = coalesce(OLD.ASS_SAITEM_CODE, 0)
                AND OPERATION_SEQ = OLD.OPERATION_SEQ
                AND PRCODE = OLD.PRCODE;
      END IF;

      IF NEW.PRC_ASSEMBLY_ICODE IS NOT NULL
      THEN
         -- START REV : 001
         IF OLD.LOTCODE IS NOT NULL
         THEN
            BEGIN
               SELECT DISTINCT 'N'
                 INTO STRICT V_IS_LAST_PROCESS
                 FROM PRDLOTOPERATION
                WHERE     LOTCODE = NEW.LOTCODE
                      AND ASSEMBLY_ICODE = NEW.PRC_ASSEMBLY_ICODE
                      AND coalesce(ASS_SAITEM_CODE, 0) =
                             coalesce(NEW.ASS_SAITEM_CODE, 0)
                      AND TRUNC(OPERATION_SEQ) > TRUNC(NEW.OPERATION_SEQ);
            EXCEPTION
               WHEN no_data_found
               THEN
                  V_IS_LAST_PROCESS := 'Y';
            END;

            BEGIN
               SELECT MAX(TRUNC(OPERATION_SEQ))
                 INTO STRICT V_PREV_SEQ
                 FROM PRDLOTOPERATION
                WHERE     LOTCODE = NEW.LOTCODE
                      AND ASSEMBLY_ICODE = NEW.PRC_ASSEMBLY_ICODE
                      AND coalesce(ASS_SAITEM_CODE, 0) =
                             coalesce(NEW.ASS_SAITEM_CODE, 0)
                      AND OPERATION_SEQ < NEW.OPERATION_SEQ
                      AND IS_STANDARD = 'Y';
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_PREV_SEQ := NULL;
            END;

            SELECT TRUNC(MAX(OPERATION_SEQ))
              INTO STRICT V_MAX_OP_SEQ_SAI
              FROM PRDLOTOPERATION
             WHERE     LOTCODE = NEW.LOTCODE
                   AND ASSEMBLY_ICODE = NEW.PRC_ASSEMBLY_ICODE
                   AND coalesce(ASS_SAITEM_CODE, 0) =
                          coalesce(NEW.ASS_SAITEM_CODE, 0);
         END IF;

         -- END REV : 001
         UPDATE PRDLOTOPERATION
            SET WIPCLR_QTY = coalesce(WIPCLR_QTY, 0) + coalesce(NEW.QTY, 0)
          WHERE     LOTCODE = NEW.LOTCODE
                AND ASSEMBLY_ICODE = NEW.PRC_ASSEMBLY_ICODE
                AND coalesce(ASS_SAITEM_CODE, 0) = coalesce(NEW.ASS_SAITEM_CODE, 0)
                AND OPERATION_SEQ = NEW.OPERATION_SEQ
                AND PRCODE = NEW.PRCODE;

         UPDATE PRDLOTOPERATION
            SET AVAILABLE_TO_FORWARD =
                   coalesce(AVAILABLE_TO_FORWARD, 0) - coalesce(NEW.QTY, 0)
          WHERE     LOTCODE = NEW.LOTCODE
                AND ASSEMBLY_ICODE = NEW.PRC_ASSEMBLY_ICODE
                AND coalesce(ASS_SAITEM_CODE, 0) = coalesce(NEW.ASS_SAITEM_CODE, 0)
                AND OPERATION_SEQ = NEW.OPERATION_SEQ
                AND PRCODE = NEW.PRCODE;
      END IF;
   END IF;                                                       -- REV  : 006

   IF     coalesce(NEW.QTY, coalesce(OLD.QTY, 0)) <> 0
      AND coalesce(NEW.WIPCLRMAIN_CODE, coalesce(OLD.WIPCLRMAIN_CODE, 0)) <> 0
   THEN
      CALL DB_PKG_PRODUCTION$POST_WIP_TRANSACTION(
         V_ADMSITE_CODE,
         V_MODE,
         'WCL',
         OLD.CODE,
         NEW.CODE,
         NEW.LOTCODE,
         NULL,
         NULL,
         NULL,
         NEW.OPERATION_SEQ,
         NULL,
         NEW.PRCODE,
         NEW.PRC_ASSEMBLY_ICODE,
         NEW.PRC_ASSEMBLY_ICODE,
         'PSD',
         0 - coalesce(NEW.QTY, 0),
         0 - coalesce(NEW.QTY, 0),
         NEW.RATE,
         NULL,
         V_REFDT,
         NEW.ASS_SAITEM_CODE,
         NEW.ASS_SAITEM_CODE,
         NEW.PRC_ASSEMBLY_ICODE,
         coalesce(NEW.WIPCLRMAIN_CODE, OLD.WIPCLRMAIN_CODE),
         -- START REV : 007
         coalesce(NEW.INVBATCH_SERIAL_CODE,OLD.INVBATCH_SERIAL_CODE)
         --END REV : 007
         );

      IF coalesce(NEW.REC_ASSEMBLY_ICODE, OLD.REC_ASSEMBLY_ICODE) IS NOT NULL
      THEN
         V_DETAIL_CODE := coalesce(NEW.CODE, OLD.CODE);
         V_ENTCODE := coalesce(NEW.WIPCLRMAIN_CODE, OLD.WIPCLRMAIN_CODE);
         V_NEW_ICODE := NEW.REC_ASSEMBLY_ICODE;
         V_OLD_ICODE := OLD.REC_ASSEMBLY_ICODE;
         V_NEW_QTY := NEW.QTY;
         V_OLD_QTY := OLD.QTY;
         V_NEW_RATE := round((NEW.RATE)::numeric, 3);
         V_OLD_RATE := round((OLD.RATE)::numeric, 3);
         V_LOCCODE := V_NEW_LOCCODE;
         V_REFPRCODE := coalesce(NEW.PRCODE, OLD.PRCODE);

         V_DUP_MODE := NULL;

         IF OLD.REC_ASSEMBLY_ICODE IS NULL
         THEN
            V_DUP_MODE := 'INSERTING';
         ELSE
            V_DUP_MODE := V_MODE;
         END IF;

         CALL DB_PKG_STOCK$REFLECT(V_DETAIL_CODE,
                               V_DUP_MODE,
                               V_ENTCODE,
                               V_ENTNO,
                               V_REFDT,
                               V_ENTTYPE,
                               V_LOCCODE,
                               V_YCODE,
                               V_NEW_ICODE,
                               V_OLD_ICODE,
                               V_NEW_QTY,
                               V_OLD_QTY,
                               V_NEW_RATE,
                               V_OLD_RATE,
                               V_REFPCODE,
                               V_REFLOCCODE,
                               V_REFCMPCODE,
                               V_REFGLCODE,
                               V_REFDEPTCODE,
                               V_REFPRCODE,
                               V_REFDOCNO,
                               V_REFPKGCODE,
                               V_REFDCCODE,
                               V_OTHER_RATE,
                               V_SCHEME_DOCNO,
                               'WCL',
                               NULL,
                               NULL,
                               V_ADMSITE_CODE,               -- START REV : 004
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               0,
                               NULL,
                               coalesce(NEW.RATE, OLD.RATE),
                               -- END REV : 004
                               -- START REV : 007
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               coalesce(NEW.INVBATCH_SERIAL_CODE,OLD.INVBATCH_SERIAL_CODE)
                               --END REV : 007
                               );

         IF     coalesce(V_ENTRY_SOURCE, 'XX') <> 'WEB'
AND not coalesce(V_PROGRAM,'XX') ILIKE '%w3wp.exe%'
         THEN
            UPDATE INVITEM
               SET RATE = round((coalesce(NEW.RATE, OLD.RATE))::numeric, 3)
             WHERE     ICODE =
                          coalesce(NEW.REC_ASSEMBLY_ICODE,
                               OLD.REC_ASSEMBLY_ICODE)
                   AND V_DUP_MODE IN ('INSERTING', 'UPDATING');

            IF V_DUP_MODE IN ('INSERTING', 'UPDATING')
            THEN
               CALL DB_PRO_UPD_LAST_IN_RATE(NEW.WIPCLRMAIN_CODE,
                                        'PRR',
                                        NEW.CODE,
                                        NEW.REC_ASSEMBLY_ICODE,
                                        V_REFDT,
                                        V_NEW_RATE,
                                        'WCL',
                                        V_ADMSITE_CODE,
                                        V_ADMOU_CODE,
                                        -- START REV : 007
                                        coalesce(NEW.INVBATCH_SERIAL_CODE,OLD.INVBATCH_SERIAL_CODE)
                                        --END REV : 007
                                        );
            END IF;
         END IF;
      END IF;
   END IF;

   INSERT INTO PRD_RATE_STAGING(TYPE,
                                 PRCODE,
                                 LOTCODE,
                                 ASSEMBLY_ICODE,
                                 OPERATION_SEQ,
                                 WIPCLR_CODE,
                                 ASS_SAITEM_CODE,
                                 TXN_TYPE,
                                 TRANMAIN_CODE,
                                 TXN_DATE,
                                 INVBATCH_SERIAL_CODE)
        VALUES (V_MODE,
                coalesce(NEW.PRCODE, OLD.PRCODE),
                coalesce(NEW.LOTCODE, OLD.LOTCODE),
                coalesce(NEW.PRC_ASSEMBLY_ICODE, OLD.PRC_ASSEMBLY_ICODE),
                coalesce(NEW.OPERATION_SEQ, OLD.OPERATION_SEQ),
                coalesce(NEW.WIPCLRMAIN_CODE, OLD.WIPCLRMAIN_CODE),
                coalesce(NEW.ASS_SAITEM_CODE, OLD.ASS_SAITEM_CODE),
                'WCL',
                coalesce(NEW.WIPCLRMAIN_CODE, OLD.WIPCLRMAIN_CODE),
                V_REFDT,
                -- START REV : 007
                coalesce(NEW.INVBATCH_SERIAL_CODE,OLD.INVBATCH_SERIAL_CODE)
                --END REV : 007
                );
EXCEPTION
   WHEN SQLSTATE '50001' THEN
      CALL ERRAUDIT(USER,
                'T_A_PRDWIPCLRDET',
                SQLSTATE::varchar,
                SQLERRM::text || 'Unable to find next process. Operation aborted.');
      RAISE EXCEPTION '%', 'ERROR ENCOUNTERED  '
         || 'Unable to find next process. Operation aborted.' USING ERRCODE = '45001';
   WHEN OTHERS
   THEN
      CALL ERRAUDIT(USER,
                'T_A_PRDWIPCLRDET',
                SQLSTATE::varchar,
                SQLERRM);
      RAISE EXCEPTION '%', 'ERROR ENCOUNTERED  ' || SQLSTATE::varchar || '  ' || SQLERRM USING ERRCODE = '45100';
  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

END
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

