function "main"."int$pkg_m_rangeminmax_int$pkg_m_rangeminmax_validate_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      v_status   char(1);
      errmsg     varchar(200);
      errcode    bigint;V_MAXSEQ_NO   bigint := NULL;

BEGIN
      --code  Validation
      INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'M_RANGEMINMAX', userid,
                'Data Validation', 'Site Code is mandatory.', clock_timestamp()
           FROM int$stg_M_RANGEMINMAX a
            WHERE  SITE_CODE IS NULL
            AND a.userid = p_userid;

       INSERT INTO int$error_log(code, lineno, classname, userid, errortype, errordesc,
                   createdon)
         SELECT nextval('int$error_log_code'), lineno, 'M_RANGEMINMAX', userid,
                'Data Validation', 'Assortment Code/Barcode is mandatory.', clock_timestamp()
           FROM int$stg_M_RANGEMINMAX a
            WHERE (ASSORT_CODE IS NULL AND BARCODE IS NULL)
            AND a.userid = p_userid;

        DECLARE C1 CURSOR FOR
         SELECT  '1' SEQ,
                ASSORT_CODE,
                BARCODE,
                LINENO,
                MAX_QTY,
                MIN_QTY,
                NEW_ASSORT_CODE,
                SITE_CODE
          FROM  int$stg_M_RANGEMINMAX A
          WHERE  site_code IS NOT NULL
          AND    assort_code IS NULL
          AND    barcode IS NOT NULL
          AND   USERID = P_USERID

UNION ALL

         SELECT
                '2' SEQ,
                ASSORT_CODE,
                BARCODE,
                LINENO,
                MAX_QTY,
                MIN_QTY,
                NEW_ASSORT_CODE,
                SITE_CODE
          FROM  int$stg_M_RANGEMINMAX A
          WHERE  site_code IS NOT NULL
          AND    assort_code IS NOT NULL
          AND   USERID = P_USERID;

          V_ASSORT_CODE bigint :=NULL;

        BEGIN
        FOR C2 IN C1
        LOOP

            IF C2.SEQ = '1' THEN
                 BEGIN
                            SELECT     rep_assrt.code
                            INTO STRICT     v_assort_code
                            FROM     rep_assrt
                            WHERE     rep_assrt.rep_assrt_map_code = 3
                            AND    rep_assrt.ICODE IN (SELECT ICODE FROM INVITEM WHERE BARCODE = C2.barcode OR ICODE = C2.barcode);

                            UPDATE  int$stg_M_RANGEMINMAX
                            SET     NEW_ASSORT_CODE = v_assort_code
                            WHERE   USERID = P_USERID
                            AND     LINENO = C2.LINENO;
                EXCEPTION
                        WHEN no_data_found
                        THEN
                    INSERT INTO REP_ASSRT(NAME, DISPLAY_NAME, REP_ASSRT_MAP_CODE, ISACTIVE, ICODE, DIVISION, SECTION, DEPARTMENT, ARTICLE, MRPRANGE, MRP, CNAME1, CNAME2, CNAME3, CNAME4, CNAME5, CNAME6, DESC1, DESC2, DESC3, DESC4, DESC5, DESC6)
                    SELECT '~%~%~%~%~%~%~%~%~%~%'||ICODE||'%~%~%~%~%~%~%~%~' NAME, ICODE DISPLAY_NAME, 3 REP_ASSRT_MAP_CODE,'Y' ISACTIVE, ICODE, LEV1GRPNAME DIVISION, LEV2GRPNAME SECTION, GRPNAME DEPARTMENT, ARTICLENAME ARTICLE, NULL MRPRANGE, MRP, CNAME1, CNAME2, CNAME3, CNAME4, CNAME5, CNAME6, DESC1, DESC2, DESC3, DESC4, DESC5, DESC6
                    FROM V_ITEM
                    WHERE BARCODE = C2.barcode OR ICODE = C2.barcode;

                    SELECT     rep_assrt.code
                    INTO STRICT     v_assort_code
                    FROM     rep_assrt
                    WHERE     rep_assrt.rep_assrt_map_code = 3
                    AND    rep_assrt.ICODE IN (SELECT ICODE FROM INVITEM WHERE BARCODE = C2.barcode OR ICODE = C2.barcode);

                    UPDATE  int$stg_M_RANGEMINMAX
                    SET     NEW_ASSORT_CODE = v_assort_code
                    WHERE   USERID = P_USERID
                    AND     LINENO = C2.LINENO;

                    --COMMIT;
                END;
            ELSIF C2.SEQ = '2' THEN
                    UPDATE  int$stg_M_RANGEMINMAX
                    SET     NEW_ASSORT_CODE = assort_code
                    WHERE   USERID = P_USERID
                    AND     LINENO = C2.LINENO;
            END IF;

        END LOOP;
        END;

           --COMMIT;

      -- Check whether records are valid or not
      BEGIN
         SELECT 'S'
           INTO STRICT v_status

          WHERE EXISTS (SELECT 'S'
                          FROM int$error_log
                         WHERE userid = p_userid);

         RETURN('0');
      EXCEPTION
         WHEN no_data_found
         THEN
            RETURN('1');
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         --Error log for Oracle Internal Error
         INSERT INTO int$error_log(code, lineno, classname,
                      userid, errortype, errordesc, createdon
                     )
              VALUES (nextval('int$error_log_code'), 0, 'M_RANGEMINMAX',
                      p_userid, errcode, errmsg, clock_timestamp()
                     );

         --COMMIT;
         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

function "main"."int$pkg_m_rangeminmax_int$pkg_m_rangeminmax_validate(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

 
DECLARE
	 -- Change this to reflect the dblink connection string
    --v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
    v_srvname       name;
    v_connname      text;
    v_connstr       text;
    v_conn_result   text;
    v_query         text;

    v_ret    text;
BEGIN
	 v_srvname := 'foreign_pgbase';
    v_connname := replace(uuid_generate_v4()::text,'-','');
    v_connstr  := v_srvname;
    
    --Open the connection  
    SELECT dblink_connect(v_connname,v_connstr) 
    INTO v_conn_result;
	
	v_query := 'SELECT * FROM int$pkg_m_rangeminmax_int$pkg_m_rangeminmax_validate_atx ( ' || quote_nullable(p_userid::text) || '::bigint,' || quote_nullable(p_connect_site::text) || '::bigint,' || quote_nullable(p_logging_date::text) || '::timestamp without time zone,' || quote_nullable(p_connect_ou::text) || '::bigint )';
	SELECT * INTO v_ret FROM dblink(v_connname, v_query) AS p (ret text);

	
	 SELECT dblink_disconnect(v_connname) 
    INTO v_conn_result;
	
	RETURN v_ret;
EXCEPTION 
   WHEN OTHERS THEN
        SELECT dblink_disconnect(v_connname) 
        INTO v_conn_result;

END;
"""
  returnType = text
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

