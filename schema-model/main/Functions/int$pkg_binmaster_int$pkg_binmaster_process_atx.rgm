function "main"."int$pkg_binmaster_int$pkg_binmaster_process_atx(bigint, bigint, timestamp without time zone, bigint)" {
  text = """

DECLARE

      errmsg       varchar(500);
      vsession     varchar(100);
      vdetailtbl   varchar(1000);
      vdetailrec   varchar(500);
      errcode      bigint;
        vmaxno              bigint;
        vcount              bigint;
        v_assortmentcode    bigint;
BEGIN

   DECLARE C_BIN CURSOR FOR
   SELECT        a.BIN_NO        
                ,a.SEQ_NO            
                ,CASE WHEN UPPER(a.Allow_res) ='YES' THEN 'Y' WHEN UPPER(a.Allow_res) ='NO' THEN 'N'  ELSE 'Y' END   Allow_res      
                ,a.REMARKS          
                ,CASE WHEN UPPER(a.EXT) ='YES' THEN 'Y' WHEN UPPER(a.EXT) ='NO' THEN 'N'  ELSE 'N' END   EXT             
                ,a.BIN_CODE            
                ,a.udfstring01         
                ,a.udfstring02           
                ,a.udfstring03              
                ,a.udfstring04             
                ,a.udfstring05             
                ,a.udfstring06            
                ,a.udfstring07           
                ,a.udfstring08            
                ,a.udfstring09            
                ,a.udfstring10             
                ,a.udfnum01                
                ,a.udfnum02                
                ,a.udfnum03                
                ,a.udfnum04                
                ,a.udfnum05                
                ,a.udfdate01               
                ,a.udfdate02               
                ,a.udfdate03               
                ,a.udfdate04               
                ,a.udfdate05               
                ,a.lineno                  
                ,a.userid
                ,a.capacity
                ,p.code assortment_code
                ,i.grpcode
      FROM int$stg_binmaster a LEFT OUTER JOIN promo_assortment p
	                          ON (UPPER(A.ASSORTMENT) = UPPER(p.NAME))
                              LEFT OUTER JOIN invbingrp i
							  ON (UPPER(a.bingroupname) = UPPER(i.grpname))
      WHERE a.userid = p_userid   AND (a.bingroupname IS NULL OR i.admsite_code = p_connect_site);

     --V_MAXSEQ_NO   NUMBER(10); 
     --V_CNT         NUMBER(14) := 0;
  BEGIN
   FOR C2 IN C_BIN
    LOOP
    
    IF C2.BIN_CODE IS NULL THEN
     
            
            INSERT INTO  INVBIN(
                            ADMSITE_CODE,
                            ALLOW_PICK,
                            BINNO,
                           -- CODE,
                            CREATEDBY,
                            CREATEDON,
                            --DATAVERSION,
                            EXT,
                            ISDEFAULT,
                            LASTMODIFIEDBY,
                            LASTMODIFIEDON,
                            REMARKS,
                            SEQNO,
                            UDFDATE01,
                            UDFDATE02,
                            UDFDATE03,
                            UDFDATE04,
                            UDFDATE05,
                            UDFNUM01,
                            UDFNUM02,
                            UDFNUM03,
                            UDFNUM04,
                            UDFNUM05,
                            UDFSTRING01,
                            UDFSTRING02,
                            UDFSTRING03,
                            UDFSTRING04,
                            UDFSTRING05,
                            UDFSTRING06,
                            UDFSTRING07,
                            UDFSTRING08,
                            UDFSTRING09,
                            UDFSTRING10,
                            CAPACITY,
                            ASSORTMENT_CODE,
                            INVBINGRP_GRPCODE
                            )
            VALUES (
                            P_CONNECT_SITE,
                            coalesce(C2.ALLOW_RES,'Y'),
                            C2.BIN_NO,
                            --C2.CODE,
                            p_userid,--C2.CREATEDBY,
                            clock_timestamp(),--C2.CREATEDON,
                            --C2.DATAVERSION,
                            coalesce(C2.EXT,'N'),
                            'N',
                            p_userid ,--C2.LASTMODIFIEDBY,
                            NULL,--C2.LASTMODIFIEDON,
                            C2.REMARKS,
                            C2.SEQ_NO,
                            C2.UDFDATE01,
                            C2.UDFDATE02,
                            C2.UDFDATE03,
                            C2.UDFDATE04,
                            C2.UDFDATE05,
                            C2.UDFNUM01,
                            C2.UDFNUM02,
                            C2.UDFNUM03,
                            C2.UDFNUM04,
                            C2.UDFNUM05,
                            C2.UDFSTRING01,
                            C2.UDFSTRING02,
                            C2.UDFSTRING03,
                            C2.UDFSTRING04,
                            C2.UDFSTRING05,
                            C2.UDFSTRING06,
                            C2.UDFSTRING07,
                            C2.UDFSTRING08,
                            C2.UDFSTRING09,
                            C2.UDFSTRING10,
                            C2.CAPACITY,
                            C2.ASSORTMENT_CODE,
                            C2.GRPCODE
                         );

    ELSE
        UPDATE          INVBIN
        SET             ALLOW_PICK = coalesce(C2.ALLOW_RES,ALLOW_PICK),
                        BINNO      = coalesce(C2.BIN_NO,BINNO),
                        EXT        = coalesce(C2.EXT,EXT),
                        LASTMODIFIEDBY = p_userid,
                        LASTMODIFIEDON = clock_timestamp(),
                        REMARKS     = coalesce(C2.REMARKS,REMARKS),
                        SEQNO       = coalesce(C2.SEQ_NO,SEQNO),
                        UDFDATE01   = coalesce(C2.UDFDATE01,UDFDATE01),
                        UDFDATE02   = coalesce(C2.UDFDATE02,UDFDATE02),
                        UDFDATE03   = coalesce(C2.UDFDATE03,UDFDATE03),
                        UDFDATE04   = coalesce(C2.UDFDATE04,UDFDATE04),
                        UDFDATE05   = coalesce(C2.UDFDATE05,UDFDATE05),
                        UDFNUM01    = coalesce(C2.UDFNUM01,UDFNUM01),
                        UDFNUM02    = coalesce(C2.UDFNUM02,UDFNUM02),
                        UDFNUM03    = coalesce(C2.UDFNUM03,UDFNUM03),
                        UDFNUM04    = coalesce(C2.UDFNUM04,UDFNUM04),
                        UDFNUM05    = coalesce(C2.UDFNUM05,UDFNUM05),
                        UDFSTRING01= coalesce(C2.UDFSTRING01,UDFSTRING01),
                        UDFSTRING02= coalesce(C2.UDFSTRING02,UDFSTRING02),
                        UDFSTRING03= coalesce(C2.UDFSTRING03,UDFSTRING03),
                        UDFSTRING04= coalesce(C2.UDFSTRING04,UDFSTRING04),
                        UDFSTRING05= coalesce(C2.UDFSTRING05,UDFSTRING05),
                        UDFSTRING06= coalesce(C2.UDFSTRING06,UDFSTRING06),
                        UDFSTRING07= coalesce(C2.UDFSTRING07,UDFSTRING07),
                        UDFSTRING08= coalesce(C2.UDFSTRING08,UDFSTRING08),
                        UDFSTRING09= coalesce(C2.UDFSTRING09,UDFSTRING09),
                        UDFSTRING10= coalesce(C2.UDFSTRING10,UDFSTRING10),
                        CAPACITY= coalesce(C2.CAPACITY,CAPACITY),
                        ASSORTMENT_CODE= coalesce(C2.ASSORTMENT_CODE,ASSORTMENT_CODE),
                        INVBINGRP_GRPCODE= coalesce(C2.GRPCODE,INVBINGRP_GRPCODE)
                        
         WHERE    CODE = C2.BIN_CODE;

    END IF;

    END LOOP;
  END;
   
      -- log to be added in history table
      SELECT nextval('int$error_log_code')
        INTO STRICT vsession
;

      vdetailtbl :=
            'create table ginarchive.binmaster_'
         || vsession
         || ' as select distinct BIN_NO,SEQ_NO from int$stg_binmaster where userid ='
         || p_userid::text;

      EXECUTE vdetailtbl;
      vdetailrec := 'select count(1) from ginarchive.binmaster_' || vsession::text;
      EXECUTE vdetailrec
                   INTO STRICT vcount;

      INSERT INTO int$history(code, importedby, importedon,
                   classname, summary,
                   history_detail_tablename, history_detail_row_count
                  )
           VALUES (nextval('int$history_code'), p_userid, clock_timestamp(),
                   'BINMASTER', vcount::TEXT || ' Data updated successfully.',
                   'ginarchive.binmaster_' || vsession, vcount
                  );

      --COMMIT;
      RETURN('1');
   EXCEPTION
      WHEN OTHERS
      THEN
         errcode := SQLSTATE;
         errmsg := SQLERRM;

         -- error log for oracle internal error
         INSERT INTO int$error_log(code, lineno, classname,
                      userid, errortype, errordesc, createdon
                     )
              VALUES (nextval('int$error_log_code'), 0, 'BINMASTER',
                      p_userid, errcode, errmsg, clock_timestamp()
                     );

         --COMMIT;
         RETURN('0');
   END;

"""
  returnType = character
  arguments = <
    {
      name = p_userid
      type = bigint
      mode = IN
    }

    {
      name = p_connect_site
      type = bigint
      mode = IN
    }

    {
      name = p_logging_date
      type = timestamp without time zone
      mode = IN
    }

    {
      name = p_connect_ou
      type = bigint
      mode = IN
    }

  >
  language = plpgsql
}

