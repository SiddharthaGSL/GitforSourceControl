function "main"."trigger_fct_t_prdwipdet()" {
  text = """

/*****************************************************************************************************************************************************
   NAME: T_A_PRDJOBCNLDET
   PURPOSE:
   REVISIONS:
   No.          Date            Author          Description
   ---------    ----------      -----------     ------------------------------------------------------------------------------------------------------
   REV : 000    24-JUL-2013     MANASH          (BUG ID : 825)  V11 Production.
   REV : 001    23-JUL-2014     MANASH          (BUG ID : 1408)  Workbench.
   REV : 002    03-JUL-2015     MANASH          (BUG ID : xxx) Generic Production release
   REV : 003    10-OCT-2017     DIPTIMAN        (TFS ID : 32259) Reference family code introduced.
   REV : 004    14-NOV-2017     DIPTIMAN        (TFS ID : 32259) COGS costrate related changes.
   REV : 005    04-AUG-2020     MOUSUMI         (TFS ID : MIGRATION) MIGRATION related changes.
   REV : 006    12-APR-2022     SIDDHARTHA      (TFS ID : XXXX) Introduction of Batch Serial Code
*****************************************************************************************************************************************************/
DECLARE
   V_WIPTXN_TYPE       PRDWIPMAIN.WIPTXN_TYPE%TYPE;
   V_TYPE              varchar(100);
   V_DETAIL_CODE       INVSTOCK.DETAIL_CODE%TYPE;
   V_ENTCODE           INVSTOCK.ENTCODE%TYPE;
   V_ENTNO             INVSTOCK.ENTNO%TYPE;
   V_SCHEME_DOCNO      INVSTOCK.SCHEME_DOCNO%TYPE;
   V_ENTDT             INVSTOCK.ENTDT%TYPE;
   V_ENTTYPE           INVSTOCK.ENTTYPE%TYPE;
   V_YCODE             INVSTOCK.YCODE%TYPE;
   V_REFDOCNO          INVSTOCK.REFDOCNO%TYPE;
   V_REFPCODE          INVSTOCK.REFPCODE%TYPE;
   V_NEW_ICODE         INVSTOCK.ICODE%TYPE;
   V_OLD_ICODE         INVSTOCK.ICODE%TYPE;
   V_NEW_QTY           INVSTOCK.QTY%TYPE;
   V_OLD_QTY           INVSTOCK.QTY%TYPE;
   V_NEW_RATE          INVSTOCK.RATE%TYPE;
   V_OLD_RATE          INVSTOCK.RATE%TYPE;
   V_LOCCODE           INVSTOCK.LOCCODE%TYPE;
   V_REFLOCCODE        INVSTOCK.REFLOCCODE%TYPE;
   V_REFCMPCODE        INVSTOCK.REFCMPCODE%TYPE;
   V_REFGLCODE         INVSTOCK.REFGLCODE%TYPE;
   V_REFDEPTCODE       INVSTOCK.REFDEPTCODE%TYPE;
   V_REFPRCODE         INVSTOCK.REFPRCODE%TYPE;
   V_REFPKGCODE        INVSTOCK.REFPKGCODE%TYPE;
   V_REFDCCODE         INVSTOCK.REFDCCODE%TYPE;
   V_OTHER_RATE        INVSTOCK.COSTRATE%TYPE;
   V_OP_SEQ            PRDWIPTRANS.OPERATION_SEQ%TYPE;
   V_MAX_SEQ           PRDLOTOPERATION.OPERATION_SEQ%TYPE;
   V_ADMSITE_CODE      PRDWIPMAIN.ADMSITE_CODE%TYPE;
   V_JOBTYPE           PRDJOBMAIN.JOBTYPE%TYPE := '@';
   -- START REV : 003
   V_REF_FAMILY_CODE   INVSTOCK.REF_FAMILY_CODE%TYPE;
   -- END REV : 003
   -- START REV : 005
   V_ENTRY_SOURCE      varchar(25) := NULL;
   V_SID               bigint;
   V_PROGRAM           varchar(50);
-- END REV : 005
BEGIN
  BEGIN
   IF TG_OP = 'INSERT'
   THEN
      V_TYPE := 'INSERTING';
   ELSIF TG_OP = 'UPDATE'
   THEN
      V_TYPE := 'UPDATING';
   ELSIF TG_OP = 'DELETE'
   THEN
      V_TYPE := 'DELETING';
   END IF;

   SELECT ENTNO,
          WIPTXNNO,
          WIP_DATE,
          CASE
             WHEN WIPTXN_TYPE = 'I' THEN 'PRI'
             WHEN WIPTXN_TYPE = 'R' THEN 'PRT'
             ELSE NULL
          END,
          YCODE,
          REFNO,
          PCODE,
          PRCODE,
          WIPTXN_TYPE,
          ADMSITE_CODE,
          ENTRY_SOURCE
     INTO STRICT V_ENTNO,
          V_SCHEME_DOCNO,
          V_ENTDT,
          V_ENTTYPE,
          V_YCODE,
          V_REFDOCNO,
          V_REFPCODE,
          V_REFPRCODE,
          V_WIPTXN_TYPE,
          V_ADMSITE_CODE,
          V_ENTRY_SOURCE
     FROM PRDWIPMAIN
    WHERE CODE = coalesce(OLD.WIPTXN_CODE, NEW.WIPTXN_CODE);

   -- START REV : 005
    SELECT PG_BACKEND_PID() INTO STRICT V_SID;
    SELECT APPLICATION_NAME INTO STRICT V_PROGRAM FROM PG_STAT_ACTIVITY WHERE PID=V_SID;


   -- END REV : 005
   BEGIN
      SELECT JOBTYPE
        INTO STRICT V_JOBTYPE
        FROM PRDJOBMAIN M
       WHERE CODE = coalesce(NEW.JOBCODE, OLD.JOBCODE);
   END;

   SELECT OPERATION_SEQ
     INTO STRICT V_OP_SEQ
     FROM PRDJOBBOM
    WHERE CODE = coalesce(NEW.JOBBOM_CODE, OLD.JOBBOM_CODE);

   IF coalesce(NEW.LOTCODE, OLD.LOTCODE) IS NOT NULL
   THEN
      SELECT MAX(OPERATION_SEQ)
        INTO STRICT V_MAX_SEQ
        FROM PRDLOTOPERATION
       WHERE LOTCODE = coalesce(NEW.LOTCODE, OLD.LOTCODE);
   ELSE
      SELECT MAX(OPERATION_SEQ)
        INTO STRICT V_MAX_SEQ
        FROM PRDROUTEDET D, INVITEM I
       WHERE     I.ICODE = coalesce(NEW.ASSEMBLY_ICODE, OLD.ASSEMBLY_ICODE)
             AND I.ROUTECODE = D.ROUTECODE;
   END IF;

   -- START REV : 005
   IF     coalesce(V_ENTRY_SOURCE, 'XX') <> 'WEB'
AND not coalesce(V_PROGRAM,'XX') ILIKE '%w3wp.exe%'
   THEN
      -- END REV : 005
      -- Updating OLD Qty
      IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE'
      THEN
         -- END REV : 002
         UPDATE PRDJOBBOM B
            SET B.ISSUED_QTY =
                   CASE
                      WHEN V_WIPTXN_TYPE = 'I'
                      THEN
                         coalesce(B.ISSUED_QTY, 0) - coalesce(OLD.QTY, 0)
                      ELSE
                         B.ISSUED_QTY
                   END,
                B.RETURN_QTY =
                   CASE
                      WHEN V_WIPTXN_TYPE = 'R'
                      THEN
                         coalesce(B.RETURN_QTY, 0) - coalesce(OLD.QTY, 0)
                      ELSE
                         B.RETURN_QTY
                   END,
                B.WASTAGE_QTY =
                   CASE
                      WHEN V_WIPTXN_TYPE = 'W'
                      THEN
                         coalesce(B.WASTAGE_QTY, 0) - coalesce(OLD.QTY, 0)
                      ELSE
                         B.WASTAGE_QTY
                   END
          WHERE B.CODE = OLD.JOBBOM_CODE;
      END IF;

      --Updating NEW Qty
      IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE'
      THEN
         UPDATE PRDJOBBOM B
            SET B.ISSUED_QTY =
                   CASE
                      WHEN V_WIPTXN_TYPE = 'I'
                      THEN
                         coalesce(B.ISSUED_QTY, 0) + coalesce(NEW.QTY, 0)
                      ELSE
                         B.ISSUED_QTY
                   END,
                B.RETURN_QTY =
                   CASE
                      WHEN V_WIPTXN_TYPE = 'R'
                      THEN
                         coalesce(B.RETURN_QTY, 0) + coalesce(NEW.QTY, 0)
                      ELSE
                         B.RETURN_QTY
                   END,
                B.WASTAGE_QTY =
                   CASE
                      WHEN V_WIPTXN_TYPE = 'W'
                      THEN
                         coalesce(B.WASTAGE_QTY, 0) + coalesce(NEW.QTY, 0)
                      ELSE
                         B.WASTAGE_QTY
                   END,
                B.ISSUE_LOCCODE = NEW.WIP_LOCCODE
          WHERE B.CODE = NEW.JOBBOM_CODE;
      END IF;
   END IF;                                                        -- REV : 005
   IF V_ENTTYPE IS NOT NULL
   THEN
      V_DETAIL_CODE := coalesce(NEW.CODE, OLD.CODE);
      V_ENTCODE := coalesce(NEW.WIPTXN_CODE, OLD.WIPTXN_CODE);
      V_NEW_ICODE := NEW.COMPONENT_ICODE;
      V_OLD_ICODE := OLD.COMPONENT_ICODE;
      V_NEW_QTY := NEW.QTY;
      V_OLD_QTY := OLD.QTY;
      -- START REV : 002
      --V_LOCCODE   := :NEW.WIP_LOCCODE;
      V_LOCCODE := coalesce(NEW.WIP_LOCCODE, OLD.WIP_LOCCODE);

      -- END REV : 002
      -- START REV : 003
      IF V_ENTTYPE = 'PRI'
      THEN
         V_REF_FAMILY_CODE :=
            coalesce(NEW.REF_FAMILY_CODE, OLD.REF_FAMILY_CODE);
      END IF;

      -- END REV : 003
      -- START REV : 002
      IF V_LOCCODE IS NOT NULL AND V_WIPTXN_TYPE <> 'W'
      THEN
         -- END REV : 002
         IF V_JOBTYPE = 'AN'
         THEN
            CALL DB_PKG_STOCK$REFLECT(V_DETAIL_CODE,
                                  V_TYPE,
                                  V_ENTCODE,
                                  V_ENTNO,
                                  V_ENTDT,
                                  V_ENTTYPE,
                                  V_LOCCODE,
                                  V_YCODE,
                                  V_NEW_ICODE,
                                  V_OLD_ICODE,
                                  V_NEW_QTY,
                                  V_OLD_QTY,
                                  V_NEW_RATE,
                                  V_OLD_RATE,
                                  V_REFPCODE,
                                  V_REFLOCCODE,
                                  V_REFCMPCODE,
                                  V_REFGLCODE,
                                  V_REFDEPTCODE,
                                  V_REFPRCODE,
                                  V_REFDOCNO,
                                  V_REFPKGCODE,
                                  V_REFDCCODE,
                                  V_OTHER_RATE,
                                  V_SCHEME_DOCNO,
                                  NULL,
                                  NULL,
                                  NULL,
                                  V_ADMSITE_CODE,
                                  -- START REV : 003
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  0,
                                  V_REF_FAMILY_CODE,
                                  --END REV : 003
                                  -- START REV : 004
                                  NEW.COSTRATE,
                                  -- END REV : 004
                                  -- START REV : 006
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                  coalesce(NEW.INVBATCH_SERIAL_CODE, OLD.INVBATCH_SERIAL_CODE)
                                  -- END REV : 006
                                               );
         ELSE
            IF V_OP_SEQ <= V_MAX_SEQ
            THEN
               IF coalesce(NEW.ASSEMBLY_ICODE, OLD.ASSEMBLY_ICODE) <>
                     coalesce(NEW.COMPONENT_ICODE, OLD.COMPONENT_ICODE)
               THEN
                  CALL DB_PKG_STOCK$REFLECT(V_DETAIL_CODE,
                                        V_TYPE,
                                        V_ENTCODE,
                                        V_ENTNO,
                                        V_ENTDT,
                                        V_ENTTYPE,
                                        V_LOCCODE,
                                        V_YCODE,
                                        V_NEW_ICODE,
                                        V_OLD_ICODE,
                                        V_NEW_QTY,
                                        V_OLD_QTY,
                                        V_NEW_RATE,
                                        V_OLD_RATE,
                                        V_REFPCODE,
                                        V_REFLOCCODE,
                                        V_REFCMPCODE,
                                        V_REFGLCODE,
                                        V_REFDEPTCODE,
                                        V_REFPRCODE,
                                        V_REFDOCNO,
                                        V_REFPKGCODE,
                                        V_REFDCCODE,
                                        V_OTHER_RATE,
                                        V_SCHEME_DOCNO,
                                        NULL,
                                        NULL,
                                        NULL,
                                        V_ADMSITE_CODE,
                                        -- START REV : 003
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        0,
                                        V_REF_FAMILY_CODE,
                                        --END REV : 003
                                        -- START REV : 004
                                        NEW.COSTRATE,
                                        -- END REV : 004
                                        -- START REV : 006
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                        coalesce(NEW.INVBATCH_SERIAL_CODE, OLD.INVBATCH_SERIAL_CODE)
                                        -- END REV : 006
                                                     );
               END IF;
            ELSE
               CALL DB_PKG_STOCK$REFLECT(V_DETAIL_CODE,
                                     V_TYPE,
                                     V_ENTCODE,
                                     V_ENTNO,
                                     V_ENTDT,
                                     V_ENTTYPE,
                                     V_LOCCODE,
                                     V_YCODE,
                                     V_NEW_ICODE,
                                     V_OLD_ICODE,
                                     V_NEW_QTY,
                                     V_OLD_QTY,
                                     V_NEW_RATE,
                                     V_OLD_RATE,
                                     V_REFPCODE,
                                     V_REFLOCCODE,
                                     V_REFCMPCODE,
                                     V_REFGLCODE,
                                     V_REFDEPTCODE,
                                     V_REFPRCODE,
                                     V_REFDOCNO,
                                     V_REFPKGCODE,
                                     V_REFDCCODE,
                                     V_OTHER_RATE,
                                     V_SCHEME_DOCNO,
                                     NULL,
                                     NULL,
                                     NULL,
                                     V_ADMSITE_CODE,
                                     -- START REV : 003
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     0,
                                     V_REF_FAMILY_CODE,
                                     --END REV : 003
                                     -- START REV : 004
                                     NEW.COSTRATE,
                                     -- END REV : 004
                                     -- START REV : 006
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NULL,
                                     coalesce(NEW.INVBATCH_SERIAL_CODE, OLD.INVBATCH_SERIAL_CODE)
                                     -- END REV : 006
                                                  );
            END IF;
         END IF;
      -- START REV : 002
      END IF;
   -- END REV : 002
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      CALL ERRAUDIT(USER,
                'T_PRDWIPDET',
                SQLSTATE::varchar,
                SQLERRM);
      RAISE EXCEPTION '%', 'ERROR ENCOUNTERED  ' || SQLSTATE::varchar || '  ' || SQLERRM USING ERRCODE = '45001';
  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

END
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

