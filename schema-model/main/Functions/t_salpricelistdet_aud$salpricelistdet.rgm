function "main"."t_salpricelistdet_aud$salpricelistdet()" {
  text = """

DECLARE
    V_RECORD_OLD AUD_SALPRICELISTDET%ROWTYPE;
	V_RECORD_NEW AUD_SALPRICELISTDET%ROWTYPE;
    V_SID DOUBLE PRECISION;
    V_TRNID CHARACTER VARYING(50);
    V_ACTION CHARACTER VARYING(10);
    I RECORD;    
	V_AUDIT_USER CHARACTER VARYING (100);
	V_LOGINUSER  CHARACTER VARYING (100);
	V_PROGRAM    CHARACTER VARYING (100);
	V_REC_COUNT  BIGINT; 
   
BEGIN
       SELECT current_setting('audit.AUDIT_USER', true) INTO V_AUDIT_USER;
	   IF NULLIF(V_AUDIT_USER,'') IS NOT NULL THEN  
		   BEGIN
				SELECT FULLNAME
				INTO   STRICT V_LOGINUSER
				FROM   APPUSER
				WHERE  ID =  substring (V_AUDIT_USER,8,position(';' in V_AUDIT_USER)-8)::NUMERIC; 
		   EXCEPTION
				WHEN no_data_found
				THEN
					V_LOGINUSER := 'System';
			END;			
		ELSE
			V_LOGINUSER := 'SYSTEM';
		END IF;
	   
	   select application_name
	   INTO   V_PROGRAM
	   from pg_stat_activity where pid = pg_backend_pid();

       V_ACTION:=TG_OP;
	   
       SELECT TXID_CURRENT() INTO V_TRNID;
       
        IF TG_OP = 'INSERT' OR  TG_OP = 'UPDATE' THEN 
	   
           V_RECORD_NEW.ACTION := V_ACTION;
           V_RECORD_NEW.ACTION_SUBTYPE := 'NEW';
           V_RECORD_NEW.TRANSACTION_ID := V_TRNID::TEXT;		   
		   V_RECORD_NEW.pricelistcode := NEW.pricelistcode;
            V_RECORD_NEW.icode := NEW.icode;
            V_RECORD_NEW.effdt := NEW.effdt;
            V_RECORD_NEW.price := NEW.price;
            V_RECORD_NEW.code := NEW.code;
            V_RECORD_NEW.cmpcode := NEW.cmpcode;
            V_RECORD_NEW.division_grpcode := NEW.division_grpcode;
            V_RECORD_NEW.section_grpcode := NEW.section_grpcode;
            V_RECORD_NEW.dept_grpcode := NEW.dept_grpcode;
            V_RECORD_NEW.invarticle_code := NEW.invarticle_code;
            V_RECORD_NEW.ccode1 := NEW.ccode1;
            V_RECORD_NEW.ccode2 := NEW.ccode2;
            V_RECORD_NEW.ccode3 := NEW.ccode3;
            V_RECORD_NEW.ccode4 := NEW.ccode4;
            V_RECORD_NEW.ccode5 := NEW.ccode5;
            V_RECORD_NEW.ccode6 := NEW.ccode6;
            V_RECORD_NEW.dtfr := NEW.dtfr;
            V_RECORD_NEW.dtto := NEW.dtto;
            V_RECORD_NEW.discount_factor := NEW.discount_factor;
            V_RECORD_NEW.exception_basis := NEW.exception_basis;
            V_RECORD_NEW.pricefr := NEW.pricefr;
            V_RECORD_NEW.priceto := NEW.priceto;
            V_RECORD_NEW.priority := NEW.priority;
            V_RECORD_NEW.invbatch_serial_code := NEW.invbatch_serial_code;
            V_RECORD_NEW.batch_exp_date_fr := NEW.batch_exp_date_fr;
            V_RECORD_NEW.batch_exp_date_to := NEW.batch_exp_date_to;
          END IF;  
            
         IF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN 
	   
            V_RECORD_OLD.ACTION := V_ACTION;
            V_RECORD_OLD.ACTION_SUBTYPE := 'OLD';
            V_RECORD_OLD.TRANSACTION_ID := V_TRNID::TEXT;			
			V_RECORD_OLD.pricelistcode := OLD.pricelistcode;
            V_RECORD_OLD.icode := OLD.icode;
            V_RECORD_OLD.effdt := OLD.effdt;
            V_RECORD_OLD.price := OLD.price;
            V_RECORD_OLD.code := OLD.code;
            V_RECORD_OLD.cmpcode := OLD.cmpcode;
            V_RECORD_OLD.division_grpcode := OLD.division_grpcode;
            V_RECORD_OLD.section_grpcode := OLD.section_grpcode;
            V_RECORD_OLD.dept_grpcode := OLD.dept_grpcode;
            V_RECORD_OLD.invarticle_code := OLD.invarticle_code;
            V_RECORD_OLD.ccode1 := OLD.ccode1;
            V_RECORD_OLD.ccode2 := OLD.ccode2;
            V_RECORD_OLD.ccode3 := OLD.ccode3;
            V_RECORD_OLD.ccode4 := OLD.ccode4;
            V_RECORD_OLD.ccode5 := OLD.ccode5;
            V_RECORD_OLD.ccode6 := OLD.ccode6;
            V_RECORD_OLD.dtfr := OLD.dtfr;
            V_RECORD_OLD.dtto := OLD.dtto;
            V_RECORD_OLD.discount_factor := OLD.discount_factor;
            V_RECORD_OLD.exception_basis := OLD.exception_basis;
            V_RECORD_OLD.pricefr := OLD.pricefr;
            V_RECORD_OLD.priceto := OLD.priceto;
            V_RECORD_OLD.priority := OLD.priority;
            V_RECORD_OLD.invbatch_serial_code := OLD.invbatch_serial_code;
            V_RECORD_OLD.batch_exp_date_fr := OLD.batch_exp_date_fr;
            V_RECORD_OLD.batch_exp_date_to := OLD.batch_exp_date_to;
          END IF;  

    IF TG_OP = 'INSERT' THEN
	    V_REC_COUNT := 1;
        INSERT INTO AUD_SALPRICELISTDET SELECT V_RECORD_NEW.*;
    END IF;

    IF TG_OP = 'UPDATE' THEN
	FOR I IN (
		SELECT 
		V_RECORD_OLD.priority,
                  V_RECORD_OLD.priceto,
                  V_RECORD_OLD.pricefr,
                  V_RECORD_OLD.exception_basis,
                  V_RECORD_OLD.discount_factor,
                  V_RECORD_OLD.dtto,
                  V_RECORD_OLD.dtfr,
                  V_RECORD_OLD.ccode6,
                  V_RECORD_OLD.ccode5,
                  V_RECORD_OLD.ccode4,
                  V_RECORD_OLD.ccode3,
                  V_RECORD_OLD.ccode2,
                  V_RECORD_OLD.ccode1,
                  V_RECORD_OLD.invarticle_code,
                  V_RECORD_OLD.dept_grpcode,
                  V_RECORD_OLD.section_grpcode,
                  V_RECORD_OLD.division_grpcode,
                  V_RECORD_OLD.icode
		EXCEPT
		SELECT 
		V_RECORD_NEW.priority,
                  V_RECORD_NEW.priceto,
                  V_RECORD_NEW.pricefr,
                  V_RECORD_NEW.exception_basis,
                  V_RECORD_NEW.discount_factor,
                  V_RECORD_NEW.dtto,
                  V_RECORD_NEW.dtfr,
                  V_RECORD_NEW.ccode6,
                  V_RECORD_NEW.ccode5,
                  V_RECORD_NEW.ccode4,
                  V_RECORD_NEW.ccode3,
                  V_RECORD_NEW.ccode2,
                  V_RECORD_NEW.ccode1,
                  V_RECORD_NEW.invarticle_code,
                  V_RECORD_NEW.dept_grpcode,
                  V_RECORD_NEW.section_grpcode,
                  V_RECORD_NEW.division_grpcode,
                  V_RECORD_NEW.icode
			 )
	LOOP
	  V_REC_COUNT := 1; 
		INSERT INTO AUD_SALPRICELISTDET SELECT V_RECORD_OLD.*;
       INSERT INTO AUD_SALPRICELISTDET SELECT V_RECORD_NEW.*;    
	END LOOP;   
    END IF;

    IF TG_OP = 'DELETE' THEN
		V_REC_COUNT := 1;
		INSERT INTO AUD_SALPRICELISTDET SELECT V_RECORD_OLD.*;
    END IF;
	
	IF V_REC_COUNT >  0
	THEN
	   BEGIN
            INSERT INTO AUD_TRANSACTION (TRANSACTION_ID, TRANSACTION_DATE, LOGIN_USER, PROGRAM, MODULE_SHORTCODE, MODULE_TYPE)
            VALUES (V_TRNID,   current_date,V_LOGINUSER, V_PROGRAM, 'SalePriceList', 'Price List');
       EXCEPTION WHEN unique_violation THEN
            NULL;
       END;  

       BEGIN  
             INSERT INTO AUD_TRANSACTION_TABLE (TRANSACTION_ID, TABLE_NAME)
             VALUES (V_TRNID,  'SALPRICELISTDET');
       EXCEPTION WHEN unique_violation THEN
             NULL;
       END; 
	END IF;   
    

    IF TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;
    EXCEPTION
        WHEN others THEN
            CALL main.erraudit(SESSION_USER::text, 'T_SALPRICELISTDET_AUD'::CHARACTER, SQLSTATE::text, SQLERRM);
			RAISE;
			RETURN NULL;
END;
"""
  returnType = trigger
  arguments = [
  ]
  language = plpgsql
}

